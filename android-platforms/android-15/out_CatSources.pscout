
UNIQUE_IDENTIFIER:
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)

LOCATION_INFORMATION:
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION (LOCATION_INFORMATION)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_FINE_LOCATION (LOCATION_INFORMATION)
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> android.permission.ACCESS_FINE_LOCATION (LOCATION_INFORMATION)

NETWORK_INFORMATION:
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> android.permission.ACCESS_NETWORK_STATE (NETWORK_INFORMATION)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> android.permission.ACCESS_WIFI_STATE (NETWORK_INFORMATION)
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])> android.permission.STOP_APP_SWITCHES (NETWORK_INFORMATION)
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES (NETWORK_INFORMATION)

ACCOUNT_INFORMATION:
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.MANAGE_ACCOUNTS (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS (ACCOUNT_INFORMATION)

BLUETOOTH_INFORMATION:
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothPan: boolean isTetheringOn()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: java.lang.String getName()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)

SYNCHRONIZATION_DATA:
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (SYNCHRONIZATION_DATA)
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)

SMS_MMS:
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> android.permission.RECEIVE_SMS (SMS_MMS)

CONTACT_INFORMATION:
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_CONTACTS (CONTACT_INFORMATION)
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM (CONTACT_INFORMATION)
<com.android.vcard.VCardProperty: java.util.List getValueList()> android.permission.STOP_APP_SWITCHES (CONTACT_INFORMATION)

CALENDAR_INFORMATION:
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)

SYSTEM_SETTINGS:
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)

NFC:
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)> android.permission.NFC (NFC)
