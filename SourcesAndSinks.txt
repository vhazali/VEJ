
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_COARSE_LOCATION -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> android.permission.ACCESS_COARSE_LOCATION -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_FINE_LOCATION -> _SOURCE_
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK -> _SOURCE_
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_COARSE_LOCATION -> _SOURCE_
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> android.permission.ACCESS_FINE_LOCATION -> _SOURCE_

<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbTitle(int)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setVariableSpeed(float)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List)> -> _SINK_
<android.webkit.WebView: void setNetworkType(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)> -> _SINK_
<android.widget.ZoomButtonsController: void setVisible(boolean)> -> _SINK_
<android.filterfw.core.GLFrame: void setViewport(int,int,int,int)> -> _SINK_
<android.telephony.NeighboringCellInfo: void setRssi(int)> -> _SINK_
<android.view.SurfaceView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.app.ActivityManagerProxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)> -> _SINK_
<android.widget.TextView$PinnedPopupWindow: void updatePosition(int,int,boolean,boolean)> -> _SINK_
<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void setProcessLimit(int)> -> _SINK_
<android.os.Messenger: void send(android.os.Message)> -> _SINK_
<com.android.server.AppWidgetService: void registerForBroadcastsLocked(com.android.server.AppWidgetService$Provider,int[])> -> _SINK_
<com.android.server.location.MockProvider: void setLocation(android.location.Location)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)> -> _SINK_
<android.media.AudioService: void setSpeakerphoneOn(boolean)> -> _SINK_
<android.widget.RemoteViews: void setDisplayedChild(int,int)> -> _SINK_
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void remove(android.view.IWindow)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixForParsing(java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setNumSpeedSteps(int)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setCandidatesViewShown(boolean)> -> _SINK_
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void initialize(com.android.internal.view.menu.MenuItemImpl,int)> -> _SINK_
<android.server.BluetoothService: boolean setName(java.lang.String)> -> _SINK_
<android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)> -> _SINK_
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.Scroller: void startScroll(int,int,int,int)> -> _SINK_
<android.server.BluetoothDeviceProperties: void setProperty(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.wm.AppWindowToken: void setAnimation(android.view.animation.Animation)> -> _SINK_
<android.os.Parcel: void writeCharArray(char[])> -> _SINK_
<android.webkit.FrameLoader: void setCacheMode(int)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setStringConversionColumn(int)> -> _SINK_
<android.widget.AbsListView: int access$1600(android.widget.AbsListView)> -> _SINK_
<android.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)> -> _SINK_
<android.app.Activity: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.content.ContentProviderProxy: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.app.ActionBar: void setHomeButtonEnabled(boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> -> _SINK_
<android.location.IGeocodeProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)> -> _SINK_
<android.filterfw.core.FilterContext: void storeFrame(java.lang.String,android.filterfw.core.Frame)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromAccessPoint(android.net.wifi.WpsInfo)> -> _SINK_
<android.app.ContextImpl: void setActivityToken(android.os.IBinder)> -> _SINK_
<android.preference.Preference: boolean persistLong(long)> -> _SINK_
<com.android.server.sip.SipWakeupTimer: void set(int,java.lang.Runnable)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: boolean setComposingText(java.lang.CharSequence,int)> -> _SINK_
<com.android.server.pm.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int,java.util.List)> -> _SINK_
<android.net.wifi.WifiStateMachine: void sendBluetoothAdapterStateChange(int)> -> _SINK_
<com.android.server.wm.Session: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> -> _SINK_
<com.android.server.MountService$ObbActionHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.graphics.ColorMatrix: void setRotate(int,float)> -> _SINK_
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)> -> _SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.storage.IMountServiceListener$Stub$Proxy: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.EventLogTags: void writeConnectivityStateChanged(int)> -> _SINK_
<android.server.BluetoothEventLoop$1: void handleMessage(android.os.Message)> -> _SINK_
<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])> -> _SINK_
<android.view.ViewTreeObserver$InternalInsetsInfo: void set(android.view.ViewTreeObserver$InternalInsetsInfo)> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> -> _SINK_
<android.widget.ZoomControls: void setOnZoomOutClickListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.server.wm.InputManager$Callbacks: long notifyANR(com.android.server.wm.InputApplicationHandle,com.android.server.wm.InputWindowHandle)> -> _SINK_
<android.preference.GenericInflater: java.lang.Object createItem(java.lang.String,java.lang.String,android.util.AttributeSet)> -> _SINK_
<android.app.ApplicationThreadProxy: void schedulePauseActivity(android.os.IBinder,boolean,boolean,int)> -> _SINK_
<android.app.ActivityManagerProxy: void moveTaskToBack(int)> -> _SINK_
<android.widget.ExpandableListView: void setAdapter(android.widget.ExpandableListAdapter)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setNationalNumberPattern(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)> -> _SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)> -> _SINK_
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)> -> _SINK_
<android.view.GLES20TextureLayer: void update(int,int,boolean)> -> _SINK_
<com.android.internal.policy.impl.PatternUnlockScreen: void access$1000(com.android.internal.policy.impl.PatternUnlockScreen,com.android.internal.policy.impl.PatternUnlockScreen$FooterMode)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.InputStream,java.lang.String)> -> _SINK_
<android.view.View$10: void setValue(java.lang.Object,float)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardHelper: void sendDownUpKeyEvents(int)> -> _SINK_
<android.widget.TextView: void setMaxEms(int)> -> _SINK_
<android.widget.LinearLayout: void setMeasureWithLargestChildEnabled(boolean)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setArtwork(int,android.graphics.Bitmap)> -> _SINK_
<com.android.server.LightsService$1: void setFlashlightEnabled(boolean)> -> _SINK_
<android.graphics.PointF: void set(float,float)> -> _SINK_
<android.inputmethodservice.Keyboard: void setVerticalGap(int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)> -> _SINK_
<android.view.HardwareRenderer: void initializeIfNeeded(int,int,android.view.View$AttachInfo,android.view.SurfaceHolder)> -> _SINK_
<android.content.pm.IPackageInstallObserver$Stub$Proxy: void packageInstalled(java.lang.String,int)> -> _SINK_
<android.app.backup.RestoreObserver: void restoreFinished(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)> -> _SINK_
<android.widget.Toast: void setMargin(float,float)> -> _SINK_
<android.preference.Preference: void setOnPreferenceChangeInternalListener(android.preference.Preference$OnPreferenceChangeInternalListener)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)> -> _SINK_
<android.view.CompatibilityInfoHolder: void set(android.content.res.CompatibilityInfo)> -> _SINK_
<android.view.HardwareRenderer$Gl20Renderer: void setup(int,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)> -> _SINK_
<android.widget.MediaController: void setAnchorView(android.view.View)> -> _SINK_
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setSplitActionBar(boolean)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setAlpha(int)> -> _SINK_
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)> -> _SINK_
<android.widget.Spinner$DialogPopup: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<android.filterfw.core.FilterPort: void setBlocking(boolean)> -> _SINK_
<android.nfc.Tag: void setConnectedTechnology(int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleased(int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)> -> _SINK_
<com.android.server.am.AppErrorResult: void set(int)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)> -> _SINK_
<com.android.internal.app.AlertController: void setView(android.view.View)> -> _SINK_
<android.app.ActivityManagerProxy: void killApplicationProcess(java.lang.String,int)> -> _SINK_
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String,boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.widget.MediaController: void setPrevNextListeners(android.view.View$OnClickListener,android.view.View$OnClickListener)> -> _SINK_
<android.widget.AbsListView: void access$3300(android.widget.AbsListView,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void reportThumbnail(android.os.IBinder,android.graphics.Bitmap,java.lang.CharSequence)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setEventType(int)> -> _SINK_
<android.media.AudioManager: void setStreamSolo(int,boolean)> -> _SINK_
<android.net.ConnectivityManager: int setUsbTethering(boolean)> -> _SINK_
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)> -> _SINK_
<android.preference.Preference: void setTitle(int)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.view.IWindowSession openSession(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)> -> _SINK_
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)> -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> -> _SINK_
<com.android.internal.widget.DrawableHolder: void setAlpha(float)> -> _SINK_
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)> -> _SINK_
<android.widget.TextView: boolean bringPointIntoView(int)> -> _SINK_
<android.graphics.ColorMatrix: void postConcat(android.graphics.ColorMatrix)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setOnBattery(boolean,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)> -> _SINK_
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,java.lang.Object)> -> _SINK_
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.util.SparseArray: void append(int,java.lang.Object)> -> _SINK_
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.app.Activity: boolean moveTaskToBack(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: void setPerformAccessibilityActionResult(boolean,int)> -> _SINK_
<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: void setFormat(int)> -> _SINK_
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)> -> _SINK_
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)> -> _SINK_
<android.view.GLES20Canvas: void setViewport(int,int)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void dispatchMessage(android.os.Message)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundResource(int)> -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceName(java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> android.permission.DISABLE_KEYGUARD -> _SINK_
<com.android.server.AlarmManagerService$ResultReceiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)> -> _SINK_
<com.android.server.am.TaskRecord: void setIntent(android.content.Intent,android.content.pm.ActivityInfo)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setCornerRadii(float[])> -> _SINK_
<android.app.Activity: void setPersistent(boolean)> -> _SINK_
<android.net.NetworkStatsHistory: void dump(java.lang.String,java.io.PrintWriter,boolean)> -> _SINK_
<android.graphics.ColorMatrix: void set(float[])> -> _SINK_
<android.preference.PreferenceGroup: void addItemFromInflater(android.preference.Preference)> -> _SINK_
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataActivity(int)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setCornerRadius(float)> -> _SINK_
<android.os.Parcel: void writeByteArray(byte[],int,int)> -> _SINK_
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingText(java.lang.CharSequence,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void setBatteryState(int,int,int,int,int,int)> -> _SINK_
<android.content.BroadcastReceiver: void setPendingResult(android.content.BroadcastReceiver$PendingResult)> -> _SINK_
<android.app.ActivityManagerProxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)> -> _SINK_
<android.view.animation.Animation: void setBackgroundColor(int)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setDelay(float)> -> _SINK_
<android.server.BluetoothService: boolean setScanMode(int,int)> -> _SINK_
<android.widget.Spinner$DropdownPopup: void setPromptText(java.lang.CharSequence)> -> _SINK_
<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)> -> _SINK_
<android.text.method.NumberKeyListener: boolean ok(char[],char)> -> _SINK_
<android.widget.ZoomButton: void setZoomSpeed(long)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)> -> _SINK_
<android.widget.AbsListView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setDomesticCarrierCodeFormattingRule(java.lang.String)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setTitle(int)> -> _SINK_
<android.view.ViewRootImpl$W: void resized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)> -> _SINK_
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)> -> _SINK_
<com.android.server.pm.PackageManagerService$6: boolean accept(java.io.File,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void revokeUriPermissionFromOwner(android.os.IBinder,android.net.Uri,int)> -> _SINK_
<android.location.Address: void setCountryName(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setConnectionId(int)> -> _SINK_
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.webkit.WebView: void updateDoubleTapZoom(int)> -> _SINK_
<android.os.Parcel: void writeDoubleArray(double[])> -> _SINK_
<android.widget.SuggestionsAdapter: void setQueryRefinement(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(android.view.View)> -> _SINK_
<android.location.Address: void setSubLocality(java.lang.String)> -> _SINK_
<android.graphics.drawable.DrawableContainer: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.internal.widget.LockPatternView: void onRestoreInstanceState(android.os.Parcelable)> -> _SINK_
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.server.am.CompatModePackages: void setFrontActivityScreenCompatModeLocked(int)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProfileName(java.lang.String)> -> _SINK_
<android.webkit.WebTextView: void setInputType(int)> -> _SINK_
<com.android.internal.util.XmlUtils: void writeMapXml(java.util.Map,java.io.OutputStream)> -> _SINK_
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[])> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void setTimeout(long)> -> _SINK_
<android.media.AudioService: void setVibrateSetting(int,int)> -> _SINK_
<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)> -> _SINK_
<android.graphics.drawable.DrawableContainer: void onBoundsChange(android.graphics.Rect)> -> _SINK_
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<android.widget.RelativeLayout: void setIgnoreGravity(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> -> _SINK_
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(java.lang.String,int)> -> _SINK_
<android.widget.ProgressBar: void setInterpolator(android.content.Context,int)> -> _SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)> -> _SINK_
<android.content.res.Resources: android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SINK_
<android.location.Location: void setProvider(java.lang.String)> -> _SINK_
<android.database.AbstractWindowedCursor: void setWindow(android.database.CursorWindow)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClick(java.lang.String,java.lang.String,int)> -> _SINK_
<android.filterfw.core.OutputPort: void setBasePort(android.filterfw.core.InputPort)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.View: void dispatchSetPressed(boolean)> -> _SINK_
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)> -> _SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationEnd(android.animation.Animator)> -> _SINK_
<android.app.Activity: void performSaveInstanceState(android.os.Bundle)> -> _SINK_
<android.widget.AdapterViewAnimator$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setBatteryState(int,int,int,int,int,int)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean)> -> _SINK_
<com.android.server.am.CompatModePackages: void setFrontActivityAskCompatModeLocked(boolean)> -> _SINK_
<com.android.server.wm.InputManager: void setSystemUiVisibility(int)> -> _SINK_
<android.animation.ValueAnimator: void setFrameDelay(long)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: boolean checkInternalFreeStorage(android.net.Uri,long)> -> _SINK_
<android.test.IsolatedContext$MockAccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> -> _SINK_
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)> -> _SINK_
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)> -> _SINK_
<com.android.server.am.BroadcastFilter: void dumpBrief(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)> -> _SINK_
<android.widget.ListView: void setDividerHeight(int)> -> _SINK_
<android.app.Activity: void startActivity(android.content.Intent)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.webkit.CallbackProxy: void addMessageToConsole(java.lang.String,int,java.lang.String,int)> -> _SINK_
<android.view.HardwareRenderer: void setRequested(boolean)> -> _SINK_
<android.opengl.Matrix: void rotateM(float[],int,float[],int,float,float,float,float)> -> _SINK_
<android.view.View: void setPadding(int,int,int,int)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setSubtitle(int)> -> _SINK_
<com.android.server.WifiService$LockList: void access$2800(com.android.server.WifiService$LockList,java.io.PrintWriter)> -> _SINK_
<android.view.Window: void setType(int)> -> _SINK_
<android.hardware.SensorManager$ListenerDelegate: boolean hasSensor(android.hardware.Sensor)> -> _SINK_
<android.text.style.SuggestionSpan: void setFlags(int)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection)> -> _SINK_
<android.preference.Preference: boolean persistStringSet(java.util.Set)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void dispatchSystemUiVisibilityChanged(int,int,int,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int)> -> _SINK_
<android.net.sip.SipProfile: void setCallingUid(int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMainCountryForCode(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setArtwork(int,android.graphics.Bitmap)> -> _SINK_
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void verifyPendingInstall(int,int)> -> _SINK_
<android.view.GLES20Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)> -> _SINK_
<com.android.server.EventLogTags: void writePowerScreenBroadcastSend(int)> -> _SINK_
<com.android.server.pm.Settings: void dumpReadMessagesLPr(java.io.PrintWriter,com.android.server.pm.PackageManagerService$DumpState)> -> _SINK_
<android.net.wifi.WifiStateMachine: void access$14100(android.net.wifi.WifiStateMachine,android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.http.AndroidHttpClient$LoggingConfiguration: void access$600(android.net.http.AndroidHttpClient$LoggingConfiguration,java.lang.String)> -> _SINK_
<android.text.Layout: float measurePara(android.text.TextPaint,android.text.TextPaint,java.lang.CharSequence,int,int)> -> _SINK_
<android.view.Window: void setContainer(android.view.Window)> -> _SINK_
<android.speech.tts.TextToSpeech: int setSpeechRate(float)> -> _SINK_
<android.graphics.ColorMatrix: void setSaturation(float)> -> _SINK_
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)> -> _SINK_
<android.app.Activity: void setResult(int,android.content.Intent)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: void setColumnDelay(float)> -> _SINK_
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<android.widget.MediaController: void setEnabled(boolean)> -> _SINK_
<com.android.server.PowerManagerService: void setScreenBrightnessOverride(int)> -> _SINK_
<android.view.View: void setTag(java.lang.Object)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordExpirationTimeout(android.content.ComponentName,long)> -> _SINK_
<android.filterfw.core.FieldPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> -> _SINK_
<android.view.View: void setPivotY(float)> -> _SINK_
<android.widget.PopupWindow: void setTouchModal(boolean)> -> _SINK_
<android.os.UEventObserver: int access$100(byte[])> -> _SINK_
<android.filterfw.core.InputPort: void setSourcePort(android.filterfw.core.OutputPort)> -> _SINK_
<com.android.internal.os.storage.ExternalStorageFormatter: void updateProgressDialog(int)> -> _SINK_
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)> -> _SINK_
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfosByViewTextInActiveWindow(java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)> -> _SINK_
<android.webkit.CallbackProxy: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)> -> _SINK_
<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.ExpandableListView: void setChildIndicator(android.graphics.drawable.Drawable)> -> _SINK_
<android.location.Address: void setPostalCode(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: void addConnection(int,android.accessibilityservice.IAccessibilityServiceConnection)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void goToSleepWithReason(long,int)> -> _SINK_
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isObbMounted(java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setVisiblePatternEnabled(boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setIcon(int)> -> _SINK_
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)> -> _SINK_
<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)> -> _SINK_
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_
<android.text.style.CharacterStyle$Passthrough: void updateDrawState(android.text.TextPaint)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ServerTransaction sendRinging(javax.sip.RequestEvent,java.lang.String)> -> _SINK_
<android.webkit.WebHistoryItem: void setCustomData(java.lang.Object)> -> _SINK_
<android.view.View: boolean dispatchConsistencyCheck(int)> -> _SINK_
<android.media.RemoteControlClient$1: void setCurrentClientGenerationId(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int)> -> _SINK_
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setScaleY(float)> -> _SINK_
<android.view.GLES20Canvas: void restoreToCount(int)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsStart(long)> -> _SINK_
<com.android.server.IntentResolver: boolean isFilterStopped(android.content.IntentFilter)> -> _SINK_
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.webkit.CacheManager$CacheResult: void setContentLength(long)> -> _SINK_
<android.widget.ExpandableListView: void setSelectedGroup(int)> -> _SINK_
<android.net.Uri: int compareTo(android.net.Uri)> -> _SINK_
<android.text.method.NumberKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)> -> _SINK_
<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.Matrix$1: void setScale(float,float,float,float)> -> _SINK_
<android.widget.ScrollBarDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeNotification(android.os.IBinder)> -> _SINK_
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.database.BulkCursorNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void setCurrentClientGenerationId(int)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)> -> _SINK_
<android.location.Criteria: void setVerticalAccuracy(int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.widget.FastScroller: void setAlwaysShow(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void detachPppd(java.lang.String)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean disableNetwork(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)> -> _SINK_
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void setInstructionText(java.lang.String)> -> _SINK_
<android.os.AsyncTask: boolean cancel(boolean)> -> _SINK_
<android.content.res.Resources: java.io.InputStream openRawResource(int)> -> _SINK_
<com.android.server.wm.Session: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> -> _SINK_
<android.view.View: void setBackgroundResource(int)> -> _SINK_
<android.widget.ListView: void setAdapter(android.widget.Adapter)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setAudioState(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.internal.app.AlertController: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.PopupWindow: void setFocusable(boolean)> -> _SINK_
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)> -> _SINK_
<android.security.Credentials: void install(android.content.Context,java.security.KeyPair)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedError(int,java.lang.String,java.lang.String)> -> _SINK_
<android.view.ViewGroup: void setDescendantFocusability(int)> -> _SINK_
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(long)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)> -> _SINK_
<com.android.server.location.LocationProviderProxy: void enableLocationTracking(boolean)> -> _SINK_
<com.android.server.am.AppBindRecord: void dumpInIntentBind(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)> -> _SINK_
<android.widget.OverScroller$SplineOverScroller: void fling(int,int,int,int,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setPackageStoppedState(java.lang.String,boolean)> -> _SINK_
<android.os.Parcel: void writeIntArray(int[])> -> _SINK_
<android.os.Parcel: void writeStringArray(java.lang.String[])> -> _SINK_
<android.media.MediaRecorder: void setCaptureRate(double)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: void setPosition(int)> -> _SINK_
<android.app.DownloadManager$Request: android.content.ContentValues toContentValues(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)> -> _SINK_
<android.appwidget.AppWidgetHostView: void dispatchSaveInstanceState(android.util.SparseArray)> -> _SINK_
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)> -> _SINK_
<com.android.server.wm.InputManager: void setDisplaySize(int,int,int,int,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)> -> _SINK_
<com.android.server.AppWidgetService: void updateAppWidgetInstanceLocked(com.android.server.AppWidgetService$AppWidgetId,android.widget.RemoteViews,boolean)> -> _SINK_
<android.content.ContentProvider: int access$000(android.content.ContentProvider)> -> _SINK_
<android.view.View: void setTranslationX(float)> -> _SINK_
<android.view.View: void sendAccessibilityEvent(int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setTrustManagers(javax.net.ssl.TrustManager[])> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.Process: android.os.Process$ProcessStartResult start(java.lang.String,java.lang.String,int,int,int[],int,int,java.lang.String[])> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setTactileFeedbackEnabled(boolean)> -> _SINK_
<android.widget.ProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsPbc(android.net.wifi.WpsInfo)> -> _SINK_
<android.widget.AbsSeekBar: void onMeasure(int,int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void layoutWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams,android.view.WindowManagerPolicy$WindowState)> -> _SINK_
<android.location.LocationManager$ListenerTransport: void onStatusChanged(java.lang.String,int,android.os.Bundle)> -> _SINK_
<android.graphics.drawable.shapes.RectShape: void onResize(float,float)> -> _SINK_
<android.widget.AbsListView: void setFriction(float)> -> _SINK_
<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$DumpState: void setOptionEnabled(int)> -> _SINK_
<android.view.View: void setScaleX(float)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreFinished(int)> -> _SINK_
<android.widget.ArrayAdapter: void setNotifyOnChange(boolean)> -> _SINK_
<android.view.MotionEvent: void setAction(int)> -> _SINK_
<com.android.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> -> _SINK_
<com.android.server.MountService: void access$1500(com.android.server.MountService,java.lang.String,java.lang.String)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View,int,int,int,int)> -> _SINK_
<android.widget.LinearLayout: void setOrientation(int)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> -> _SINK_
<android.animation.AnimatorSet: void setStartDelay(long)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers)> -> _SINK_
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> -> _SINK_
<android.widget.AbsListView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.filterfw.core.Frame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<android.content.Intent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.lang.Object newResult(android.content.IntentFilter,int)> -> _SINK_
<android.nfc.NfcActivityManager: void setOnNdefPushCompleteCallback(android.app.Activity,android.nfc.NfcAdapter$OnNdefPushCompleteCallback)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncDisableNetwork(com.android.internal.util.AsyncChannel,int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void setError()> -> _SINK_
<android.filterfw.core.ShaderProgram: void setTargetRegion(android.filterfw.geometry.Quad)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setState(int)> -> _SINK_
<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.hardware.usb.UsbRequest: void setClientData(java.lang.Object)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void startKeepAliveProcess(int,com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback)> -> _SINK_
<android.view.View: void setEnabled(boolean)> -> _SINK_
<android.app.Instrumentation: void sendKeySync(android.view.KeyEvent)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SINK_
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])> -> _SINK_
<android.widget.TextView: void setAllCaps(boolean)> -> _SINK_
<com.android.server.am.ReceiverList: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.webkit.HTML5VideoViewProxy: void setBaseLayer(int)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setFilterBitmap(boolean)> -> _SINK_
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> -> _SINK_
<com.android.internal.policy.IFaceLockInterface$Stub$Proxy: void unregisterCallback(com.android.internal.policy.IFaceLockCallback)> -> _SINK_
<android.filterfw.core.GLFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)> -> _SINK_
<android.os.Parcel: void writeTypedList(java.util.List)> -> _SINK_
<com.android.server.am.ConnectionRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.app.ActivityManager$TaskThumbnails: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.widget.TextView: void setMaxLines(int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setTollFree(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.app.Activity: void setIntent(android.content.Intent)> -> _SINK_
<android.widget.ResourceCursorAdapter: void setViewResource(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)> -> _SINK_
<android.widget.PopupWindow: void setWindowLayoutType(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)> -> _SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderEnabled(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: void dump(java.io.PrintWriter)> -> _SINK_
<android.animation.PropertyValuesHolder: void setIntValues(int[])> -> _SINK_
<com.android.internal.widget.SlidingTab: void setLeftHintText(int)> -> _SINK_
<android.webkit.CallbackProxy: void onPageStarted(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<android.widget.ListPopupWindow: void setForceIgnoreOutsideTouch(boolean)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void setReferenceCounted(boolean)> -> _SINK_
<android.os.WorkSource: android.os.WorkSource addReturningNewbs(android.os.WorkSource)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: void attachEngine(android.service.wallpaper.IWallpaperEngine)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiMulticastDisabled(int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(int)> -> _SINK_
<android.inputmethodservice.Keyboard: void setHorizontalGap(int)> -> _SINK_
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)> -> _SINK_
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> -> _SINK_
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)> -> _SINK_
<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver)> -> _SINK_
<android.media.MediaPlayer: boolean enableTimedTextTrackIndex(int)> -> _SINK_
<android.os.BatteryStats: void dumpLocked(java.io.PrintWriter,java.lang.String,int,int)> -> _SINK_
<android.webkit.SelectActionModeCallback: void setWebView(android.webkit.WebView)> -> _SINK_
<android.view.GLES20Canvas: boolean drawDisplayList(android.view.DisplayList,int,int,android.graphics.Rect)> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void onUnbindMethod(int)> -> _SINK_
<com.android.server.AppWidgetService: void sendEnableIntentLocked(com.android.server.AppWidgetService$Provider)> -> _SINK_
<android.graphics.Matrix: void setRotate(float)> -> _SINK_
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)> -> _SINK_
<android.graphics.drawable.Drawable: boolean setState(int[])> -> _SINK_
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])> -> _SINK_
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)> -> _SINK_
<android.graphics.Matrix$1: void setSinCos(float,float)> -> _SINK_
<android.text.TextPaint: void set(android.text.TextPaint)> -> _SINK_
<android.net.http.Headers: void setContentLength(long)> -> _SINK_
<android.webkit.WebSettings: void setUseDoubleTree(boolean)> -> _SINK_
<android.media.RemoteControlClient: void setPlaybackState(int)> -> _SINK_
<android.widget.Toast: void setText(java.lang.CharSequence)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)> -> _SINK_
<android.widget.FrameLayout: void setForegroundGravity(int)> -> _SINK_
<android.os.WorkSource: boolean add(int)> -> _SINK_
<android.text.format.Time: void set(int,int,int)> -> _SINK_
<android.filterfw.core.VertexFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.app.ActivityManagerProxy: android.os.IBinder peekService(android.content.Intent,java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.ExpandableListConnector: void setMaxExpGroupCount(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setShortcut(char,char)> -> _SINK_
<android.widget.ListView: void setItemsCanFocus(boolean)> -> _SINK_
<android.webkit.PluginFullScreenHolder: void setContentView(android.view.View)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SINK_
<android.preference.PreferenceGroup: void addItemFromInflater(java.lang.Object)> -> _SINK_
<android.database.ContentObservable: void notifyChange(boolean)> -> _SINK_
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelNotificationWithTag(java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Timer: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)> -> _SINK_
<android.app.ActivityManagerProxy: void activityPaused(android.os.IBinder)> -> _SINK_
<android.widget.AdapterViewAnimator: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)> -> _SINK_
<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)> -> _SINK_
<android.view.Window: void setWindowAnimations(int)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadios(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderIconInt(int)> -> _SINK_
<android.filterfw.core.Frame: void setGenericObjectValue(java.lang.Object)> -> _SINK_
<android.app.ActivityGroup: void dispatchActivityResult(java.lang.String,int,int,android.content.Intent)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void requestPermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)> -> _SINK_
<android.widget.AdapterView: void dispatchRestoreInstanceState(android.util.SparseArray)> -> _SINK_
<android.graphics.Matrix$1: void setScale(float,float)> -> _SINK_
<android.view.GLES20Canvas: int saveLayerAlpha(float,float,float,float,int,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void access$700(com.android.internal.policy.impl.KeyguardStatusViewManager,int,java.lang.CharSequence)> -> _SINK_
<android.widget.TextView: void setMaxWidth(int)> -> _SINK_
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.media.MediaFile: void addFileType(java.lang.String,int,java.lang.String,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewManager: void setNeedsInput(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(int)> -> _SINK_
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)> -> _SINK_
<android.location.GpsSatellite: void setStatus(android.location.GpsSatellite)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,java.lang.String[])> -> _SINK_
<android.os.Handler: boolean sendMessage(android.os.Message)> -> _SINK_
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> -> _SINK_
<android.filterfw.core.Filter: void setWaitsOnInputPort(java.lang.String,boolean)> -> _SINK_
<android.media.AudioService$VolumeStreamState: void setVolumeIndexSettingName(java.lang.String)> -> _SINK_
<android.security.SystemKeyStore: byte[] generateNewKey(int,java.lang.String,java.lang.String)> -> _SINK_
<android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)> -> _SINK_
<android.view.SurfaceView$MyWindow: void dispatchAppVisibility(boolean)> -> _SINK_
<android.content.ContentProvider$Transport: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)> -> _SINK_
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setBarBackgroundResource(int)> -> _SINK_
<android.filterfw.core.GLFrame: void setInts(int[])> -> _SINK_
<android.content.pm.PackageParser: void setOnlyCoreApps(boolean)> -> _SINK_
<android.widget.ProgressBar: void setProgress(int)> -> _SINK_
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ExpandableListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> -> _SINK_
<android.speech.tts.TextToSpeech: int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)> -> _SINK_
<android.widget.AutoCompleteTextView: void setThreshold(int)> -> _SINK_
<android.graphics.Matrix: void setTranslate(float,float)> -> _SINK_
<com.android.server.NetworkManagementSocketTagger: void setThreadSocketStatsUid(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)> -> _SINK_
<android.view.View$7: void setValue(android.view.View,float)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.app.ActivityManagerProxy: void activityDestroyed(android.os.IBinder)> -> _SINK_
<android.location.Address: void setLongitude(double)> -> _SINK_
<android.webkit.CallbackProxy: void setWebBackForwardListClient(android.webkit.WebBackForwardListClient)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScale(int,float)> -> _SINK_
<android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)> -> _SINK_
<android.widget.TextView: void setEms(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkSignatures(java.lang.String,java.lang.String)> -> _SINK_
<android.filterfw.core.FilterPort: void setPortFormat(android.filterfw.core.FrameFormat)> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onHoverEvent(android.view.MotionEvent)> -> _SINK_
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean leftWord(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.app.ActivityManagerProxy: void revokeUriPermission(android.app.IApplicationThread,android.net.Uri,int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.os.TokenWatcher: int access$102(android.os.TokenWatcher,int)> -> _SINK_
<android.preference.PreferenceManager: void dispatchNewIntent(android.content.Intent)> -> _SINK_
<com.android.server.pm.PackageSignatures: void writeXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.ArrayList)> -> _SINK_
<android.widget.AutoCompleteTextView: void replaceText(java.lang.CharSequence)> -> _SINK_
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.server.NotificationManagerService$ToastRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.os.Debug: int setAllocationLimit(int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performEditorAction(int)> -> _SINK_
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _SINK_
<com.android.internal.util.StateMachine$ProcessedMessages: void add(android.os.Message,com.android.internal.util.State,com.android.internal.util.State)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboard: boolean setShifted(boolean)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)> -> _SINK_
<com.android.internal.statusbar.StatusBarNotification: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.webkit.WebSettings: void setAllowContentAccess(boolean)> -> _SINK_
<com.android.internal.widget.DrawableHolder: void setX(float)> -> _SINK_
<android.view.View: void setNextFocusRightId(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceThrottle(java.lang.String,int,int)> -> _SINK_
<android.graphics.Matrix$1: void setSinCos(float,float,float,float)> -> _SINK_
<android.widget.ListView: void setCacheColorHint(int)> -> _SINK_
<android.widget.AdapterViewAnimator: void setInAnimation(android.animation.ObjectAnimator)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)> -> _SINK_
<android.app.SearchDialog: void setListSelection(int)> -> _SINK_
<android.content.pm.PackageParser: void setSeparateProcesses(java.lang.String[])> -> _SINK_
<android.widget.ImageView: void onMeasure(int,int)> -> _SINK_
<android.database.BulkCursorProxy: android.os.Bundle respond(android.os.Bundle)> -> _SINK_
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void setNextPoolable(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs)> -> _SINK_
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<android.os.Handler$MessengerImpl: void send(android.os.Message)> -> _SINK_
<android.view.MotionEvent: void setDownTime(long)> -> _SINK_
<com.android.server.wm.InputManager$Callbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,android.filterfw.core.VertexFrame,int,int,int,int,boolean)> -> _SINK_
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.TextView$SelectionEndHandleView: void setActionPopupWindow(android.widget.TextView$ActionPopupWindow)> -> _SINK_
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void access$1100(com.android.internal.policy.impl.KeyguardStatusViewManager,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setCurrentFunction(java.lang.String,boolean)> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)> -> _SINK_
<android.view.View: void setVerticalScrollBarEnabled(boolean)> -> _SINK_
<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)> -> _SINK_
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)> -> _SINK_
<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])> -> _SINK_
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> -> _SINK_
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)> -> _SINK_
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setShowAsAction(int)> -> _SINK_
<com.android.server.pm.Settings: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<android.location.Address: void setCountryCode(java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void startTethering(java.lang.String[])> -> _SINK_
<com.android.internal.widget.LockPatternView: void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)> -> _SINK_
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)> -> _SINK_
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int renameSecureContainer(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternView: boolean onHoverEvent(android.view.MotionEvent)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean)> -> _SINK_
<android.webkit.FrameLoader: void setReferrer(java.lang.String)> -> _SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,java.lang.String)> -> _SINK_
<android.location.Criteria: void setSpeedAccuracy(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setSealed(boolean)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setHintText(int)> -> _SINK_
<android.view.View: void setBottom(int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)> -> _SINK_
<android.widget.AbsListView$RecycleBin: void setCacheColorHint(int)> -> _SINK_
<android.app.Activity: boolean requestWindowFeature(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setNumericShortcut(char)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleStopService(android.os.IBinder)> -> _SINK_
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> -> _SINK_
<android.view.LayoutInflater: void setPrivateFactory(android.view.LayoutInflater$Factory2)> -> _SINK_
<android.accessibilityservice.AccessibilityService: android.content.ComponentName startService(android.content.Intent)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceStatusChanged(java.lang.String,boolean)> -> _SINK_
<android.app.WallpaperManager: void setWallpaperOffsetSteps(float,float)> -> _SINK_
<android.database.DatabaseUtils: void cursorFloatToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<com.android.internal.app.AlertController: void setMessage(java.lang.CharSequence)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SINK_
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)> -> _SINK_
<com.android.server.wm.InputFilter: void onInputEvent(android.view.InputEvent,int)> -> _SINK_
<com.android.internal.widget.TransportControlView: void access$200(com.android.internal.widget.TransportControlView,android.os.Bundle)> -> _SINK_
<android.view.View: void setPivotX(float)> -> _SINK_
<com.android.internal.policy.impl.PatternUnlockScreen: void setEnableFallback(boolean)> -> _SINK_
<android.preference.Preference: void setSummary(int)> -> _SINK_
<android.database.DatabaseUtils: void cursorIntToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.view.View: void setFadingEdgeLength(int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void setSelection(int,int)> -> _SINK_
<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)> -> _SINK_
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)> -> _SINK_
<android.database.CursorWindow: void setStartPosition(int)> -> _SINK_
<com.android.server.pm.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> -> _SINK_
<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _SINK_
<android.graphics.PointF: void set(android.graphics.PointF)> -> _SINK_
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)> -> _SINK_
<android.view.ViewGroup: void dispatchSetActivated(boolean)> -> _SINK_
<android.widget.GridView: void onMeasure(int,int)> -> _SINK_
<android.app.ApplicationPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)> -> _SINK_
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setComposingText(java.lang.CharSequence,int)> -> _SINK_
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)> -> _SINK_
<android.speech.tts.TextToSpeech: int setPitch(float)> -> _SINK_
<android.os.storage.StorageManager$ObbListenerDelegate: void sendObbStateChanged(java.lang.String,int)> -> _SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setSpellCheckerEnabled(boolean)> -> _SINK_
<android.os.WorkSource: android.os.WorkSource[] setReturningDiffs(android.os.WorkSource)> -> _SINK_
<android.app.Activity: void setVisible(boolean)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.webkit.CallbackProxy: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> -> _SINK_
<android.view.View$9: void setValue(java.lang.Object,float)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setComposingRegion(int,int)> -> _SINK_
<android.media.AudioService: void setStreamSolo(int,boolean,android.os.IBinder)> -> _SINK_
<android.widget.ZoomButtonsController: void setFocusable(boolean)> -> _SINK_
<android.widget.PopupWindow: void setAnimationStyle(int)> -> _SINK_
<android.app.Service: void onTaskRemoved(android.content.Intent)> -> _SINK_
<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setTransition(int)> -> _SINK_
<android.view.Window: void setFlags(int,int)> -> _SINK_
<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)> -> _SINK_
<android.view.SurfaceView$4: void setKeepScreenOn(boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void finishPackageInstall(int)> -> _SINK_
<com.android.server.wm.Session: void setTransparentRegion(android.view.IWindow,android.graphics.Region)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void writeExternal(java.io.ObjectOutput)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> -> _SINK_
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> -> _SINK_
<android.widget.ListPopupWindow: void setDropDownAlwaysVisible(boolean)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)> -> _SINK_
<android.net.EthernetDataTracker: void privateDnsRouteSet(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int)> -> _SINK_
<android.filterfw.core.FilterGraph: void setTypeCheckMode(int)> -> _SINK_
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: boolean access$2500(com.android.server.ConnectivityService,java.lang.String,java.lang.String,java.util.Collection,java.lang.String)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void access$300(com.android.server.net.NetworkPolicyManagerService,int)> -> _SINK_
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void setCallback(com.android.internal.view.menu.MenuPresenter$Callback)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)> -> _SINK_
<android.graphics.drawable.PaintDrawable: void setCornerRadii(float[])> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomSpeed(long)> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int)> -> _SINK_
<android.filterfw.core.Frame: void setTimestamp(long)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void flushInterfaceDnsCache(java.lang.String)> -> _SINK_
<android.media.effect.FilterGraphEffect: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<android.view.animation.Animation: void setFillBefore(boolean)> -> _SINK_
<android.view.GLES20Canvas: void setMatrix(android.graphics.Matrix)> -> _SINK_
<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolation(android.os.StrictMode$ViolationInfo)> -> _SINK_
<android.media.AudioService$SetModeDeathHandler: void setMode(int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int stop(java.lang.String)> -> _SINK_
<android.view.View: void setTextDirection(int)> -> _SINK_
<android.os.SystemProperties: void set(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$800(com.android.server.connectivity.Tethering$TetherInterfaceSM,boolean)> -> _SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)> -> _SINK_
<android.view.ViewGroup$3: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.os.Registrant: void notifyResult(java.lang.Object)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> -> _SINK_
<android.content.pm.PackageParser$Instrumentation: void setPackageName(java.lang.String)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -> _SINK_
<android.app.ActivityManagerProxy: android.os.IBinder newUriPermissionOwner(java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)> -> _SINK_
<android.os.StrictMode$AndroidBlockGuardPolicy: void setPolicyMask(int)> -> _SINK_
<android.os.BatteryStats: void dumpCheckinLocked(java.io.PrintWriter,java.lang.String[],java.util.List)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void startAppFreezingScreen(android.os.IBinder,int)> -> _SINK_
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)> -> _SINK_
<android.os.Debug: int setGlobalAllocationLimit(int)> -> _SINK_
<android.os.Handler: boolean post(java.lang.Runnable)> -> _SINK_
<com.android.server.pm.Installer: int setForwardLockPerm(java.lang.String,int)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setAllowedOverRoaming(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> -> _SINK_
<android.widget.Spinner: void setPrompt(java.lang.CharSequence)> -> _SINK_
<android.view.View: void restoreHierarchyState(android.util.SparseArray)> -> _SINK_
<android.os.ServiceManagerProxy: void addService(java.lang.String,android.os.IBinder)> -> _SINK_
<android.app.ApplicationPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setScaleX(float)> -> _SINK_
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void updateStatusIcon(android.os.IBinder,java.lang.String,int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> -> _SINK_
<android.widget.GridView: void setHorizontalSpacing(int)> -> _SINK_
<android.net.EthernetDataTracker: boolean setRadio(boolean)> -> _SINK_
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActivePasswordState(int,int,int,int,int,int,int,int)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboard: void setShiftLocked(boolean)> -> _SINK_
<android.net.http.Headers: void setLocation(java.lang.String)> -> _SINK_
<android.app.Dialog: void setCancelable(boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService: boolean addPermissionLocked(android.content.pm.PermissionInfo,boolean)> -> _SINK_
<android.util.LongSparseArray: void append(long,java.lang.Object)> -> _SINK_
<android.app.backup.BackupHelperDispatcher: void addHelper(java.lang.String,android.app.backup.BackupHelper)> -> _SINK_
<android.graphics.drawable.ClipDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.webkit.CallbackProxy: boolean onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> -> _SINK_
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)> -> _SINK_
<android.server.BluetoothPanProfileHandler: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int)> -> _SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupDataChanged(java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceAlert(java.lang.String)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopSensor(int,int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)> -> _SINK_
<android.webkit.WebSettings: void setMaximumDecodedImageSize(long)> -> _SINK_
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> -> _SINK_
<android.text.PackedObjectVector: void setValue(int,int,java.lang.Object)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)> -> _SINK_
<android.widget.CompoundButton: void setButtonDrawable(int)> -> _SINK_
<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient,java.lang.String)> -> _SINK_
<com.android.server.pm.Settings$1: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)> -> _SINK_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<android.filterfw.core.GLEnvironment: void setSurfaceTimestamp(long)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.location.ILocationProvider$Stub$Proxy: void removeListener(int)> -> _SINK_
<android.os.Parcel: void writeValue(java.lang.Object)> -> _SINK_
<android.filterfw.io.PatternScanner: void skip(java.util.regex.Pattern)> -> _SINK_
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void clearDefaults(java.lang.String)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerEventListener(android.accessibilityservice.IEventListener)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void commitText(java.lang.CharSequence,int)> -> _SINK_
<android.view.Surface: void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)> -> _SINK_
<android.webkit.SslErrorHandlerImpl: void handleSslErrorResponse(android.webkit.LoadListener,android.net.http.SslError,boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)> -> _SINK_
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)> -> _SINK_
<android.os.PowerManager: void setBacklightBrightness(int)> -> _SINK_
<com.android.internal.app.AlertController: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)> -> _SINK_
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)> -> _SINK_
<com.android.server.NotificationManagerService: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)> -> _SINK_
<android.widget.PopupWindow$PopupViewContainer: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.media.AudioManager: void setRouting(int,int,int)> -> _SINK_
<android.widget.ExpandableListView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SINK_
<android.webkit.HTML5VideoView: void setOnPreparedListener(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<android.text.style.SpellCheckSpan: void setSpellCheckInProgress(boolean)> -> _SINK_
<com.android.server.wm.WindowState: void setInputChannel(android.view.InputChannel)> -> _SINK_
<android.preference.PreferenceFragment: void addPreferencesFromResource(int)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreSetsAvailable(android.app.backup.RestoreSet[])> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)> -> _SINK_
<android.widget.PopupWindow: void setHeight(int)> -> _SINK_
<android.location.GpsStatus: void setTimeToFirstFix(int)> -> _SINK_
<android.hardware.Sensor: void setRange(float,float)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void setWindow(android.database.CursorWindow)> -> _SINK_
<android.app.Activity: void setFeatureDrawableResource(int,int)> -> _SINK_
<android.os.RemoteCallback$LocalCallback: void sendResult(android.os.Bundle)> -> _SINK_
<android.util.PrefixPrinter: void println(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)> -> _SINK_
<android.app.Activity: void onNewIntent(android.content.Intent)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet: void add(int,android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout)> -> _SINK_
<android.widget.TextView: void setTextSize(int,float)> -> _SINK_
<android.filterfw.core.GLFrame: void flushGPU(java.lang.String)> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])> -> _SINK_
<android.widget.ExpandableListConnector: void setExpandableListAdapter(android.widget.ExpandableListAdapter)> -> _SINK_
<android.text.format.DateUtils: java.lang.String writeDateTime(java.util.Calendar,boolean)> -> _SINK_
<android.widget.PopupWindow: void setSoftInputMode(int)> -> _SINK_
<android.widget.TextView: void setMarqueeRepeatLimit(int)> -> _SINK_
<com.android.internal.widget.ActionBarContainer: void setTransitioning(boolean)> -> _SINK_
<android.widget.AbsListView: void setFastScrollEnabled(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setDefaultShowAsAction(int)> -> _SINK_
<android.os.RemoteCallback: void sendResult(android.os.Bundle)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setTitle(int)> -> _SINK_
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)> -> _SINK_
<android.location.Address: void setPhone(java.lang.String)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)> -> _SINK_
<android.app.DownloadManager: int markRowDeleted(long[])> -> _SINK_
<android.app.ActivityManagerProxy: void unregisterActivityWatcher(android.app.IActivityWatcher)> -> _SINK_
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)> -> _SINK_
<android.graphics.Matrix$1: void setValues(float[])> -> _SINK_
<android.location.ILocationListener$Stub$Proxy: void onStatusChanged(java.lang.String,int,android.os.Bundle)> -> _SINK_
<android.preference.GenericInflater: void setDefaultPackage(java.lang.String)> -> _SINK_
<android.graphics.drawable.StateListDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.view.View: void sendAccessibilityEventUncheckedInternal(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchWallpaperOffsets(float,float,float,float,boolean)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> -> _SINK_
<android.view.Window: void setBackgroundDrawableResource(int)> -> _SINK_
<com.android.internal.os.IResultReceiver$Stub$Proxy: void send(int,android.os.Bundle)> -> _SINK_
<android.view.View: void setRight(int)> -> _SINK_
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)> -> _SINK_
<android.widget.ExpandableListView: void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener)> -> _SINK_
<android.text.PackedObjectVector: void insertAt(int,java.lang.Object[])> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void set(int,long,android.app.PendingIntent)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setDnsForwarders(java.lang.String[])> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setTitle(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> -> _SINK_
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _SINK_
<android.app.SharedPreferencesImpl: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.net.DummyDataStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)> -> _SINK_
<com.android.server.location.LocationProviderProxy: void updateLocation(android.location.Location)> -> _SINK_
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)> -> _SINK_
<android.widget.ProgressBar: void onSizeChanged(int,int,int,int)> -> _SINK_
<android.webkit.WebView: void setHTML5VideoViewProxy(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<android.test.IsolatedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1000(com.android.server.connectivity.Tethering$TetherInterfaceSM,int)> -> _SINK_
<android.graphics.drawable.PaintDrawable: void setCornerRadius(float)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void performAccessibilityAction(int,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> -> _SINK_
<android.widget.ZoomButtonsController: boolean onTouch(android.view.View,android.view.MotionEvent)> -> _SINK_
<android.webkit.WebBackForwardList: void setCurrentIndex(int)> -> _SINK_
<android.app.Activity: boolean showDialog(int,android.os.Bundle)> -> _SINK_
<android.widget.ExpandableListView: void setChildDivider(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<android.widget.SearchView: void setOnCloseListener(android.widget.SearchView$OnCloseListener)> -> _SINK_
<android.app.Service: void onRebind(android.content.Intent)> -> _SINK_
<android.net.wifi.WifiManager: boolean disableNetwork(int)> -> _SINK_
<android.view.GLES20Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)> -> _SINK_
<android.os.DropBoxManager$Entry: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performContextMenuAction(int)> -> _SINK_
<android.os.Parcel: void writeList(java.util.List)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setTransparentRegionWindow(com.android.server.wm.Session,android.view.IWindow,android.graphics.Region)> -> _SINK_
<com.android.server.LightsService$Light: void pulse(int,int)> -> _SINK_
<android.webkit.HTML5VideoView: void setOnInfoListener(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setDefaultInterfaceForDns(java.lang.String)> -> _SINK_
<android.app.FragmentManagerImpl: boolean dispatchPrepareOptionsMenu(android.view.Menu)> -> _SINK_
<android.app.IThumbnailReceiver$Stub$Proxy: void newThumbnail(int,android.graphics.Bitmap,java.lang.CharSequence)> -> _SINK_
<android.media.MediaPlayer: boolean setParameter(int,int)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: long calculateDirectorySize(java.lang.String)> -> _SINK_
<android.app.IActivityWatcher$Stub$Proxy: void activityResuming(int)> -> _SINK_
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)> -> _SINK_
<android.preference.Preference: void setIcon(int)> -> _SINK_
<android.animation.Animator: void setTarget(java.lang.Object)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setFeature(java.lang.String,boolean)> -> _SINK_
<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)> -> _SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> -> _SINK_
<com.android.internal.util.XmlUtils: java.util.HashMap readMapXml(java.io.InputStream)> -> _SINK_
<android.app.ContextImpl: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)> -> _SINK_
<android.app.Fragment: void setArguments(android.os.Bundle)> -> _SINK_
<com.android.server.AlarmManagerService: int access$1700(com.android.server.AlarmManagerService,int,int)> -> _SINK_
<com.android.internal.os.IDropBoxManagerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.AbsSeekBar: void setMax(int)> -> _SINK_
<android.inputmethodservice.SoftInputWindow: void setToken(android.os.IBinder)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setAccuracy(int)> -> _SINK_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)> -> _SINK_
<android.webkit.WebTextView: void setType(int)> -> _SINK_
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,android.text.style.MetricAffectingSpan[],int,android.graphics.Paint$FontMetricsInt)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDescription(java.lang.CharSequence)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.webkit.WebTextView: void setAdapterCustom(android.webkit.WebTextView$AutoCompleteAdapter)> -> _SINK_
<android.animation.ValueAnimator: void setRepeatCount(int)> -> _SINK_
<android.widget.TextView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setKeyManagers(javax.net.ssl.KeyManager[])> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)> -> _SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceDown(java.lang.String)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setClearsOutput(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)> -> _SINK_
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: void setVisibility(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayUseLogoEnabled(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void enableNat(java.lang.String,java.lang.String)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setInsetsWindow(com.android.server.wm.Session,android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)> -> _SINK_
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)> -> _SINK_
<android.widget.TextView: void setAutoLinkMask(int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void performDeferredDestroy(android.view.IWindow)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void notify(int)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)> -> _SINK_
<com.android.server.am.TransferPipe: void setBufferPrefix(java.lang.String)> -> _SINK_
<android.filterfw.core.FinalPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setShortcut(char,char)> -> _SINK_
<android.webkit.WebView: void setScrollBarStyle(int)> -> _SINK_
<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.webkit.ZoomManager: void updateDefaultZoomDensity(float)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)> -> _SINK_
<android.graphics.Path: void setLastPoint(float,float)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)> -> _SINK_
<android.widget.PopupWindow: void setInputMethodMode(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)> -> _SINK_
<android.content.pm.PackageParser: void setCompatibilityModeEnabled(boolean)> -> _SINK_
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)> -> _SINK_
<android.app.Dialog: void setContentView(int)> -> _SINK_
<android.os.RegistrantList: void notifyResult(java.lang.Object)> -> _SINK_
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int)> -> _SINK_
<android.graphics.Color: int parseColor(java.lang.String)> -> _SINK_
<android.view.View: void setDrawingCacheQuality(int)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addClient(android.view.accessibility.IAccessibilityManagerClient)> -> _SINK_
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: void setState(int)> -> _SINK_
<com.android.internal.app.AlertController: void setIcon(int)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupCheckable(int,boolean,boolean)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setShortcutsVisible(boolean)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.view.View: void setMinimumWidth(int)> -> _SINK_
<com.android.internal.widget.TransportControlView: void access$300(com.android.internal.widget.TransportControlView,int)> -> _SINK_
<android.widget.Spinner$DropdownPopup: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<com.android.server.wm.BlackFrame: void setMatrix(android.graphics.Matrix)> -> _SINK_
<android.graphics.Region: boolean set(android.graphics.Rect)> -> _SINK_
<android.widget.TextView: void setLinksClickable(boolean)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByViewIdInActiveWindow(int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<android.widget.AbsSeekBar: boolean verifyDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.media.AudioService: void setBluetoothScoOn(boolean)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.widget.ProgressBar$RefreshProgressRunnable: void setup(int,int,boolean)> -> _SINK_
<android.filterfw.core.FilterContext: android.filterfw.core.Frame fetchFrame(java.lang.String)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)> -> _SINK_
<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)> -> _SINK_
<android.widget.TextView: void onMeasure(int,int)> -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)> -> _SINK_
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)> -> _SINK_
<android.net.http.Headers: void setExpires(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivitiesInPackage(int,android.content.Intent[],java.lang.String[],android.os.IBinder)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setStrictModeVisualIndicatorPreference(java.lang.String)> -> _SINK_
<com.android.server.sip.SipSessionListenerProxy: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<android.widget.Toast: void setDuration(int)> -> _SINK_
<android.app.Dialog: void setContentView(android.view.View)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int)> -> _SINK_
<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)> -> _SINK_
<android.media.AudioService$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)> -> _SINK_
<android.app.backup.RestoreObserver: void restoreSetsAvailable(android.app.backup.RestoreSet[])> -> _SINK_
<android.widget.SearchView: void setInputType(int)> -> _SINK_
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)> -> _SINK_
<com.android.internal.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.LightsService$Light: void setBrightness(int)> -> _SINK_
<com.android.server.WifiService: boolean setWifiEnabled(boolean)> -> _SINK_
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.AbsSpinner$RecycleBin: void put(int,android.view.View)> -> _SINK_
<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)> -> _SINK_
<android.webkit.WebViewCore: void setMockDeviceOrientation(boolean,double,boolean,double,boolean,double)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: boolean setBackupPassword(java.lang.String,java.lang.String)> -> _SINK_
<android.os.IHardwareService$Stub$Proxy: void setFlashlightEnabled(boolean)> -> _SINK_
<android.filterfw.core.GLFrame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)> -> _SINK_
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPersonalNumber(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SINK_
<android.widget.Spinner: void setAdapter(android.widget.Adapter)> -> _SINK_
<android.app.ActivityManagerProxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopGps(int)> -> _SINK_
<android.widget.AbsListView: int access$2500(android.widget.AbsListView)> -> _SINK_
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)> -> _SINK_
<android.widget.TextView: void setFreezesText(boolean)> -> _SINK_
<android.widget.AbsListView: int access$200(android.widget.AbsListView)> -> _SINK_
<com.android.server.sip.SipService$SipSessionGroupExt: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)> -> _SINK_
<com.android.server.wm.WindowState: void setAnimation(android.view.animation.Animation)> -> _SINK_
<android.media.AudioManager: void setRingerMode(int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void finishDrawing(android.view.IWindow)> -> _SINK_
<com.android.server.wm.WindowManagerService: void addAppToken(int,android.view.IApplicationToken,int,int,boolean)> -> _SINK_
<android.widget.AbsListView: boolean sendToTextFilter(int,int,android.view.KeyEvent)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)> -> _SINK_
<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setActionView(int)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.widget.AbsListView: void setAdapter(android.widget.Adapter)> -> _SINK_
<android.app.ActivityManagerProxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setPointerSpeed(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest)> -> _SINK_
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: void setSplitView(com.android.internal.widget.ActionBarContainer)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setActionProvider(android.view.ActionProvider)> -> _SINK_
<android.view.View: void setFlags(int,int)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setTransitionStyle(int)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setStroke(int,int,float,float)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)> -> _SINK_
<android.webkit.WebTextView: void setSelectionFromWebKit(int,int)> -> _SINK_
<android.location.CountryDetector: void addCountryListener(android.location.CountryListener,android.os.Looper)> -> _SINK_
<android.graphics.drawable.PaintDrawable: boolean inflateTag(java.lang.String,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void deviceAttached(android.hardware.usb.UsbDevice)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setCustomView(android.view.View)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setTransparentRegion(android.view.IWindow,android.graphics.Region)> -> _SINK_
<android.text.style.BulletSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.widget.Switch: void setTextOff(java.lang.CharSequence)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setMimeType(java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setItalianLeadingZero(boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.View: void setId(int)> -> _SINK_
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)> -> _SINK_
<com.android.vcard.VCardProperty: void setValues(java.util.List)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)> -> _SINK_
<android.preference.Preference: boolean persistInt(int)> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int)> -> _SINK_
<android.location.Address: void setLatitude(double)> -> _SINK_
<android.app.FragmentManager: void enableDebugLogging(boolean)> -> _SINK_
<android.preference.PreferenceManager: void dispatchActivityResult(int,int,android.content.Intent)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setActionView(android.view.View)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setUidNetworkRules(int,boolean)> -> _SINK_
<android.widget.SearchView: void setImeOptions(int)> -> _SINK_
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> -> _SINK_
<android.widget.TextView: void onWindowFocusChanged(boolean)> -> _SINK_
<com.android.internal.widget.PointerLocationView: void setPrintCoords(boolean)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setBackDisposition(int)> -> _SINK_
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> -> _SINK_
<android.webkit.WebViewCore$EventHub$1: void handleMessage(android.os.Message)> -> _SINK_
<android.widget.TextView: void setLines(int)> -> _SINK_
<android.filterfw.core.NativeFrame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setActionViewExpanded(boolean)> -> _SINK_
<android.media.IRemoteControlClient$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> -> _SINK_
<android.widget.CompoundButton: boolean verifyDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)> -> _SINK_
<android.telephony.NeighboringCellInfo: void setCid(int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)> -> _SINK_
<com.android.i18n.phonenumbers.RegexCache$LRUCache: void put(java.lang.Object,java.lang.Object)> -> _SINK_
<android.filterfw.core.KeyValueMap: android.filterfw.core.KeyValueMap fromKeyValues(java.lang.Object[])> -> _SINK_
<android.widget.TextView: void onFocusChanged(boolean,int,android.graphics.Rect)> -> _SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String,int)> -> _SINK_
<android.database.AbstractCursor: boolean move(int)> -> _SINK_
<android.view.GLES20Layer: boolean copyInto(android.graphics.Bitmap)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.webkit.FrameLoader: void setContentTypeForPost(java.lang.String)> -> _SINK_
<android.view.View: void setFocusable(boolean)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> -> _SINK_
<android.net.MobileDataStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<com.android.server.AlarmManagerService: void setTime(long)> -> _SINK_
<android.server.BluetoothService: boolean setPairingConfirmation(java.lang.String,boolean)> -> _SINK_
<android.webkit.ZoomControlExternal$ExtendedZoomControls: void setOnZoomInClickListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(android.view.MenuItem)> -> _SINK_
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])> -> _SINK_
<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void freezeRotation(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setTextColor(int,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean removeUser(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.WAKE_LOCK -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])> -> _SINK_
<android.view.ViewGroup: void dispatchSaveInstanceState(android.util.SparseArray)> -> _SINK_
<android.widget.TextView: void setSoftInputShownOnFocus(boolean)> -> _SINK_
<android.widget.RelativeLayout: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.animation.ObjectAnimator: void setFloatValues(float[])> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void restartInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)> -> _SINK_
<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)> -> _SINK_
<com.android.server.pm.PackageManagerService$SdInstallArgs: int copyApk(com.android.internal.app.IMediaContainerService,boolean)> -> _SINK_
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)> -> _SINK_
<android.widget.AdapterViewAnimator: int access$000(android.widget.AdapterViewAnimator)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager$15$1: void sendResult(android.os.Bundle)> -> _SINK_
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.AbsListView: int access$1500(android.widget.AbsListView)> -> _SINK_
<android.widget.AdapterViewAnimator: void setAnimateFirstView(boolean)> -> _SINK_
<android.os.BatteryStats: void dumpCheckinLocked(java.io.PrintWriter,int,int)> -> _SINK_
<android.widget.Toast: void setGravity(int,int,int)> -> _SINK_
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)> -> _SINK_
<com.android.server.IntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)> -> _SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onBackupPackage(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanOnlyMode(boolean)> -> _SINK_
<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)> -> _SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SINK_
<android.location.Criteria: void setSpeedRequired(boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,android.content.IIntentReceiver)> -> _SINK_
<android.view.Window: boolean requestFeature(int)> -> _SINK_
<android.view.HardwareRenderer: void setEnabled(boolean)> -> _SINK_
<android.webkit.WebView$QueuedTouch: android.webkit.WebView$QueuedTouch set(android.webkit.WebViewCore$TouchEventData)> -> _SINK_
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: void setDefaultTouchRecepient(android.view.View)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void setComposingText(java.lang.CharSequence,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)> -> _SINK_
<android.graphics.Region: boolean set(android.graphics.Region)> -> _SINK_
<android.service.wallpaper.IWallpaperService$Stub$Proxy: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int)> -> _SINK_
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setSpan_internal(java.lang.Object,int,int,int)> -> _SINK_
<android.widget.AutoCompleteTextView: void onFilterComplete(int)> -> _SINK_
<android.app.ActivityManagerProxy: void setImmersive(android.os.IBinder,boolean)> -> _SINK_
<android.filterfw.core.NativeFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setOnBatteryLocked(boolean,int,int)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupTransportFailure(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> -> _SINK_
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)> -> _SINK_
<android.text.method.BaseKeyListener: boolean forwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent)> -> _SINK_
<android.net.EthernetDataTracker: void setDependencyMet(boolean)> -> _SINK_
<android.app.LoaderManagerImpl: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int)> -> _SINK_
<android.text.method.MetaKeyKeyListener: void resetLockedMeta(android.text.Spannable)> -> _SINK_
<android.location.ILocationProvider$Stub$Proxy: void updateNetworkState(int,android.net.NetworkInfo)> -> _SINK_
<android.net.LocalSocket: void setSoTimeout(int)> -> _SINK_
<android.widget.SearchView: void setIconified(boolean)> -> _SINK_
<android.content.ContentService: void notifyChange(android.net.Uri,android.database.IContentObserver,boolean,boolean)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setDefaultAssertionStatus(boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: void setShowAsAction(int)> -> _SINK_
<android.server.BluetoothService: boolean setPasskey(java.lang.String,int)> -> _SINK_
<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)> -> _SINK_
<android.database.DatabaseUtils: void cursorFillWindow(android.database.Cursor,int,android.database.CursorWindow)> -> _SINK_
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ProgressDialog: void setProgress(int)> -> _SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onNmeaReceived(long,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.BaseMenuPresenter: void setCallback(com.android.internal.view.menu.MenuPresenter$Callback)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.view.GLES20TextureLayer: void setTransform(android.graphics.Matrix)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)> -> _SINK_
<com.android.server.pm.PreferredActivity: void writeToXml(org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.security.IKeyChainAliasCallback$Stub$Proxy: void alias(java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)> -> _SINK_
<android.widget.OverScroller: void notifyVerticalEdgeReached(int,int,int)> -> _SINK_
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> -> _SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)> -> _SINK_
<android.webkit.Plugin: void setFileName(java.lang.String)> -> _SINK_
<android.widget.TextView: void setTextSize(float)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.widget.CheckedTextView: void setPadding(int,int,int,int)> -> _SINK_
<android.webkit.WebTextView: void setPadding(int,int,int,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<android.os.Process: void killProcessQuiet(int)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setSolidColor(int)> -> _SINK_
<android.widget.Spinner: void setPromptId(int)> -> _SINK_
<android.view.View: void dispatchSetActivated(boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void setItemLimit(int)> -> _SINK_
<android.view.WindowOrientationListener: void setLogEnabled(boolean)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> -> _SINK_
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)> -> _SINK_
<android.filterfw.core.FilterGraph: void setAutoBranchMode(int)> -> _SINK_
<android.graphics.drawable.InsetDrawable: boolean onStateChange(int[])> -> _SINK_
<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextBeforeCursor(java.lang.CharSequence,int)> -> _SINK_
<android.view.SurfaceView: void onMeasure(int,int)> -> _SINK_
<com.android.server.pm.PackageSettingBase: void setInstallStatus(int)> -> _SINK_
<android.widget.TextView: void setSpan_internal(java.lang.Object,int,int,int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void dataChanged(java.lang.String)> -> _SINK_
<android.view.View: void sendAccessibilityEventInternal(int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPremiumRate(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<com.android.server.location.MockProvider: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.PopupWindow: void setClippingEnabled(boolean)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void deleteSurroundingText(int,int)> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpHeap(boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<android.net.wifi.NetworkUpdateResult: void setProxyChanged(boolean)> -> _SINK_
<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)> -> _SINK_
<android.graphics.Bitmap: void setHasAlpha(boolean)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setVisibleInDownloadsUi(boolean)> -> _SINK_
<android.app.WallpaperManager: void setStream(java.io.InputStream)> -> _SINK_
<android.server.BluetoothEventLoop: void onPropertyChanged(java.lang.String[])> -> _SINK_
<com.android.server.wm.WindowManagerService: void updateRotation(boolean)> -> _SINK_
<android.view.ViewGroup: void dispatchVisibilityChanged(android.view.View,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyOtaspChanged(int)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean access$14600(android.net.wifi.WifiStateMachine,java.util.ArrayList)> -> _SINK_
<android.widget.RelativeLayout$DependencyGraph$Node: void setNextPoolable(java.lang.Object)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> -> _SINK_
<android.media.MediaRecorder: void setLocation(float,float)> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setExitFadeDuration(int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)> -> _SINK_
<android.widget.TextView$SelectionStartHandleView: void updateSelection(int)> -> _SINK_
<com.android.internal.app.AlertController: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener,android.os.Message)> -> _SINK_
<android.os.BatteryStats: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.webkit.WebSettings: void setUserAgent(int)> -> _SINK_
<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int verifyEncryptionPassword(java.lang.String)> -> _SINK_
<android.view.GLES20Canvas: void drawPoints(float[],int,int,android.graphics.Paint)> -> _SINK_
<android.os.RegistrantList: void notifyException(java.lang.Throwable)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setChecked(boolean)> -> _SINK_
<android.app.ApplicationPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> -> _SINK_
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void enableIpv6(java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.SYSTEM_ALERT_WINDOW -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: boolean performAccessibilityAction(int,int,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.widget.Spinner: void onMeasure(int,int)> -> _SINK_
<android.view.SurfaceView: void setVisibility(int)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void forceStopPackage(java.lang.String)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setMetadata(int,android.os.Bundle)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable)> -> _SINK_
<com.android.server.sip.SipHelper: void sendCancel(javax.sip.ClientTransaction)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SINK_
<android.view.View: void setLongClickable(boolean)> -> _SINK_
<com.android.ex.variablespeed.VariableSpeed: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> -> _SINK_
<android.widget.RelativeLayout: void setGravity(int)> -> _SINK_
<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<com.android.server.am.PendingIntentRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.graphics.drawable.RotateDrawable: boolean onLevelChange(int)> -> _SINK_
<android.preference.Preference: void setPersistent(boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePackageFromPreferred(java.lang.String)> -> _SINK_
<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)> -> _SINK_
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)> -> _SINK_
<android.accessibilityservice.IEventListener$Stub$Proxy: void setConnection(android.accessibilityservice.IAccessibilityServiceConnection,int)> -> _SINK_
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)> -> _SINK_
<android.widget.TextView$HandleView: void updatePosition(int,int,boolean,boolean)> -> _SINK_
<android.preference.Preference: void notifyDependencyChange(boolean)> -> _SINK_
<android.widget.ImageView: void setColorFilter(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setCheckedInt(boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientEntered(android.view.IWindow)> -> _SINK_
<com.android.internal.view.menu.BaseMenuPresenter: void setId(int)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: void setType(int)> -> _SINK_
<com.android.server.am.BaseErrorDialog: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)> -> _SINK_
<android.server.BluetoothService: void updateDeviceServiceChannelCache(java.lang.String)> -> _SINK_
<com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)> -> _SINK_
<android.location.ILocationProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)> -> _SINK_
<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)> -> _SINK_
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)> -> _SINK_
<android.os.BatteryStats: void printBitDescriptions(java.io.PrintWriter,int,int,android.os.BatteryStats$BitDescription[])> -> _SINK_
<android.widget.ZoomButtonsController: void setAutoDismissed(boolean)> -> _SINK_
<android.os.ResultReceiver$MyResultReceiver: void send(int,android.os.Bundle)> -> _SINK_
<android.text.method.BaseKeyListener: boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: void initForMode(android.view.ActionMode)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SINK_
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)> -> _SINK_
<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])> -> _SINK_
<android.media.RingtoneManager: void setIncludeDrm(boolean)> -> _SINK_
<android.widget.SearchView: void setOnSuggestionListener(android.widget.SearchView$OnSuggestionListener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceRemoved(java.lang.String)> -> _SINK_
<android.widget.PopupWindow: void access$500(android.widget.PopupWindow,boolean)> -> _SINK_
<com.android.server.ConnectivityService: void setPolicyDataEnable(int,boolean)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)> -> _SINK_
<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)> -> _SINK_
<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)> android.permission.WAKE_LOCK -> _SINK_
<android.view.View: void setKeepScreenOn(boolean)> -> _SINK_
<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)> -> _SINK_
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)> -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])> -> _SINK_
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(int)> -> _SINK_
<android.widget.OverScroller: void startScroll(int,int,int,int,int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: boolean isImmersive(android.os.IBinder)> -> _SINK_
<android.widget.TextView: void setHighlightColor(int)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void onBoundsChange(android.graphics.Rect)> -> _SINK_
<android.widget.LinearLayout: void setHorizontalGravity(int)> -> _SINK_
<android.filterfw.core.FieldPort: void pushFrame(android.filterfw.core.Frame)> -> _SINK_
<android.widget.AutoCompleteTextView: boolean onKeyPreIme(int,android.view.KeyEvent)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int formatVolume(java.lang.String)> -> _SINK_
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> -> _SINK_
<android.widget.AbsSpinner: void setSelection(int,boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService: void access$3400(com.android.server.pm.PackageManagerService,boolean,boolean)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener)> -> _SINK_
<android.widget.RemoteViews$SetOnClickPendingIntent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)> -> _SINK_
<android.view.View: void dispatchSetSelected(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void registerActivityWatcher(android.app.IActivityWatcher)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)> -> _SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void finishedEvent(int,boolean)> -> _SINK_
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)> -> _SINK_
<android.server.BluetoothService: boolean setRemoteAlias(java.lang.String,java.lang.String)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void wifiFirmwareReload(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.am.ActivityStack: void activityStoppedLocked(com.android.server.am.ActivityRecord,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppOrientation(android.view.IApplicationToken,int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int loadLanguage(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.security.Credentials: void install(android.content.Context,java.lang.String,byte[])> -> _SINK_
<com.android.server.am.BroadcastFilter: void dumpBroadcastFilterState(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.net.rtp.AudioStream: void setDtmfType(int)> -> _SINK_
<android.hardware.Camera$Parameters: void setJpegQuality(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void dumpLocked(java.io.PrintWriter)> -> _SINK_
<android.location.LocationManager$GpsStatusListenerTransport: void onFirstFix(int)> -> _SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)> -> _SINK_
<android.graphics.Matrix$1: void setRotate(float)> -> _SINK_
<android.text.format.DateUtils: boolean isToday(long)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void selectTab(android.app.ActionBar$Tab)> -> _SINK_
<android.app.IActivityWatcher$Stub$Proxy: void closingSystemDialogs(java.lang.String)> -> _SINK_
<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean truncateTooLongNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void setEnabled(boolean)> -> _SINK_
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int)> -> _SINK_
<android.net.http.SslError: boolean addError(int)> -> _SINK_
<android.widget.AbsSpinner: void setSelectionInt(int,boolean)> -> _SINK_
<android.view.View: void postInvalidateDelayed(long)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: void setVibrateEnabled(boolean)> -> _SINK_
<com.android.server.wm.InputManager: void setInputWindows(com.android.server.wm.InputWindowHandle[])> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: boolean startViewServer(int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.net.wifi.SupplicantStateTracker: void access$200(android.net.wifi.SupplicantStateTracker,android.net.wifi.SupplicantState,boolean)> -> _SINK_
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)> -> _SINK_
<com.android.internal.widget.TransportControlView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SINK_
<android.media.AudioManager: void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,long)> -> _SINK_
<android.widget.AutoCompleteTextView: void setListSelection(int)> -> _SINK_
<android.media.AudioManager: void setParameters(java.lang.String)> -> _SINK_
<android.app.Fragment: void setHasOptionsMenu(boolean)> -> _SINK_
<android.os.Parcel: void writeLongArray(long[])> -> _SINK_
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)> -> _SINK_
<com.android.internal.os.SamplingProfilerIntegration: void access$000(java.lang.String,android.content.pm.PackageInfo)> -> _SINK_
<android.hardware.SensorManager$ListenerDelegate$1: void handleMessage(android.os.Message)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> android.permission.BLUETOOTH -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)> -> _SINK_
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)> -> _SINK_
<android.preference.PreferenceFragment: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<android.server.BluetoothService: void setBluetoothTethering(boolean)> -> _SINK_
<android.webkit.WebView: void setFocusControllerActive(boolean)> -> _SINK_
<android.view.View: void setLayerType(int,android.graphics.Paint)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setSealed(boolean)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartSensor(int,int)> -> _SINK_
<android.os.IRemoteCallback$Stub$Proxy: void sendResult(android.os.Bundle)> -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.database.AbstractCursor: void setExtras(android.os.Bundle)> -> _SINK_
<android.server.BluetoothInputProfileHandler: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.app.SharedPreferencesImpl: void access$800(android.app.SharedPreferencesImpl,android.app.SharedPreferencesImpl$MemoryCommitResult)> -> _SINK_
<com.android.internal.widget.TransportControlView: void access$100(com.android.internal.widget.TransportControlView,int)> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setExtractedText(android.view.inputmethod.ExtractedText)> -> _SINK_
<android.widget.Toast: void setText(int)> -> _SINK_
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.view.View: void setNextFocusDownId(int)> -> _SINK_
<com.android.server.InputMethodManagerService: void updateStatusIcon(android.os.IBinder,java.lang.String,int)> -> _SINK_
<android.view.GLES20RecordingCanvas: int end(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.ContextImpl: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.pm.PackageParser$Permission: void setPackageName(java.lang.String)> -> _SINK_
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.sip.SipService$SipSessionGroupExt: void setIncomingCallPendingIntent(android.app.PendingIntent)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setShowRunningNotification(boolean)> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setTitle(java.lang.CharSequence)> -> _SINK_
<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void statusBarVisibilityChanged(int)> -> _SINK_
<com.android.server.location.MockProvider: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> -> _SINK_
<android.app.Service: void onStart(android.content.Intent,int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)> -> _SINK_
<android.widget.AbsListView: void dispatchSetPressed(boolean)> -> _SINK_
<com.android.server.pm.PackageSettingBase: void setInstallerPackageName(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> -> _SINK_
<android.widget.PopupWindow: void setTouchable(boolean)> -> _SINK_
<android.webkit.WebView: void setInitialScale(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)> -> _SINK_
<android.widget.ImageView: void setImageState(int[],boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupEnabled(int,boolean)> -> _SINK_
<android.view.ViewGroup: void dispatchCollectViewAttributes(int)> -> _SINK_
<com.android.server.pm.Installer: int deleteCacheFiles(java.lang.String)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOpt(java.lang.String)> -> _SINK_
<android.net.http.Request: void setLoadingPaused(boolean)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int)> -> _SINK_
<android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> -> _SINK_
<android.preference.GenericInflater: void setFactory(android.preference.GenericInflater$Factory)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)> -> _SINK_
<android.filterfw.core.Filter: void setWaitsOnOutputPort(java.lang.String,boolean)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setVibratePattern(int)> -> _SINK_
<android.view.Window: void setFormat(int)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void setComposingRegion(int,int)> -> _SINK_
<com.android.server.LocationManagerService$UpdateRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean top(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)> -> _SINK_
<android.app.IThumbnailRetriever$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> -> _SINK_
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)> -> _SINK_
<android.view.GLES20Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,int,android.graphics.Paint)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setInternationalPrefix(java.lang.String)> -> _SINK_
<android.server.BluetoothService: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)> -> _SINK_
<android.widget.OverScroller$SplineOverScroller: void setFriction(float)> -> _SINK_
<android.app.ContextImpl: void setTheme(int)> -> _SINK_
<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SINK_
<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> -> _SINK_
<android.server.BluetoothService: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> -> _SINK_
<android.webkit.Plugin: void setDescription(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setPluginsEnabled(boolean)> -> _SINK_
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int)> -> _SINK_
<android.media.MediaPlayer: void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)> -> _SINK_
<android.nfc.tech.IsoDep: void setTimeout(int)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> -> _SINK_
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<android.widget.AutoCompleteTextView: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)> -> _SINK_
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)> -> _SINK_
<android.app.Instrumentation: void sendTrackballEventSync(android.view.MotionEvent)> -> _SINK_
<android.view.IWindow$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiConfiguration$EnterpriseField: void setValue(java.lang.String)> -> _SINK_
<com.android.server.LightsService$Light: void setFlashing(int,int,int,int)> -> _SINK_
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)> -> _SINK_
<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)> -> _SINK_
<android.view.View: void setScaleY(float)> -> _SINK_
<android.webkit.CookieManager: void setAcceptCookie(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> -> _SINK_
<android.view.MotionEvent: void setSource(int)> -> _SINK_
<android.hardware.Camera$Parameters: void setPictureFormat(int)> -> _SINK_
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)> -> _SINK_
<android.text.SpannableStringInternal: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceQuota(java.lang.String,long)> -> _SINK_
<android.preference.Preference: void setIntent(android.content.Intent)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setDriverStart(boolean,boolean)> -> _SINK_
<android.util.Patterns: java.lang.String concatGroups(java.util.regex.Matcher)> -> _SINK_
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setActive(boolean)> -> _SINK_
<com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesIfNeededLI(java.io.File,java.io.File)> -> _SINK_
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> -> _SINK_
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)> -> _SINK_
<com.android.internal.os.RuntimeInit: void setApplicationObject(android.os.IBinder)> -> _SINK_
<android.graphics.Matrix$1: void set(android.graphics.Matrix)> -> _SINK_
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager$TransientTextManager: void post(java.lang.CharSequence,int,long)> -> _SINK_
<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)> -> _SINK_
<android.animation.LayoutTransition: void setDuration(long)> -> _SINK_
<android.view.View$AttachInfo$InvalidateInfo: void setNextPoolable(java.lang.Object)> -> _SINK_
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void setNativeHandle(int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setGravity(int)> -> _SINK_
<android.app.ActivityManagerProxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationUri(android.net.Uri)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SINK_
<android.filterfw.core.Frame: void reset(android.filterfw.core.FrameFormat)> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFixedSize(int,int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.content.ContentProvider$Transport: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.graphics.Canvas)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setPermanentlyLocked(boolean)> -> _SINK_
<android.app.Instrumentation: void setInTouchMode(boolean)> -> _SINK_
<android.preference.Preference: void setShouldDisableView(boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void addPackageToPreferred(java.lang.String)> -> _SINK_
<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ZoomControls: void setOnZoomInClickListener(android.view.View$OnClickListener)> -> _SINK_
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int,int,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingZeroPossible(boolean)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void updateAppWidget(int,android.widget.RemoteViews)> -> _SINK_
<android.net.http.CertificateChainValidator: android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> -> _SINK_
<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> -> _SINK_
<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer)> -> _SINK_
<android.telephony.gsm.GsmCellLocation: void setPsc(int)> -> _SINK_
<android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.view.GLES20Canvas: void setDrawFilter(android.graphics.DrawFilter)> -> _SINK_
<android.app.IAlarmManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.View: void setMeasuredDimension(int,int)> -> _SINK_
<android.app.Activity: void setProgressBarVisibility(boolean)> -> _SINK_
<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> -> _SINK_
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean,android.graphics.Rect)> -> _SINK_
<android.animation.ValueAnimator: void setCurrentPlayTime(long)> -> _SINK_
<android.app.Activity: void setFeatureDrawableAlpha(int,int)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int)> -> _SINK_
<android.server.BluetoothService: boolean disable(boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPager(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.view.ViewRootImpl$3: void setKeepScreenOn(boolean)> -> _SINK_
<android.net.http.Connection: void setCanPersist(org.apache.http.HttpEntity,org.apache.http.ProtocolVersion,int)> -> _SINK_
<android.widget.AbsListView: void setStackFromBottom(boolean)> -> _SINK_
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)> -> _SINK_
<android.filterfw.io.GraphReader: void addReferencesByKeysAndValues(java.lang.Object[])> -> _SINK_
<android.view.View: void setNextFocusUpId(int)> -> _SINK_
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)> -> _SINK_
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)> -> _SINK_
<com.android.server.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)> -> _SINK_
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)> -> _SINK_
<com.android.server.EventLogTags: void writeWatchdog(java.lang.String)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)> -> _SINK_
<android.net.WebAddress: void setPath(java.lang.String)> -> _SINK_
<android.app.Fragment: void setIndex(int)> -> _SINK_
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> -> _SINK_
<android.webkit.GeolocationPermissions$2: void handleMessage(android.os.Message)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setFixedLine(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.widget.RelativeLayout$DependencyGraph$Node: void setPooled(boolean)> -> _SINK_
<android.net.NetworkInfo: void setIsAvailable(boolean)> -> _SINK_
<android.app.Activity: void setTitle(int)> -> _SINK_
<android.text.style.ReplacementSpan: void updateDrawState(android.text.TextPaint)> -> _SINK_
<android.app.Dialog: boolean requestWindowFeature(int)> -> _SINK_
<android.graphics.Matrix$1: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> -> _SINK_
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.text.method.WordIterator: void setCharSequence(java.lang.CharSequence,int,int)> -> _SINK_
<android.widget.AbsSpinner: void setAdapter(android.widget.Adapter)> -> _SINK_
<android.webkit.Network: void setProxyUsername(java.lang.String)> -> _SINK_
<android.app.ApplicationErrorReport$BatteryInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.server.BluetoothService: boolean setTrust(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager$Channel: int putListener(java.lang.Object)> -> _SINK_
<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.hardware.Camera$Parameters: void setPictureSize(int,int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showMySoftInput(android.os.IBinder,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void unbindRemoteViewsService(int,android.content.Intent)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsLongitude(double)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateSelection(int,int,int,int,int,int)> -> _SINK_
<android.app.ContextImpl: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)> -> _SINK_
<com.android.server.wm.ScreenRotationAnimation: void setSnapshotTransform(android.graphics.Matrix,float)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setAlpha(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)> -> _SINK_
<android.widget.GridView: void setSelection(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)> -> _SINK_
<android.view.ActionProvider: void setSubUiVisibilityListener(android.view.ActionProvider$SubUiVisibilityListener)> -> _SINK_
<android.filterfw.core.FilterContext: void addGraph(android.filterfw.core.FilterGraph)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)> -> _SINK_
<android.view.animation.Animation: void setFillEnabled(boolean)> -> _SINK_
<android.graphics.drawable.RotateDrawable: void setAlpha(int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean switchUser(int)> -> _SINK_
<com.android.server.InputMethodManagerService: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabled(java.lang.String,boolean)> -> _SINK_
<android.app.FragmentManagerImpl: android.os.Bundle saveFragmentBasicState(android.app.Fragment)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.os.IMessenger$Stub$Proxy: void send(android.os.Message)> -> _SINK_
<android.inputmethodservice.SoftInputWindow: void setSize(int)> -> _SINK_
<android.webkit.ZoomManager: void setInitialScaleInPercent(int)> -> _SINK_
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.pm.PackageParser$ServiceIntentInfo)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void finishInput(com.android.internal.view.IInputMethodClient)> -> _SINK_
<android.media.AudioService: void setRingerMode(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void createSession(com.android.internal.view.IInputMethodCallback)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)> -> _SINK_
<android.app.ActivityManagerProxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)> -> _SINK_
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> -> _SINK_
<android.view.Window: void setCloseOnTouchOutsideIfNotSet(boolean)> -> _SINK_
<android.webkit.CacheManager$CacheResult: void setEncoding(java.lang.String)> -> _SINK_
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.sip.SipService$SipSessionGroupExt: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<android.webkit.WebSettings: void setShrinksStandaloneImagesToFit(boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setExtension(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void initialize(com.android.internal.view.menu.MenuItemImpl,int)> -> _SINK_
<com.android.server.pm.Settings: void setInstallStatus(java.lang.String,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setNationalPrefixFormattingRule(java.lang.String)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setDropdownSelectedPosition(int)> -> _SINK_
<android.widget.ListPopupWindow: void setContentWidth(int)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setSize(int,int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setBlendFunc(int,int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)> -> _SINK_
<android.view.View: void setSelected(boolean)> -> _SINK_
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)> -> _SINK_
<android.view.SurfaceView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<android.text.AndroidBidi: int bidi(int,char[],byte[],int,boolean)> -> _SINK_
<android.os.PatternMatcher: boolean matchPattern(java.lang.String,java.lang.String,int)> -> _SINK_
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)> -> _SINK_
<com.android.internal.policy.impl.PatternUnlockScreen: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.widget.RemoteViews$Action: void updateMemoryUsageEstimate(android.widget.RemoteViews$MemoryUsageCounter)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> -> _SINK_
<android.widget.PopupWindow: void update(int,int)> -> _SINK_
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)> -> _SINK_
<android.os.Process: void killProcess(int)> -> _SINK_
<android.net.LinkCapabilities: void put(int,java.lang.String)> -> _SINK_
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)> -> _SINK_
<android.widget.ProgressBar: void onMeasure(int,int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)> -> _SINK_
<android.app.Activity: void openContextMenu(android.view.View)> -> _SINK_
<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClear(java.lang.String,java.lang.String,int)> -> _SINK_
<android.graphics.drawable.ClipDrawable: boolean onLevelChange(int)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int[])> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setInputMethodEnabled(java.lang.String,boolean)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String)> -> _SINK_
<com.android.server.IntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<android.widget.AdapterViewAnimator: void setAdapter(android.widget.Adapter)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setPopupOffset(int,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)> -> _SINK_
<android.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])> -> _SINK_
<android.widget.RemoteViews$SetPendingIntentTemplate: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.preference.PreferenceFragment: void setPreferenceScreen(android.preference.PreferenceScreen)> -> _SINK_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> -> _SINK_
<android.graphics.drawable.LayerDrawable: boolean onStateChange(int[])> -> _SINK_
<com.android.internal.widget.ActionBarView: void setDisplayOptions(int)> -> _SINK_
<android.inputmethodservice.SoftInputWindow: void setGravity(int)> -> _SINK_
<android.content.ContentProvider$Transport: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SINK_
<android.widget.ListView: void setFooterDividersEnabled(boolean)> -> _SINK_
<android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)> -> _SINK_
<android.view.View: void setFastScaleX(float)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)> -> _SINK_
<android.widget.TextView$SelectionModifierCursorController: void onTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.view.View: void setMinimumHeight(int)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: boolean removeTask(int,int)> -> _SINK_
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowTitleEnabled(boolean)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.app.ActivityManagerProxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int)> -> _SINK_
<com.android.server.wm.InputMonitor: void setFocusedAppLw(com.android.server.wm.AppWindowToken)> -> _SINK_
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.server.BluetoothBondState: void attempt(java.lang.String)> -> _SINK_
<com.android.server.location.GpsLocationProvider$3: boolean sendNiResponse(int,int)> -> _SINK_
<android.media.effect.SingleFilterEffect: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.server.pm.PackageManagerService: void freeStorage(long,android.content.IntentSender)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int)> -> _SINK_
<android.view.GLES20Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void onUpdate(int,java.lang.String)> -> _SINK_
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.location.INetInitiatedListener$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiManager: void disableNetwork(int,int)> -> _SINK_
<android.webkit.WebSettings: void setWorkersEnabled(boolean)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void unregisterContentObserver(android.database.IContentObserver)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboard: void setEnterKeyResources(android.content.res.Resources,int,int,int)> -> _SINK_
<android.filterfw.core.KeyValueMap: void setKeyValues(java.lang.Object[])> -> _SINK_
<android.app.ActivityManagerProxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> -> _SINK_
<com.android.server.wm.DragState: void notifyMoveLw(float,float)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)> -> _SINK_
<com.android.internal.policy.IFaceLockInterface$Stub$Proxy: void startUi(android.os.IBinder,int,int,int,int)> -> _SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationStart(android.animation.Animator)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setId(int,int)> -> _SINK_
<android.widget.ListPopupWindow: void setPromptView(android.view.View)> -> _SINK_
<android.view.View: void setDuplicateParentStateEnabled(boolean)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,boolean)> -> _SINK_
<android.widget.AbsListView: int access$2600(android.widget.AbsListView)> -> _SINK_
<android.location.Location: void setBearing(float)> -> _SINK_
<android.widget.AbsListView$PositionScroller: void startWithOffset(int,int)> -> _SINK_
<android.hardware.SensorManager$ListenerDelegate: void addSensor(android.hardware.Sensor)> -> _SINK_
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> -> _SINK_
<android.view.ViewGroup: boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.server.am.IntentBindRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.view.View: void setScrollBarStyle(int)> -> _SINK_
<android.media.AudioManager: void setBluetoothScoOn(boolean)> -> _SINK_
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)> -> _SINK_
<android.view.View$11: void setValue(java.lang.Object,float)> -> _SINK_
<android.widget.TextView: void setError(java.lang.CharSequence)> -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void disable(int)> -> _SINK_
<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewBase: void dispatchSystemUiVisibilityChanged(int)> -> _SINK_
<android.view.View: void setWillNotCacheDrawing(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)> -> _SINK_
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])> -> _SINK_
<android.app.ApplicationThreadProxy: void requestThumbnail(android.os.IBinder)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setIntent(android.content.Intent)> -> _SINK_
<android.filterfw.geometry.Point: void set(float,float)> -> _SINK_
<android.widget.TextView: void setTextScaleX(float)> -> _SINK_
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.animation.AnimatorSet: void setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.content.ContentProvider$Transport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<android.widget.GridView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_
<android.app.ApplicationErrorReport$AnrInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.database.ContentObservable: void dispatchChange(boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfosResult(java.util.List,int)> -> _SINK_
<com.android.server.pm.Settings$1: java.lang.String packageForFilter(android.content.IntentFilter)> -> _SINK_
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)> -> _SINK_
<android.view.View: void setY(float)> -> _SINK_
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> -> _SINK_
<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)> -> _SINK_
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesCount(int)> -> _SINK_
<android.net.LocalSocketImpl: void sendUrgentData(int)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setQwertyMode(boolean)> -> _SINK_
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.CompoundButton: void setButtonDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewFrameRate(int)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setSelection(int,int)> -> _SINK_
<android.view.GLES20Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)> -> _SINK_
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)> -> _SINK_
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: void setContentHeight(int)> -> _SINK_
<android.net.LinkProperties: void setHttpProxy(android.net.ProxyProperties)> -> _SINK_
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.Writer)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendReinvite(javax.sip.Dialog,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.OverScroller: void setFinalY(int)> -> _SINK_
<com.android.internal.app.AlertController: void setInverseBackgroundForced(boolean)> -> _SINK_
<android.os.Message: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperOffsets(float,float,float,float,boolean)> -> _SINK_
<android.widget.ListView: void setSelectionInt(int)> -> _SINK_
<android.view.View$AttachInfo$InvalidateInfo: void setPooled(boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)> -> _SINK_
<android.os.storage.StorageManager$MountServiceBinderListener: void onUsbMassStorageConnectionChanged(boolean)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)> -> _SINK_
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)> -> _SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> -> _SINK_
<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setRecycleOnMeasureEnabled(boolean)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void setCarrierHelpText(int)> -> _SINK_
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.graphics.drawable.DrawableContainer: boolean onLevelChange(int)> -> _SINK_
<android.view.Window: void setUiOptions(int)> -> _SINK_
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])> -> _SINK_
<android.app.ActivityManagerProxy: void attachApplication(android.app.IApplicationThread)> -> _SINK_
<android.app.Dialog: void setVolumeControlStream(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleUnbindService(android.os.IBinder,android.content.Intent)> -> _SINK_
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)> -> _SINK_
<android.server.BluetoothService: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SINK_
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> -> _SINK_
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> -> _SINK_
<android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)> -> _SINK_
<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)> -> _SINK_
<com.android.server.wm.DragState: void broadcastDragStartedLw(float,float)> -> _SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressSystemRun(long)> -> _SINK_
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setProximityCorrectionEnabled(boolean)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleActivityConfigurationChanged(android.os.IBinder)> -> _SINK_
<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)> -> _SINK_
<com.android.ex.variablespeed.VariableSpeed: void setAudioStreamType(int)> -> _SINK_
<android.net.wifi.WifiManager: void connectNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String)> -> _SINK_
<android.location.Location: void setLatitude(double)> -> _SINK_
<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)> -> _SINK_
<android.widget.ProgressBar: void setProgress(int,boolean)> -> _SINK_
<android.util.IntProperty: void set(java.lang.Object,java.lang.Integer)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> -> _SINK_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)> -> _SINK_
<android.view.View$6: void setValue(android.view.View,float)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.AbsListView: void setVelocityScale(float)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.database.DatabaseUtils: void cursorLongToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: int appEarlyNotResponding(java.lang.String,int,java.lang.String)> -> _SINK_
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)> -> _SINK_
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)> -> _SINK_
<android.os.storage.IMountShutdownObserver$Stub$Proxy: void onShutDownComplete(int)> -> _SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.view.GLES20Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)> -> _SINK_
<android.widget.TextView: void setLinkTextColor(int)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)> -> _SINK_
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: void disableCarMode(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper: void setForceShowIcon(boolean)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfosByViewText(java.lang.String,int,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)> -> _SINK_
<android.location.Criteria: void setCostAllowed(boolean)> -> _SINK_
<com.android.server.sip.SipHelper: void sendBye(javax.sip.Dialog)> -> _SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.pm.ParceledListSlice: void setLastSlice(boolean)> -> _SINK_
<android.widget.AbsListView: void smoothScrollToPosition(int)> -> _SINK_
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.server.usb.UsbDeviceManager: void setCurrentFunction(java.lang.String,boolean)> -> _SINK_
<android.widget.TextView: void setShadowLayer(float,float,float,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void unflatten(java.lang.String)> -> _SINK_
<android.media.ToneGenerator: boolean startTone(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setAlphabeticShortcut(char)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$5500(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void crashApplication(int,int,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setVisible(boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<com.android.server.StatusBarManagerService: void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<android.widget.AbsSeekBar: void setThumbOffset(int)> -> _SINK_
<android.location.Location: void setAltitude(double)> -> _SINK_
<android.animation.KeyframeSet: void setEvaluator(android.animation.TypeEvaluator)> -> _SINK_
<android.view.View: void setFastScaleY(float)> -> _SINK_
<android.widget.ScrollView: void setOverScrollMode(int)> -> _SINK_
<android.app.Dialog: void setTitle(int)> -> _SINK_
<android.view.HardwareRenderer: void setupDiskCache(java.io.File)> -> _SINK_
<android.animation.Keyframe$FloatKeyframe: void setValue(java.lang.Object)> -> _SINK_
<android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)> -> _SINK_
<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)> -> _SINK_
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean rightWord(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.widget.ProgressBar: void setMax(int)> -> _SINK_
<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)> -> _SINK_
<com.android.server.am.ProcessRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void setNetworkName(java.lang.String)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)> -> _SINK_
<android.widget.AdapterViewAnimator: void onMeasure(int,int)> -> _SINK_
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _SINK_
<android.widget.ListPopupWindow: void setVerticalOffset(int)> -> _SINK_
<android.view.Window: void setSoftInputMode(int)> -> _SINK_
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)> -> _SINK_
<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)> -> _SINK_
<android.net.wifi.WifiInfo: void setSSID(java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void setSchedulingGroup(int)> -> _SINK_
<android.widget.TextView: void setWidth(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)> -> _SINK_
<com.android.ex.variablespeed.MediaPlayerDataSource: void setAsSourceFor(android.media.MediaPlayer)> -> _SINK_
<android.app.ActivityManagerProxy: void cancelIntentSender(android.content.IIntentSender)> -> _SINK_
<android.widget.Switch: void setChecked(boolean)> -> _SINK_
<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setPattern(java.lang.String)> -> _SINK_
<android.webkit.WebView: void setNetworkAvailable(boolean)> -> _SINK_
<android.animation.Keyframe$ObjectKeyframe: void setValue(java.lang.Object)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setLockScreenDisabled(boolean)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellChecker(java.lang.String,java.lang.String)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)> android.permission.MOUNT_UNMOUNT_FILESYSTEMS -> _SINK_
<android.server.BluetoothA2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.webkit.WebTextView: void setAutoFillable(int)> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: void setTargetDescriptionsResourceId(int)> -> _SINK_
<android.filterfw.core.Filter: void setInputFrame(java.lang.String,android.filterfw.core.Frame)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquired(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setExpandedFormat(boolean)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: boolean onStateChange(int[])> -> _SINK_
<android.app.Activity: void setProgress(int)> -> _SINK_
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)> -> _SINK_
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)> -> _SINK_
<android.widget.RemoteViews: void setViewVisibility(int,int)> -> _SINK_
<android.widget.ListPopupWindow: void setAnimationStyle(int)> -> _SINK_
<android.os.StrictMode$AndroidBlockGuardPolicy: void onCustomSlowCall(java.lang.String)> -> _SINK_
<android.preference.GenericInflater: java.lang.Object inflate(org.xmlpull.v1.XmlPullParser,android.preference.GenericInflater$Parent,boolean)> -> _SINK_
<android.appwidget.AppWidgetHostView: void dispatchRestoreInstanceState(android.util.SparseArray)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: void setCompletionHint(java.lang.CharSequence)> -> _SINK_
<com.android.vcard.VCardProperty: void addParameter(java.lang.String,java.lang.String)> -> _SINK_
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAddress(java.lang.String)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)> -> _SINK_
<android.graphics.Matrix$1: void setRotate(float,float,float)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.widget.TextView: void setTypeface(android.graphics.Typeface)> -> _SINK_
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: boolean processMessage(android.os.Message)> -> _SINK_
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.app.ITransientNotification)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> -> _SINK_
<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)> -> _SINK_
<com.android.internal.util.StateMachine: void setDbg(boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: boolean hasKeys(int[],boolean[])> -> _SINK_
<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.widget.AbsListView: int access$2800(android.widget.AbsListView)> -> _SINK_
<android.view.MotionEvent: void setTainted(boolean)> -> _SINK_
<android.os.PerformanceCollector: android.os.Bundle addIteration(java.lang.String)> -> _SINK_
<android.widget.TextView: void setSingleLine(boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: void access$800(android.widget.AutoCompleteTextView,int)> -> _SINK_
<android.view.ViewGroup: void dispatchDisplayHint(int)> -> _SINK_
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)> -> _SINK_
<android.graphics.Paint: void set(android.graphics.Paint)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int finalizeSecureContainer(java.lang.String)> -> _SINK_
<android.graphics.Matrix: void setSinCos(float,float)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int)> -> _SINK_
<android.view.SurfaceView: void setZOrderOnTop(boolean)> -> _SINK_
<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])> -> _SINK_
<android.database.BulkCursorProxy: int requery(android.database.IContentObserver)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void waitForWindowDrawn(android.os.IBinder,android.os.IRemoteCallback)> -> _SINK_
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(android.animation.Animator)> -> _SINK_
<android.app.ActivityManagerProxy: boolean killPids(int[],java.lang.String,boolean)> -> _SINK_
<com.android.internal.view.WindowManagerPolicyThread: void set(java.lang.Thread,android.os.Looper)> -> _SINK_
<android.preference.PreferenceFragment: void addPreferencesFromIntent(android.content.Intent)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteScreenBrightness(int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled(boolean)> -> _SINK_
<com.android.internal.widget.ActionBarView: void onMeasure(int,int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int)> -> _SINK_
<android.widget.TextView: int access$700(android.widget.TextView,boolean)> -> _SINK_
<android.app.Dialog: void openContextMenu(android.view.View)> -> _SINK_
<android.os.ResultReceiver: void send(int,android.os.Bundle)> -> _SINK_
<android.app.FragmentManagerState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> -> _SINK_
<android.view.SurfaceView$4: void setType(int)> -> _SINK_
<android.opengl.Matrix: void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)> -> _SINK_
<android.widget.Spinner$DialogPopup: void setPromptText(java.lang.CharSequence)> -> _SINK_
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)> -> _SINK_
<android.preference.Preference: void setKey(java.lang.String)> -> _SINK_
<android.util.TypedValue: void setTo(android.util.TypedValue)> -> _SINK_
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)> -> _SINK_
<android.view.ViewGroup: void setClipToPadding(boolean)> -> _SINK_
<android.location.ICountryDetector$Stub$Proxy: void removeCountryListener(android.location.ICountryListener)> -> _SINK_
<android.widget.ListPopupWindow: void setListItemExpandMax(int)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> -> _SINK_
<android.app.Activity: void setDefaultKeyMode(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void setPassphrase(java.lang.String)> -> _SINK_
<android.ddm.DdmHandleHello: void sendWAIT(int)> -> _SINK_
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)> -> _SINK_
<android.widget.PopupWindow: void setClipToScreenEnabled(boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> -> _SINK_
<android.view.Window: void setGravity(int)> -> _SINK_
<android.text.PackedIntVector: void insertAt(int,int[])> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setCurrentClientId(int,android.app.PendingIntent,boolean)> -> _SINK_
<android.view.GLES20Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)> -> _SINK_
<android.net.NetworkUtils: boolean addressTypeMatches(java.net.InetAddress,java.net.InetAddress)> -> _SINK_
<com.android.server.LocationManagerService: boolean sendNiResponse(int,int)> -> _SINK_
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)> -> _SINK_
<com.android.internal.policy.impl.LockPatternKeyguardView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<android.app.Instrumentation: void sendStringSync(java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)> -> _SINK_
<com.android.server.EventLogTags: void writePowerSleepRequested(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> -> _SINK_
<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void requestPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SINK_
<com.android.server.wm.ViewServer: boolean access$000(java.net.Socket,java.lang.String)> -> _SINK_
<android.view.GLES20RecordingCanvas: void setPooled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)> -> _SINK_
<android.graphics.Path: void set(android.graphics.Path)> -> _SINK_
<android.app.ActivityManagerProxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsAltitude(double)> -> _SINK_
<com.android.server.location.LocationProviderProxy: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.content.Intent: void setSourceBounds(android.graphics.Rect)> -> _SINK_
<android.view.GLES20Canvas: void drawTextRun(char[],int,int,int,int,float,float,int,android.graphics.Paint)> -> _SINK_
<android.widget.CompoundButton: void onRestoreInstanceState(android.os.Parcelable)> -> _SINK_
<android.util.ReflectiveProperty: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.os.storage.StorageVolume: void setStorageId(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int close(int)> -> _SINK_
<android.webkit.Plugin: void setPath(java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean)> -> _SINK_
<android.webkit.WebSettings: void setForceUserScalable(boolean)> -> _SINK_
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)> -> _SINK_
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)> -> _SINK_
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.view.HardwareRenderer$GlRenderer: void setup(int,int)> -> _SINK_
<com.android.server.location.GpsLocationProvider: void updateLocation(android.location.Location)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setClearColor(float,float,float)> -> _SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: com.android.server.usb.UsbSettingsManager$AccessoryFilter read(org.xmlpull.v1.XmlPullParser)> -> _SINK_
<android.location.Location: void setLongitude(double)> -> _SINK_
<android.server.BluetoothAdapterProperties: void setProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void disableIpv6(java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void setCoreSettings(android.os.Bundle)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setUserRotationMode(int,int)> -> _SINK_
<android.widget.ImageView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)> -> _SINK_
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)> -> _SINK_
<android.media.AudioService: void setStreamMute(int,boolean,android.os.IBinder)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsLatitude(double)> -> _SINK_
<android.webkit.WebTextView: void setGravityForRtl(boolean)> -> _SINK_
<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setState(int[])> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void removeAppToken(android.os.IBinder)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: android.view.View addStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int)> -> _SINK_
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void setLockPatternEnabled(boolean)> -> _SINK_
<android.webkit.CookieManager: void setCookie(android.net.WebAddress,java.lang.String)> -> _SINK_
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setShape(android.graphics.drawable.shapes.Shape)> -> _SINK_
<android.view.View: void setFastTranslationX(float)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: void setNinePatchChunk(byte[])> -> _SINK_
<android.filterfw.core.OutputPort: void setFrame(android.filterfw.core.Frame)> -> _SINK_
<android.app.ActivityManagerProxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int)> -> _SINK_
<android.webkit.WebView: void setBaseLayer(int,android.graphics.Region,boolean,boolean,boolean)> -> _SINK_
<android.preference.PreferenceManager: boolean setPreferences(android.preference.PreferenceScreen)> -> _SINK_
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> -> _SINK_
<android.content.IntentFilter$AuthorityEntry: int access$100(android.content.IntentFilter$AuthorityEntry)> -> _SINK_
<android.database.ContentObserver: void dispatchChange(boolean)> -> _SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)> -> _SINK_
<android.widget.TextView: void setPaintFlags(int)> -> _SINK_
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> -> _SINK_
<android.widget.ListView: void setSelection(int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> -> _SINK_
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.os.Registrant: void notifyException(java.lang.Throwable)> -> _SINK_
<android.graphics.drawable.DrawableContainer: void setDither(boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setText(java.lang.CharSequence)> -> _SINK_
<android.widget.ListPopupWindow: void setPromptPosition(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])> -> _SINK_
<com.android.server.PowerManagerService: void setAttentionLight(boolean,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setPerformAccessibilityActionResult(boolean,int)> -> _SINK_
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setPlaybackState(int,int,long)> -> _SINK_
<android.webkit.WebView: void setJsFlags(java.lang.String)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setTarget(int)> -> _SINK_
<android.os.ServiceManagerProxy: android.os.IBinder checkService(java.lang.String)> -> _SINK_
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub$Proxy: java.lang.String copyResourceToContainer(android.net.Uri,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.view.IInputConnectionWrapper: void sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.net.Uri$AbstractHierarchicalUri: int compareTo(java.lang.Object)> -> _SINK_
<android.media.RemoteControlClient: void setTransportControlFlags(int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> -> _SINK_
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> -> _SINK_
<android.webkit.WebSettings: void setNavDump(boolean)> -> _SINK_
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> -> _SINK_
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: void setText(java.lang.CharSequence,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.filterfw.core.NativeFrame: void setInts(int[])> -> _SINK_
<com.android.server.sip.SipSessionGroup: void setWakeupTimer(com.android.server.sip.SipWakeupTimer)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])> -> _SINK_
<android.os.Debug: void startMethodTracingDdms(int,int)> -> _SINK_
<android.widget.GridView: void setSelectionInt(int)> -> _SINK_
<android.view.ViewRootImpl: void setDragFocus(android.view.View)> -> _SINK_
<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)> -> _SINK_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean disableNetwork(int,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)> -> _SINK_
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)> -> _SINK_
<android.graphics.drawable.ClipDrawable: void onBoundsChange(android.graphics.Rect)> -> _SINK_
<android.util.SparseBooleanArray: void append(int,boolean)> -> _SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setStorageEncryption(android.content.ComponentName,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void setOwner(android.net.wifi.p2p.WifiP2pDevice)> -> _SINK_
<android.widget.PopupWindow: void setWidth(int)> -> _SINK_
<android.text.MeasuredText: void setPara(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)> -> _SINK_
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> -> _SINK_
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)> -> _SINK_
<android.widget.AbsListView: int access$1100(android.widget.AbsListView)> -> _SINK_
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])> -> _SINK_
<android.webkit.WebView: boolean setFrame(int,int,int,int)> -> _SINK_
<android.view.MotionEvent: void setLocation(float,float)> -> _SINK_
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)> -> _SINK_
<android.widget.OverScroller: void startScroll(int,int,int,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppVisibility(android.os.IBinder,boolean)> -> _SINK_
<com.android.server.WifiService$LockList: int access$2700(com.android.server.WifiService$LockList)> -> _SINK_
<android.provider.SyncStateContract$Helpers: void update(android.content.ContentProviderClient,android.net.Uri,byte[])> -> _SINK_
<com.android.server.wm.InputFilter: void sendInputEvent(android.view.InputEvent,int)> -> _SINK_
<android.media.AudioService$SoundPoolCallback: void setLastSample(int)> -> _SINK_
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)> -> _SINK_
<com.android.server.AlarmManagerService: void setInexactRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendOptions(android.net.sip.SipProfile,android.net.sip.SipProfile,java.lang.String)> -> _SINK_
<android.location.Location: void setAccuracy(float)> -> _SINK_
<android.server.BluetoothService: void writeIncomingConnectionState(java.lang.String,android.util.Pair)> -> _SINK_
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)> -> _SINK_
<android.media.AudioService$VolumeStreamState: int access$700(android.media.AudioService$VolumeStreamState,int)> -> _SINK_
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)> -> _SINK_
<android.view.ViewGroup: void onChildVisibilityChanged(android.view.View,int)> -> _SINK_
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)> -> _SINK_
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setNumericShortcut(char)> -> _SINK_
<android.preference.PreferenceGroup: void setEnabled(boolean)> -> _SINK_
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setGenericObjectValue(java.lang.Object)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteScanWifiLockReleased(int)> -> _SINK_
<android.media.MediaRecorder: void setAudioSamplingRate(int)> -> _SINK_
<android.os.WorkSource: boolean add(android.os.WorkSource)> -> _SINK_
<android.webkit.ZoomManager: void setZoomCenter(float,float)> -> _SINK_
<android.view.View: void setVisibility(int)> -> _SINK_
<com.android.internal.widget.LockPatternView: void setInStealthMode(boolean)> -> _SINK_
<android.app.LoaderManagerImpl: void installLoader(android.app.LoaderManagerImpl$LoaderInfo)> -> _SINK_
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> -> _SINK_
<android.app.ActivityManagerProxy: void backupAgentCreated(java.lang.String,android.os.IBinder)> -> _SINK_
<com.android.server.wm.BlackFrame$BlackSurface: void setMatrix(android.graphics.Matrix)> -> _SINK_
<android.graphics.Matrix$1: void setSkew(float,float,float,float)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setEmbeddedTabView(com.android.internal.widget.ScrollingTabContainerView)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeToParcelWithoutUids(android.os.Parcel,int)> -> _SINK_
<android.content.Intent: void setSelector(android.content.Intent)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void sendFinished(android.app.IActivityManager)> -> _SINK_
<com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setGenericObjectValue(java.lang.Object)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)> -> _SINK_
<android.webkit.WebSettings: void setAutoFillEnabled(boolean)> -> _SINK_
<android.content.pm.IPackageDataObserver$Stub$Proxy: void onRemoveCompleted(java.lang.String,boolean)> -> _SINK_
<android.webkit.CallbackProxy$ResultTransport: void setResult(java.lang.Object)> -> _SINK_
<android.app.ActivityManagerProxy: void showWaitingForDebugger(android.app.IApplicationThread,boolean)> -> _SINK_
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(android.os.Message,long)> -> _SINK_
<android.widget.ListView$FocusSelector: android.widget.ListView$FocusSelector setup(int,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> -> _SINK_
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> -> _SINK_
<android.content.SyncAdaptersCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.view.View: void setFastTranslationY(float)> -> _SINK_
<android.widget.LinearLayout: void setShowDividers(int)> -> _SINK_
<android.filterfw.io.GraphReader: void addReference(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int)> -> _SINK_
<com.android.server.location.CountryDetectorBase: void notifyListener(android.location.Country)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)> -> _SINK_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void access$3000(com.android.server.sip.SipSessionGroup$SipSessionImpl,int)> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int addChild(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SINK_
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setSystemUiVisibility(int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.net.DummyDataStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.LoadedApk$ReceiverDispatcher: void setUnregisterLocation(java.lang.RuntimeException)> -> _SINK_
<android.view.ViewGroup: boolean dispatchConsistencyCheck(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SINK_
<android.filterfw.core.Filter: void delayNextProcess(int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void goToSleep(long)> -> _SINK_
<android.app.UiModeManager: void setNightMode(int)> -> _SINK_
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setCurrentClientId(int,android.app.PendingIntent,boolean)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setIcon(int)> -> _SINK_
<android.filterfw.core.GLFrame: void setTextureParameter(int,int)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setBounds(int,int,int,int)> -> _SINK_
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: boolean setFrame(int,int,int,int)> -> _SINK_
<com.android.internal.os.IResultReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelNotification(java.lang.String,int)> -> _SINK_
<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)> android.permission.WAKE_LOCK -> _SINK_
<android.filterfw.core.Frame: void setReusable(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper: void setAnchorView(android.view.View)> -> _SINK_
<android.widget.PopupWindow: void setAllowScrollingAnchorParent(boolean)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setSelectedText(java.lang.CharSequence,int)> -> _SINK_
<android.text.style.URLSpan: void onClick(android.view.View)> -> _SINK_
<android.filterfw.core.FilterPort: void setChecksType(boolean)> -> _SINK_
<com.android.server.am.BroadcastRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.widget.ExpandableListView: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.app.ActivityManagerProxy: void killApplicationWithUid(java.lang.String,int)> -> _SINK_
<android.os.Parcel: void writeCharSequenceArray(java.lang.CharSequence[])> -> _SINK_
<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)> -> _SINK_
<android.app.Fragment: void setRetainInstance(boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientExited(android.view.IWindow)> -> _SINK_
<android.os.Message: void setData(android.os.Bundle)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void attachToken(android.os.IBinder)> -> _SINK_
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)> -> _SINK_
<android.media.AudioManager: void setMicrophoneMute(boolean)> -> _SINK_
<android.content.ContextWrapper: void setTheme(int)> -> _SINK_
<android.graphics.Point: void set(int,int)> -> _SINK_
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)> -> _SINK_
<android.app.Service: void startForeground(int,android.app.Notification)> -> _SINK_
<android.app.Fragment: void startActivity(android.content.Intent)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitle(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAppGroupId(android.os.IBinder,int)> -> _SINK_
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: void onServiceConnected(android.os.IBinder)> -> _SINK_
<com.android.server.am.ActivityRecord: void setSleeping(boolean)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: void parseOne(java.io.InputStream)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownAnimationStyle(int)> -> _SINK_
<android.opengl.Matrix: void rotateM(float[],int,float,float,float,float)> -> _SINK_
<android.graphics.RectF: void set(android.graphics.RectF)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setPadding(int,int,int,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setFocusedApp(android.os.IBinder,boolean)> -> _SINK_
<android.widget.ImageView: void setMaxWidth(int)> -> _SINK_
<android.app.ApplicationThreadProxy: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.widget.AdapterViewAnimator: void setOutAnimation(android.content.Context,int)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)> -> _SINK_
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<com.android.server.AppWidgetService: void readStateFromFileLocked(java.io.FileInputStream)> -> _SINK_
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<android.net.wifi.WifiConfigStore: void setIpConfiguration(int,android.net.DhcpInfoInternal)> -> _SINK_
<android.graphics.Canvas: void setViewport(int,int)> -> _SINK_
<com.android.server.AlarmManagerService: void set(int,long,android.app.PendingIntent)> -> _SINK_
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)> -> _SINK_
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)> -> _SINK_
<android.view.inputmethod.InputMethodManager$1: void setActive(boolean)> -> _SINK_
<android.view.ViewGroup: void updateLocalSystemUiVisibility(int,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int)> -> _SINK_
<android.view.animation.Animation: void setRepeatCount(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)> -> _SINK_
<com.android.server.wm.Session: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.ddm.DdmHandleAppName: void setAppName(java.lang.String)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void userActivity(long,boolean)> -> _SINK_
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean)> -> _SINK_
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)> -> _SINK_
<com.android.internal.util.XmlUtils: void writeMapXml(java.util.Map,java.lang.String,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.view.Surface: void setOrientation(int,int)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)> -> _SINK_
<android.app.FragmentManagerImpl: void moveToState(android.app.Fragment,int,int,int)> -> _SINK_
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.filterfw.core.Filter: void initWithAssignmentList(java.lang.Object[])> -> _SINK_
<android.widget.LinearLayout: void setBaselineAligned(boolean)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: int measureChildView(android.view.View,int,int,int)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> -> _SINK_
<android.widget.ImageView: void setAlpha(int)> -> _SINK_
<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)> -> _SINK_
<android.preference.Preference: boolean persistBoolean(boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setSize(int,int)> -> _SINK_
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)> -> _SINK_
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])> -> _SINK_
<android.view.View$6: void setValue(java.lang.Object,float)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)> -> _SINK_
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)> -> _SINK_
<com.android.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.WindowOrientationListener: void setCurrentRotation(int)> -> _SINK_
<android.view.View: void setScrollbarFadingEnabled(boolean)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.widget.RelativeLayout$DependencyGraph: void add(android.view.View)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbShortTitle(int)> -> _SINK_
<android.widget.TextView: void setTextIsSelectable(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void setDebugApp(java.lang.String,boolean,boolean)> -> _SINK_
<android.os.FileUtils: boolean copyFile(java.io.File,java.io.File)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setInTouchMode(boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performHapticFeedback(android.view.IWindow,int,boolean)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewBase$1: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.widget.CheckedTextView: void setChecked(boolean)> -> _SINK_
<android.webkit.WebView: void setWebBackForwardListClient(android.webkit.WebBackForwardListClient)> -> _SINK_
<android.widget.ExpandableListView: void setAdapter(android.widget.Adapter)> -> _SINK_
<com.android.i18n.phonenumbers.PhoneNumberUtil: int maybeExtractCountryCode(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> -> _SINK_
<android.graphics.Matrix$1: void setTranslate(float,float)> -> _SINK_
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.ScrollBarDrawable: void setAlwaysDrawHorizontalTrack(boolean)> -> _SINK_
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)> -> _SINK_
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)> -> _SINK_
<android.widget.ListView: void setSelectionFromTop(int,int)> -> _SINK_
<android.view.View: void setDrawingCacheEnabled(boolean)> -> _SINK_
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void registerProcessObserver(android.app.IProcessObserver)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void tetherInterface(java.lang.String)> -> _SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,long)> -> _SINK_
<android.inputmethodservice.Keyboard: void setKeyHeight(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int unmountSecureContainer(java.lang.String,boolean)> -> _SINK_
<android.location.LocationManager: boolean sendNiResponse(int,int)> -> _SINK_
<android.view.View: void setFastAlpha(float)> -> _SINK_
<android.media.AudioManager: void setStreamMute(int,boolean)> -> _SINK_
<android.media.effect.effects.BackDropperEffect: void setUpdateListener(android.media.effect.EffectUpdateListener)> -> _SINK_
<android.widget.TextView$ChangeWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _SINK_
<android.view.SurfaceView: void setWindowType(int)> -> _SINK_
<android.media.AudioService$VolumeStreamState: boolean setIndex(int,boolean)> -> _SINK_
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)> -> _SINK_
<android.database.DatabaseUtils: java.lang.String dumpCursorToString(android.database.Cursor)> -> _SINK_
<android.view.GLES20RecordingCanvas: void setNextPoolable(java.lang.Object)> -> _SINK_
<android.location.LocationManager$GpsStatusListenerTransport: void onSvStatusChanged(int,int[],float[],float[],float[],int,int,int)> -> _SINK_
<com.android.server.wm.Session: void setInTouchMode(boolean)> -> _SINK_
<android.webkit.FindActionModeCallback: void setText(java.lang.String)> -> _SINK_
<com.android.server.connectivity.Tethering: int setUsbTethering(boolean)> -> _SINK_
<android.app.SearchManager: void setOnCancelListener(android.app.SearchManager$OnCancelListener)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: void onMeasure(int,int)> -> _SINK_
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.server.sip.SipHelper: void sendReferNotify(javax.sip.Dialog,java.lang.String)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.graphics.Canvas)> -> _SINK_
<com.android.internal.util.HexDump: java.lang.String dumpHexString(byte[])> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setMetadata(int,android.os.Bundle)> -> _SINK_
<android.app.BackStackState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.Activity: void setProgressBarIndeterminate(boolean)> -> _SINK_
<android.content.ContentProviderProxy: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView: void setContentHeight(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String nextPackageToClean(java.lang.String)> -> _SINK_
<android.view.textservice.TextServicesManager: void setCurrentSpellChecker(android.view.textservice.SpellCheckerInfo)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchAppVisibility(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setGlobalAlert(long)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessage(int)> -> _SINK_
<com.android.internal.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.animation.Transformation: void setTransformationType(int)> -> _SINK_
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)> -> _SINK_
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setRotationLw(int)> -> _SINK_
<com.android.internal.widget.ActionBarView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setEnabled(boolean)> -> _SINK_
<android.widget.RemoteViews: void setDrawableParameters(int,boolean,int,int,android.graphics.PorterDuff$Mode,int)> -> _SINK_
<android.webkit.Network: boolean saveState(android.os.Bundle)> -> _SINK_
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)> -> _SINK_
<android.filterfw.core.FieldPort: void setFrame(android.filterfw.core.Frame)> -> _SINK_
<com.android.server.location.LocationProviderProxy: void setMinTime(long,android.os.WorkSource)> -> _SINK_
<android.preference.GenericInflater: android.preference.GenericInflater$Parent onMergeRoots(android.preference.GenericInflater$Parent,boolean,android.preference.GenericInflater$Parent)> -> _SINK_
<android.net.rtp.AudioGroup: void sendDtmf(int)> -> _SINK_
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)> -> _SINK_
<android.app.ActivityManagerProxy: void activitySlept(android.os.IBinder)> -> _SINK_
<android.widget.ListPopupWindow: void setSoftInputMode(int)> -> _SINK_
<android.view.View: void setSaveFromParentEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel,int)> -> _SINK_
<com.android.server.AppWidgetService: void updateProvidersForPackageLocked(java.lang.String)> -> _SINK_
<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.TextView: void setMinLines(int)> -> _SINK_
<android.view.GLES20Canvas: void drawCircle(float,float,float,android.graphics.Paint)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)> -> _SINK_
<android.app.ActivityManagerProxy: boolean profileControl(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> -> _SINK_
<android.animation.ValueAnimator: void setFloatValues(float[])> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setCursorPosition_internal(int,int)> -> _SINK_
<android.animation.AnimatorSet: void setTarget(java.lang.Object)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void setSchedulingGroup(int)> -> _SINK_
<android.app.ActivityManagerProxy: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setPossibleNumberPattern(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setHardKeyboardEnabled(boolean)> -> _SINK_
<android.view.ViewGroup: void addTouchables(java.util.ArrayList)> -> _SINK_
<android.net.MobileDataStateTracker: void setTeardownRequested(boolean)> -> _SINK_
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.graphics.Canvas: void setDensity(int)> -> _SINK_
<android.app.AlarmManager: void setTime(long)> -> _SINK_
<android.app.ActivityManagerProxy: void setRequestedOrientation(android.os.IBinder,int)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setBaseType(int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openDevice(java.lang.String)> -> _SINK_
<android.os.StrictMode$ViolationInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setLogo(android.graphics.drawable.Drawable)> -> _SINK_
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)> -> _SINK_
<android.os.Parcel: void writeByteArray(byte[])> -> _SINK_
<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)> -> _SINK_
<android.net.http.Request: void setConnection(android.net.http.Connection)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int)> -> _SINK_
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> android.permission.RECORD_AUDIO -> _SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.Handler: boolean sendEmptyMessage(int)> -> _SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)> -> _SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])> -> _SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)> -> _SINK_
<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean)> -> _SINK_
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: void readExternal(java.io.ObjectInput)> -> _SINK_
<android.app.ApplicationErrorReport$CrashInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.logging.AndroidHandler$1: java.lang.String format(java.util.logging.LogRecord)> -> _SINK_
<com.android.internal.widget.TransportControlView: void setCallback(com.android.internal.widget.LockScreenWidgetCallback)> -> _SINK_
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.app.ReceiverRestrictedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setOnHardKeyboardStatusChangeListener(com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener)> -> _SINK_
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.view.HardwareRenderer$GlRenderer: void updateSurface(android.view.SurfaceHolder)> -> _SINK_
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setConnectionId(int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,float[],int)> -> _SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)> -> _SINK_
<android.widget.TextView: void setText(int)> -> _SINK_
<android.text.method.BaseKeyListener: int makeTextContentType(android.text.method.TextKeyListener$Capitalize,boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)> -> _SINK_
<android.webkit.CacheManager$CacheResult: void setInputStream(java.io.InputStream)> -> _SINK_
<android.os.Debug: void setFieldsOn(java.lang.Class,boolean)> -> _SINK_
<android.widget.TextView: void setHorizontallyScrolling(boolean)> -> _SINK_
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void addSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<android.webkit.WebView: void setBackgroundColor(int)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.Reader)> -> _SINK_
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)> -> _SINK_
<android.widget.TextView: void setCursorPosition_internal(int,int)> -> _SINK_
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void setBaseLayer(int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setSourceRegion(android.filterfw.geometry.Quad)> -> _SINK_
<com.android.internal.util.AsyncChannel$SyncMessenger: android.os.Message access$100(android.os.Messenger,android.os.Message)> -> _SINK_
<com.android.server.PowerManagerService: void setPolicy(android.view.WindowManagerPolicy)> -> _SINK_
<android.widget.TextView: void setExtracting(android.view.inputmethod.ExtractedTextRequest)> -> _SINK_
<android.widget.AbsSpinner: void onMeasure(int,int)> -> _SINK_
<android.view.View: void setOverScrollMode(int)> -> _SINK_
<android.view.FocusFinder$SequentialFocusComparator: void setRoot(android.view.ViewGroup)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> -> _SINK_
<android.net.DummyDataStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)> -> _SINK_
<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int)> -> _SINK_
<android.view.ViewGroup: boolean fitSystemWindows(android.graphics.Rect)> -> _SINK_
<android.widget.AbsListView: void setOverScrollMode(int)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivities(android.app.IApplicationThread,android.content.Intent[],java.lang.String[],android.os.IBinder)> -> _SINK_
<android.webkit.WebViewDatabase: void addCookie(android.webkit.CookieManager$Cookie)> -> _SINK_
<com.android.server.Watchdog: long computeCalendarTime(java.util.Calendar,long,long)> -> _SINK_
<android.view.ViewRootImpl: void setLayoutParams(android.view.WindowManager$LayoutParams,boolean)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setFilterBitmap(boolean)> -> _SINK_
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SINK_
<android.widget.AbsListView: void setTextFilterEnabled(boolean)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void startAnimation(android.view.animation.Animation,android.view.animation.Animation)> -> _SINK_
<android.content.Intent: boolean filterEquals(android.content.Intent)> -> _SINK_
<android.content.pm.PackageParser$Package: void setPackageName(java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setCustomView(android.view.View)> -> _SINK_
<android.widget.RemoteViews$SetPendingIntentTemplate$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport(java.lang.String)> -> _SINK_
<com.android.internal.widget.WaveView: void setOnTriggerListener(com.android.internal.widget.WaveView$OnTriggerListener)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.view.View: void onMeasure(int,int)> -> _SINK_
<android.view.Window: void setDefaultWindowFormat(int)> -> _SINK_
<android.net.wifi.WifiConfigStore: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)> -> _SINK_
<android.preference.Preference: void setDependency(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.util.DisplayMetrics)> -> _SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiManager: void connectNetwork(int)> -> _SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,int)> -> _SINK_
<android.widget.AbsListView$3: boolean sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void restorePresenterStates(android.os.Bundle)> -> _SINK_
<android.app.Activity: void setContentView(int)> -> _SINK_
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)> -> _SINK_
<android.view.View: void setFocusableInTouchMode(boolean)> -> _SINK_
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.NotificationManagerService$NotificationRecord: void dump(java.io.PrintWriter,java.lang.String,android.content.Context)> -> _SINK_
<com.android.ex.variablespeed.VariableSpeed: void setVariableSpeed(float)> -> _SINK_
<android.widget.OverScroller: void setFinalX(int)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.webkit.Plugin: void setName(java.lang.String)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onStart(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceAlert(java.lang.String,long)> -> _SINK_
<android.view.ViewRootImpl$3: void setFixedSize(int,int)> -> _SINK_
<android.text.Selection: void selectAll(android.text.Spannable)> -> _SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateMeasureState(android.text.TextPaint)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.webkit.WebView: void setOverScrollMode(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void closeSystemDialogs(java.lang.String)> -> _SINK_
<android.widget.EditText: void setEllipsize(android.text.TextUtils$TruncateAt)> -> _SINK_
<android.app.IUiModeManager$Stub$Proxy: void setNightMode(int)> -> _SINK_
<android.view.Window: void setLayout(int,int)> -> _SINK_
<android.webkit.FrameLoader: void setPostData(byte[])> -> _SINK_
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setChecked(boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityManagerClient$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.RelativeLayout$DependencyGraph$Node: void setNextPoolable(android.widget.RelativeLayout$DependencyGraph$Node)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void addAppToken(int,android.view.IApplicationToken,int,int,boolean)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteNetworkInterfaceType(java.lang.String,int)> -> _SINK_
<com.android.server.am.IntentBindRecord: void dumpInService(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixTransformRule(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,boolean)> -> _SINK_
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)> -> _SINK_
<android.widget.HorizontalScrollView: void setSmoothScrollingEnabled(boolean)> -> _SINK_
<android.view.GLES20Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSharedCost(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.server.BluetoothBondState: void addAutoPairingFailure(java.lang.String)> -> _SINK_
<android.widget.RemoteViews$SetOnClickFillInIntent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.Paint: void setShadowLayer(float,float,float,int)> -> _SINK_
<android.graphics.drawable.RotateDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void writeToParcel(android.os.Parcel,long)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> -> _SINK_
<com.android.server.sip.SipHelper: void sendInviteBusyHere(javax.sip.RequestEvent,javax.sip.ServerTransaction)> -> _SINK_
<com.android.internal.widget.LockPatternView$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.TextView$ChangeWatcher: void afterTextChanged(android.text.Editable)> -> _SINK_
<android.view.View$11: void setValue(android.view.View,float)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsScanEnd(long)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int playAudio(java.lang.String,android.net.Uri,int,android.os.Bundle)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setWindowCallback(android.view.Window$Callback)> -> _SINK_
<android.opengl.Matrix: void setIdentityM(float[],int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteScanWifiLockAcquired(int)> -> _SINK_
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)> -> _SINK_
<android.text.util.Linkify: boolean addLinks(android.widget.TextView,int)> -> _SINK_
<android.graphics.Paint: void setCompatibilityScaling(float)> -> _SINK_
<android.webkit.SslCertLookupTable: void setIsAllowed(android.net.http.SslError)> -> _SINK_
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> -> _SINK_
<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)> -> _SINK_
<android.filterfw.core.VertexFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<android.os.Bundle: boolean setAllowFds(boolean)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.filterfw.core.VertexFrame: void setDataFromFrame(android.filterfw.core.Frame)> -> _SINK_
<android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.internal.widget.WaveView: boolean onHoverEvent(android.view.MotionEvent)> -> _SINK_
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)> -> _SINK_
<android.net.wifi.WifiInfo: void setLinkSpeed(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void untetherInterface(java.lang.String)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void bindAppWidgetId(int,android.content.ComponentName)> -> _SINK_
<android.content.ContentProviderProxy: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setAttentionLight(boolean,int)> android.permission.DEVICE_POWER -> _SINK_
<android.widget.AbsSeekBar: void onProgressRefresh(float,boolean)> -> _SINK_
<android.widget.AbsListView: boolean showContextMenu(float,float,int)> -> _SINK_
<com.android.server.StatusBarManagerService: void setHardKeyboardEnabled(boolean)> -> _SINK_
<android.widget.TextView$InsertionHandleView: void updateSelection(int)> -> _SINK_
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboard$LatinKey: void setEnabled(boolean)> -> _SINK_
<android.net.rtp.AudioGroup: void add(android.net.rtp.AudioStream,android.net.rtp.AudioCodec,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher)> -> _SINK_
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)> -> _SINK_
<com.android.server.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setPowerRequirement(int)> -> _SINK_
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.graphics.Region: boolean set(int,int,int,int)> -> _SINK_
<android.webkit.HTML5VideoViewProxy: void onPrepared(android.media.MediaPlayer)> -> _SINK_
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.server.IntentResolver: boolean dumpMap(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.lang.String,boolean)> -> _SINK_
<android.webkit.WebView: void setNewPicture(android.webkit.WebViewCore$DrawData,boolean)> -> _SINK_
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)> -> _SINK_
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)> -> _SINK_
<android.graphics.Paint: void setBidiFlags(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsDataScanStart(long)> -> _SINK_
<android.location.Location: void set(android.location.Location)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void setInterface(java.lang.String)> -> _SINK_
<android.view.animation.Animation: void setStartTime(long)> -> _SINK_
<android.net.DummyDataStateTracker: void setTeardownRequested(boolean)> -> _SINK_
<android.os.PerformanceCollector: android.os.Bundle stopTiming(java.lang.String)> -> _SINK_
<android.widget.AutoCompleteTextView: void setOnClickListener(android.view.View$OnClickListener)> -> _SINK_
<android.view.View: void dispatchVisibilityChanged(android.view.View,int)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setTitle(java.lang.CharSequence)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabledLocked(java.lang.String,boolean)> -> _SINK_
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> -> _SINK_
<android.content.Intent: android.content.Intent setPackage(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: boolean setRadios(boolean)> -> _SINK_
<android.preference.PreferenceManager: void setOnPreferenceTreeClickListener(android.preference.PreferenceManager$OnPreferenceTreeClickListener)> -> _SINK_
<com.android.server.AppWidgetService: void sendUpdateIntentLocked(com.android.server.AppWidgetService$Provider,int[])> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleTrimMemory(int)> -> _SINK_
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.ActivityManager: boolean switchUser(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setCheckable(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setPointerSpeed(int)> -> _SINK_
<android.graphics.Matrix: void setSkew(float,float)> -> _SINK_
<android.widget.Scroller: void setFinalY(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> -> _SINK_
<android.widget.AdapterViewAnimator: void setDisplayedChild(int)> -> _SINK_
<android.location.Criteria: void setBearingAccuracy(int)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetworkWithoutBroadcast(int,boolean)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setRightHintText(int)> -> _SINK_
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,float)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int)> -> _SINK_
<android.os.AsyncTask: void setDefaultExecutor(java.util.concurrent.Executor)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setHasMonetaryCost(boolean)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int speak(java.lang.String,java.lang.String,int,android.os.Bundle)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setIcon(int)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void stopListening(int)> -> _SINK_
<android.widget.ScrollBarDrawable: void setAlwaysDrawVerticalTrack(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)> -> _SINK_
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)> -> _SINK_
<android.content.ContentProviderNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.content.BroadcastReceiver: void setResultData(java.lang.String)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setOpacity(int)> -> _SINK_
<android.media.MediaFile: void addFileType(java.lang.String,int,java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setGradientType(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setRadioScanningTimeout(long)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setInputFilter(com.android.server.wm.InputFilter)> -> _SINK_
<com.android.server.AppWidgetService: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<android.webkit.WebTextView$BackgroundDrawable: void setAlpha(int)> -> _SINK_
<android.webkit.CallbackProxy: void onFormResubmission(android.os.Message,android.os.Message)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setRequiresNetwork(boolean)> -> _SINK_
<android.location.Address: void setUrl(java.lang.String)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList$1: android.net.wifi.p2p.WifiP2pDeviceList createFromParcel(android.os.Parcel)> -> _SINK_
<android.view.VelocityTracker: void setNextPoolable(android.view.VelocityTracker)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void closeSystemDialogs(java.lang.String)> -> _SINK_
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.BROADCAST_STICKY -> _SINK_
<com.android.internal.widget.ActionBarView$HomeView: boolean dispatchHoverEvent(android.view.MotionEvent)> -> _SINK_
<android.webkit.ZoomControlExternal$ExtendedZoomControls: void setOnZoomOutClickListener(android.view.View$OnClickListener)> -> _SINK_
<android.view.View: void setAnimation(android.view.animation.Animation)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneState(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumTimeToLock(android.content.ComponentName,long)> -> _SINK_
<android.os.Parcel: void writeBinderList(java.util.List)> -> _SINK_
<android.app.ActivityManagerProxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SINK_
<android.view.View: void setDrawingCacheBackgroundColor(int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setVertexCount(int)> -> _SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void setExpandedActionViewsExclusive(boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.view.InputChannel monitorInput(java.lang.String)> -> _SINK_
<android.filterfw.core.Frame: android.graphics.Bitmap convertBitmapToRGBA(android.graphics.Bitmap)> -> _SINK_
<android.app.ActivityManagerProxy: boolean shutdown(int)> -> _SINK_
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)> -> _SINK_
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)> -> _SINK_
<android.view.Window: boolean hasFeature(int)> -> _SINK_
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)> -> _SINK_
<android.hardware.Camera$Parameters: void setRecordingHint(boolean)> -> _SINK_
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> -> _SINK_
<android.widget.TextView: void setSelectAllOnFocus(boolean)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderView(android.view.View)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.media.AudioSystem: void setErrorCallback(android.media.AudioSystem$ErrorCallback)> -> _SINK_
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)> -> _SINK_
<android.os.FileObserver$ObserverThread: int startWatching(java.lang.String,int,android.os.FileObserver)> -> _SINK_
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<android.view.ViewGroup: void setPersistentDrawingCache(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)> -> _SINK_
<com.android.server.PowerManagerService: void setButtonBrightnessOverride(int)> -> _SINK_
<android.view.ViewDebug: void dispatchCommand(android.view.View,java.lang.String,java.lang.String,java.io.OutputStream)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIconVisibility(java.lang.String,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> -> _SINK_
<android.widget.AbsSeekBar: void onSizeChanged(int,int,int,int)> -> _SINK_
<android.graphics.drawable.ClipDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setShowHideAnimationEnabled(boolean)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setTabBackgroundResource(int)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onDone(java.lang.String)> -> _SINK_
<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)> -> _SINK_
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)> -> _SINK_
<android.widget.ZoomControls: void setIsZoomInEnabled(boolean)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setX(float)> -> _SINK_
<android.app.ProgressDialog: void setIndeterminate(boolean)> -> _SINK_
<android.appwidget.AppWidgetHostView: void prepareView(android.view.View)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendRegister(android.net.sip.SipProfile,java.lang.String,int)> -> _SINK_
<android.text.Selection: void setSelection(android.text.Spannable,int,int)> -> _SINK_
<android.location.Criteria: void setPowerRequirement(int)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: boolean outOfMemory(android.view.IWindow)> -> _SINK_
<android.widget.AdapterView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.app.Instrumentation: void execStartActivities(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[])> -> _SINK_
<android.widget.PopupWindow$PopupViewContainer: void sendAccessibilityEvent(int)> -> _SINK_
<android.media.effect.effects.BackDropperEffect: void setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setPreviewEnabled(boolean)> -> _SINK_
<android.app.DownloadManager: void setAccessAllDownloads(boolean)> -> _SINK_
<android.app.ApplicationThreadProxy: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.util.List,android.content.ComponentName,java.lang.String,android.os.ParcelFileDescriptor,boolean,android.os.Bundle,android.app.IInstrumentationWatcher,int,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle)> -> _SINK_
<com.android.server.ConnectivityService: void updateNetworkSettings(android.net.NetworkStateTracker)> -> _SINK_
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.IntentFilter: void setPriority(int)> -> _SINK_
<android.app.ActivityThread: void sendActivityResult(android.os.IBinder,java.lang.String,int,int,android.content.Intent)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)> -> _SINK_
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)> -> _SINK_
<android.os.Debug: void setFieldsOn(java.lang.Class)> -> _SINK_
<android.app.ActivityManagerProxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> -> _SINK_
<com.android.server.am.ActivityStack: android.content.pm.ActivityInfo resolveActivity(android.content.Intent,java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScales(float[])> -> _SINK_
<android.view.View: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)> -> _SINK_
<android.text.style.QuoteSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)> -> _SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.util.XmlUtils: void writeListXml(java.util.List,java.lang.String,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.app.ActivityManagerProxy: void showBootMessage(java.lang.CharSequence,boolean)> -> _SINK_
<android.widget.AbsoluteLayout: void onMeasure(int,int)> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setKeepScreenOn(boolean)> -> _SINK_
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.util.StateMachine: void setProcessedMessagesSize(int)> -> _SINK_
<android.app.ActivityManager: void setFrontActivityScreenCompatMode(int)> -> _SINK_
<android.widget.PopupWindow: void setLayoutInScreenEnabled(boolean)> -> _SINK_
<android.graphics.drawable.RotateDrawable: void onBoundsChange(android.graphics.Rect)> -> _SINK_
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setConstantSize(boolean)> -> _SINK_
<com.android.internal.widget.DrawableHolder: void setScaleY(float)> -> _SINK_
<android.view.GLES20Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)> -> _SINK_
<com.android.internal.policy.IFaceLockInterface$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.sip.SipHelper: void sendResponse(javax.sip.RequestEvent,int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setDropdownAdapter(android.widget.SpinnerAdapter)> -> _SINK_
<android.animation.ValueAnimator: void setStartDelay(long)> -> _SINK_
<com.android.server.location.MockProvider: void setMinTime(long,android.os.WorkSource)> -> _SINK_
<android.app.ActivityManagerProxy: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> -> _SINK_
<android.widget.ScrollView: void setSmoothScrollingEnabled(boolean)> -> _SINK_
<android.view.animation.Animation: void setFillAfter(boolean)> -> _SINK_
<android.database.DatabaseUtils: void cursorDoubleToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setCursorCapsMode(int,int)> -> _SINK_
<android.widget.AbsListView: int access$1400(android.widget.AbsListView)> -> _SINK_
<android.app.LocalActivityManager: void dispatchPause(boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setStroke(int,int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SINK_
<android.net.wifi.WifiInfo: void setRssi(int)> -> _SINK_
<android.location.Address: void setLocality(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void signalPersistentProcesses(int)> -> _SINK_
<android.view.animation.Animation: void initializeInvalidateRegion(int,int,int,int)> -> _SINK_
<android.widget.GridView: void setNumColumns(int)> -> _SINK_
<android.widget.FastScroller: void setState(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _SINK_
<android.filterfw.core.Filter: void addInputPort(java.lang.String)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTime(long)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedInputMethod(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setCacheMode(int)> -> _SINK_
<android.app.Service: boolean onUnbind(android.content.Intent)> -> _SINK_
<android.widget.ListPopupWindow: void setHorizontalOffset(int)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_
<android.os.PerformanceCollector: void startTiming(java.lang.String)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchDragEvent(android.view.DragEvent)> -> _SINK_
<android.text.Selection: boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setGradientRadius(float)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)> -> _SINK_
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)> -> _SINK_
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void setPooled(boolean)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void setOwnerInfo(java.lang.CharSequence)> -> _SINK_
<android.server.BluetoothService: boolean changeApplicationBluetoothState(boolean,android.bluetooth.IBluetoothStateChangeCallback,android.os.IBinder)> -> _SINK_
<android.widget.ListPopupWindow: void setInputMethodMode(int)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setDither(boolean)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ServerTransaction sendInviteOk(javax.sip.RequestEvent,android.net.sip.SipProfile,java.lang.String,javax.sip.ServerTransaction,java.lang.String,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$DumpState: void setTitlePrinted(boolean)> -> _SINK_
<android.server.BluetoothService: boolean setDiscoverableTimeout(int)> -> _SINK_
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)> -> _SINK_
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)> -> _SINK_
<android.filterfw.core.NativeFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.server.sip.SipHelper: void sendInviteAck(javax.sip.ResponseEvent,javax.sip.Dialog)> -> _SINK_
<android.webkit.WebSettings: void setTextZoom(int)> -> _SINK_
<android.app.ActivityManagerProxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.CHANGE_WIFI_STATE -> _SINK_
<android.view.View: void offsetTopAndBottom(int)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setDataSource(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)> -> _SINK_
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setShowAsActionFlags(int)> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession$EventCallback)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setOptionalIconsVisible(boolean)> -> _SINK_
<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor openDevice(java.lang.String)> -> _SINK_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)> -> _SINK_
<android.widget.GridView: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<android.preference.Preference: void setSummary(java.lang.CharSequence)> -> _SINK_
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)> -> _SINK_
<android.app.ActivityManagerProxy: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<android.app.ApplicationErrorReport$RunningServiceInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.view.View: void setFastRotationY(float)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: void installCaCertificate(byte[])> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)> -> _SINK_
<android.widget.TextView: void setText(java.lang.CharSequence)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setHomeButtonEnabled(boolean)> -> _SINK_
<android.animation.ObjectAnimator: void setIntValues(int[])> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int)> -> _SINK_
<com.android.internal.util.StateMachine: void setInitialState(com.android.internal.util.State)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)> -> _SINK_
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> -> _SINK_
<android.net.http.Headers: void setContentType(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int)> -> _SINK_
<android.widget.TextView: void sendAccessibilityEventTypeViewTextChanged(java.lang.CharSequence,int,int,int)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> -> _SINK_
<android.app.Activity: void setResult(int)> -> _SINK_
<android.widget.CompoundButton$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int synthesizeToFile(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)> -> _SINK_
<android.app.ActivityManagerProxy: void closeSystemDialogs(java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setContentDescription(int)> -> _SINK_
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> -> _SINK_
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)> -> _SINK_
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)> -> _SINK_
<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: boolean dispatchHoverEvent(android.view.MotionEvent)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setNotificationVisibility(int)> -> _SINK_
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)> -> _SINK_
<android.hardware.usb.UsbDeviceConnection: boolean open(java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementSocketTagger: void setThreadSocketStatsTag(int)> -> _SINK_
<android.widget.ArrayAdapter$ArrayFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> -> _SINK_
<com.android.server.wm.WindowManagerService: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)> -> _SINK_
<android.app.SearchDialog$SearchBar: void setSearchDialog(android.app.SearchDialog)> -> _SINK_
<android.webkit.WebViewWorker: void handleMessage(android.os.Message)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean left(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String)> -> _SINK_
<android.widget.TextView: void setFilters(android.text.InputFilter[])> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)> -> _SINK_
<android.webkit.FindActionModeCallback: void setWebView(android.webkit.WebView)> -> _SINK_
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)> -> _SINK_
<android.preference.Preference: void setDefaultValue(java.lang.Object)> -> _SINK_
<android.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,java.util.ArrayList)> -> _SINK_
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)> -> _SINK_
<android.graphics.Bitmap: void setPixel(int,int,int)> -> _SINK_
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPort(int)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByAccessibilityId(int,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SINK_
<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setAlpha(int)> -> _SINK_
<android.widget.ZoomControls: void setZoomSpeed(long)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: int positionChild(android.view.View,int,int,int)> -> _SINK_
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)> -> _SINK_
<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo)> -> _SINK_
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context)> -> _SINK_
<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)> -> _SINK_
<android.inputmethodservice.InputMethodService: void sendKeyChar(char)> -> _SINK_
<android.view.KeyEvent: void setTainted(boolean)> -> _SINK_
<android.view.ViewGroup: void setClipChildren(boolean)> -> _SINK_
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)> -> _SINK_
<android.util.SparseIntArray: void append(int,int)> -> _SINK_
<com.android.server.am.ProcessRecord: void setPid(int)> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: void setDesiredSize(int,int)> -> _SINK_
<android.animation.Keyframe$IntKeyframe: void setValue(java.lang.Object)> -> _SINK_
<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_
<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation(int)> -> _SINK_
<android.widget.Switch: void setSwitchTextAppearance(android.content.Context,int)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: int positionChildInverse(android.view.View,int,int,int)> -> _SINK_
<android.view.View$9: void setValue(android.view.View,float)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SINK_
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -> _SINK_
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)> -> _SINK_
<android.text.SpannableStringInternal: void removeSpan(java.lang.Object)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)> -> _SINK_
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)> -> _SINK_
<android.widget.GridView: void setAdapter(android.widget.Adapter)> -> _SINK_
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)> -> _SINK_
<android.media.AudioManager: void setMode(int)> -> _SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onSvStatusChanged(int,int[],float[],float[],float[],int,int,int)> -> _SINK_
<android.os.Registrant: void notifyRegistrant(android.os.AsyncResult)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedSubtype(int)> android.permission.WRITE_SETTINGS -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult saveNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void viewDataChanged(int,int)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setDisplayName(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setSubMenu(com.android.internal.view.menu.SubMenuBuilder)> -> _SINK_
<android.view.ViewRootImpl: void setStopped(boolean)> -> _SINK_
<android.view.GLES20Layer: void update(int,int,boolean)> -> _SINK_
<android.app.INotificationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.preference.Preference: boolean persistString(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setHardwareAccelSkiaEnabled(boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> -> _SINK_
<android.filterfw.core.Frame: void setData(byte[],int,int)> -> _SINK_
<android.net.http.RequestQueue: android.net.http.RequestHandle queueRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int)> -> _SINK_
<android.webkit.WebSettings: void setPrivateBrowsingEnabled(boolean)> -> _SINK_
<android.graphics.drawable.InsetDrawable: void onBoundsChange(android.graphics.Rect)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setTargetRect(float,float,float,float)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void setExtrasClassLoader(java.lang.ClassLoader)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setTransportControlFlags(int,int)> -> _SINK_
<android.app.FragmentManagerImpl: int allocBackStackIndex(android.app.BackStackRecord)> -> _SINK_
<android.app.Activity: void setSecondaryProgress(int)> -> _SINK_
<android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchTrackballEvent(int,android.view.MotionEvent,com.android.internal.view.IInputMethodCallback)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(int)> -> _SINK_
<android.webkit.LoadListener: void status(int,int,int,java.lang.String)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: boolean buildAndPutEnabledInputMethodsStrRemovingIdLocked(java.lang.StringBuilder,java.util.List,java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setDither(boolean)> -> _SINK_
<android.view.View$4: void setValue(android.view.View,float)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence)> -> _SINK_
<android.webkit.ZoomManager: void onFirstLayout(android.webkit.WebViewCore$DrawData)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setFormat(java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setImageViewResource(int,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSameMobileAndFixedLinePattern(boolean)> -> _SINK_
<android.view.Window: void setCloseOnTouchOutside(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiEnabled(boolean)> -> _SINK_
<com.android.internal.policy.impl.LockPatternKeyguardView: void startFaceLock(android.os.IBinder,int,int,int,int)> -> _SINK_
<com.android.vcard.VCardProperty: void setValues(java.lang.String[])> -> _SINK_
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)> -> _SINK_
<android.inputmethodservice.SoftInputWindow: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.widget.ImageView: void setAdjustViewBounds(boolean)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void startKeepAliveProcess(int,android.net.sip.SipProfile,com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback)> -> _SINK_
<android.inputmethodservice.Keyboard: boolean setShifted(boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendBroadcast(boolean,boolean)> -> _SINK_
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)> -> _SINK_
<android.view.View$12: void setValue(java.lang.Object,float)> -> _SINK_
<com.android.internal.widget.LockPatternView: void setPattern(com.android.internal.widget.LockPatternView$DisplayMode,java.util.List)> -> _SINK_
<android.filterfw.core.FilterFunction: void setInputValue(java.lang.String,java.lang.Object)> -> _SINK_
<com.android.server.usb.UsbDeviceManager: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void onInformationRequested(int,int,int,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartGps(int)> -> _SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(android.net.wifi.SupplicantState)> -> _SINK_
<android.content.pm.RegisteredServicesCache: void setListener(android.content.pm.RegisteredServicesCacheListener,android.os.Handler)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void dispatchAppVisibility(boolean)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,double)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasSystemFeature(java.lang.String)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> -> _SINK_
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setVerticalCorrection(int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)> -> _SINK_
<android.widget.ListPopupWindow: void setWidth(int)> -> _SINK_
<android.app.Fragment: void setUserVisibleHint(boolean)> -> _SINK_
<android.view.ViewGroup: void addView(android.view.View)> -> _SINK_
<android.os.Bundle: android.os.Bundle forPair(java.lang.String,java.lang.String)> -> _SINK_
<android.app.Dialog: void setFeatureDrawableResource(int,int)> -> _SINK_
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.preference.PreferenceInflater: boolean onCreateCustomFromTag(org.xmlpull.v1.XmlPullParser,android.preference.Preference,android.util.AttributeSet)> -> _SINK_
<android.widget.ImageView: void setVisibility(int)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchKeyEvent(int,android.view.KeyEvent,com.android.internal.view.IInputMethodCallback)> -> _SINK_
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)> -> _SINK_
<android.webkit.WebTextView: void setNodePointer(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> -> _SINK_
<android.view.GLES20RecordingCanvas: void setNextPoolable(android.view.GLES20RecordingCanvas)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine: void dump(java.io.PrintWriter)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri)> -> _SINK_
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(android.view.View,android.app.ActionBar$LayoutParams)> -> _SINK_
<android.net.rtp.AudioGroup: void setMode(int)> -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void updateState(com.android.internal.policy.impl.GlobalActions$ToggleAction$State)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setLogo(int)> -> _SINK_
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)> -> _SINK_
<android.animation.PropertyValuesHolder: void setFloatValues(float[])> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)> -> _SINK_
<android.app.Dialog: void setDismissMessage(android.os.Message)> -> _SINK_
<android.widget.ListPopupWindow: void setHeight(int)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<android.content.ContentProviderProxy: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.server.am.ActivityRecord: void addNewIntentLocked(android.content.Intent)> -> _SINK_
<android.net.http.Request: void sendRequest(android.net.http.AndroidHttpClientConnection)> -> _SINK_
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)> -> _SINK_
<android.net.LinkCapabilities$1: android.net.LinkCapabilities createFromParcel(android.os.Parcel)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: boolean allowFilterResult(android.content.IntentFilter,java.util.List)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> -> _SINK_
<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)> -> _SINK_
<android.location.Address: void setFeatureName(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void finishOtherInstances(android.os.IBinder,android.content.ComponentName)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.animation.ObjectAnimator: void setProperty(android.util.Property)> -> _SINK_
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)> -> _SINK_
<android.os.Parcel: void writeMap(java.util.Map)> -> _SINK_
<com.android.server.am.ActivityStack: void sendActivityResultLocked(int,com.android.server.am.ActivityRecord,java.lang.String,int,int,android.content.Intent)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setIcon(int)> -> _SINK_
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void setNextPoolable(java.lang.Object)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleWindowVisibility(android.os.IBinder,boolean)> -> _SINK_
<android.widget.ListView: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setCheckable(boolean)> -> _SINK_
<android.accessibilityservice.AccessibilityService: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<com.android.server.StatusBarManagerService: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)> -> _SINK_
<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: void setSurfaceFrameSize(int,int)> -> _SINK_
<android.view.HardwareCanvas: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordQuality(android.content.ComponentName,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int destroySecureContainer(java.lang.String,boolean)> -> _SINK_
<com.android.server.LightsService$Light: void setColor(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)> -> _SINK_
<android.net.MobileDataStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setTitle(java.lang.CharSequence)> -> _SINK_
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.wm.InputManager: void setInputDispatchMode(boolean,boolean)> -> _SINK_
<android.text.style.ReplacementSpan: void updateMeasureState(android.text.TextPaint)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.lang.String packageForFilter(android.content.IntentFilter)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransition(java.lang.String,int,int)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setRightTabResources(int,int,int,int)> -> _SINK_
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsSystemScanStart(long)> -> _SINK_
<com.android.server.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void appPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.text.Selection: boolean moveToRightEdge(android.text.Spannable,android.text.Layout)> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(long[],int,android.os.IBinder)> -> _SINK_
<android.net.DnsPinger: int pingDnsAsync(java.net.InetAddress,int,int)> -> _SINK_
<android.filterfw.core.SyncRunner: void setDoneCallback(android.filterfw.core.GraphRunner$OnRunnerDoneListener)> -> _SINK_
<android.widget.AdapterViewAnimator: void setSelection(int)> -> _SINK_
<android.preference.PreferenceScreen$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.webkit.CallbackProxy: void onScaleChanged(float,float)> -> _SINK_
<android.app.ActivityManagerProxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)> -> _SINK_
<android.widget.TextView: void setPadding(int,int,int,int)> -> _SINK_
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])> -> _SINK_
<android.graphics.Bitmap: void setDensity(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Counter: void writeCounterToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Counter)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)> -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)> -> _SINK_
<android.widget.AbsListView: int access$2300(android.widget.AbsListView)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> android.permission.CHANGE_NETWORK_STATE -> _SINK_
<android.net.wifi.WifiStateMachine$TetheringState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void addNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void setUpdateVersion(int)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)> -> _SINK_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchHoverEvent(android.view.MotionEvent)> -> _SINK_
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)> -> _SINK_
<android.app.AlertDialog: void setIcon(int)> -> _SINK_
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void changeStateFromPress(boolean)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: void setSplitActionBar(boolean)> -> _SINK_
<android.view.View: void setIsRootNamespace(boolean)> -> _SINK_
<android.view.ViewRootImpl$3: void setType(int)> -> _SINK_
<android.app.SearchManager: void setOnDismissListener(android.app.SearchManager$OnDismissListener)> -> _SINK_
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)> -> _SINK_
<android.view.animation.Transformation: void set(android.view.animation.Transformation)> -> _SINK_
<android.graphics.NinePatch: void setPaint(android.graphics.Paint)> -> _SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)> -> _SINK_
<android.widget.ExpandableListView: void setChildIndicatorBounds(int,int)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(android.os.Message)> -> _SINK_
<android.net.WebAddress: void setPort(int)> -> _SINK_
<android.os.PerformanceCollector: void beginSnapshot(java.lang.String)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setPadding(android.graphics.Rect)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setAllMetadata(int,android.os.Bundle,android.graphics.Bitmap)> -> _SINK_
<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> -> _SINK_
<android.view.ContextThemeWrapper: void setTheme(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)> -> _SINK_
<com.android.server.pm.PackageVerificationState: boolean setVerifierResponse(int,int)> -> _SINK_
<android.location.Location: void setExtras(android.os.Bundle)> -> _SINK_
<android.widget.TextView: void setEnabled(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])> -> _SINK_
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.util.Xml: void parse(java.io.Reader,org.xml.sax.ContentHandler)> -> _SINK_
<android.filterfw.core.FilterGraph: boolean addFilter(android.filterfw.core.Filter)> -> _SINK_
<android.view.View$5: void setValue(android.view.View,float)> -> _SINK_
<android.widget.AbsSpinner$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void clearInterfaceAddresses(java.lang.String)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidPermission(java.lang.String,int)> -> _SINK_
<com.android.internal.util.AsyncService: int onStartCommand(android.content.Intent,int,int)> -> _SINK_
<android.text.Selection: void setSelection(android.text.Spannable,int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setCheckable(boolean)> -> _SINK_
<com.android.internal.widget.LockPatternView: void setTactileFeedbackEnabled(boolean)> -> _SINK_
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)> -> _SINK_
<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)> -> _SINK_
<android.location.GpsStatus: void setStatus(int,int[],float[],float[],float[],int,int,int)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: void setAlpha(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setStrictModeVisualIndicatorPreference(java.lang.String)> -> _SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setCustomView(android.view.View)> -> _SINK_
<android.graphics.drawable.DrawableContainer: void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState)> -> _SINK_
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.app.ActivityManagerProxy: void moveTaskBackwards(int)> -> _SINK_
<android.widget.ExpandableListView: void setIndicatorBounds(int,int)> -> _SINK_
<android.server.BluetoothService: void sendProfileStateMessage(int,int)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setBytesPerSample(int)> -> _SINK_
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setPlaybackState(int,int,long)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)> -> _SINK_
<android.filterfw.core.FrameManager: void setContext(android.filterfw.core.FilterContext)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)> -> _SINK_
<android.widget.SearchView$SearchAutoComplete: void setSearchView(android.widget.SearchView)> -> _SINK_
<android.widget.LinearLayout: void setGravity(int)> -> _SINK_
<android.view.SurfaceView: void access$000(android.view.SurfaceView,boolean,boolean)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setFloats(float[])> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setEnterFadeDuration(int)> -> _SINK_
<android.media.SoundPool: void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)> -> _SINK_
<android.widget.AdapterView: void setFocusableInTouchMode(boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setPreferredDomesticCarrierCode(java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)> -> _SINK_
<android.widget.Scroller: void setFinalX(int)> -> _SINK_
<android.view.inputmethod.InputConnectionWrapper: void setTarget(android.view.inputmethod.InputConnection)> -> _SINK_
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)> -> _SINK_
<com.android.server.AlarmManagerService$Alarm: void dump(java.io.PrintWriter,java.lang.String,long)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setOrder(int)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)> -> _SINK_
<android.os.ServiceManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setCurrentOrientationLw(int)> -> _SINK_
<com.android.server.AppWidgetService: void updateAppWidgetInstanceLocked(com.android.server.AppWidgetService$AppWidgetId,android.widget.RemoteViews)> -> _SINK_
<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.Activity: void setContentView(android.view.View)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownDismissedOnCompletion(boolean)> -> _SINK_
<android.preference.Preference: void setEnabled(boolean)> -> _SINK_
<android.os.Message: void setTarget(android.os.Handler)> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void setWidthLimit(int,boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean addPermissionAsync(android.content.pm.PermissionInfo)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)> -> _SINK_
<android.location.IGpsStatusProvider$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setHardKeyboardStatus(boolean,boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int)> -> _SINK_
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)> -> _SINK_
<android.app.IServiceConnection$Stub$Proxy: void connected(android.content.ComponentName,android.os.IBinder)> -> _SINK_
<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)> -> _SINK_
<com.android.server.MountService$ObbAction: void sendNewStatusOrIgnore(int)> -> _SINK_
<android.net.NetworkPolicyManager: long computeNextCycleBoundary(long,android.net.NetworkPolicy)> -> _SINK_
<com.android.server.PowerManagerService: void setKeyboardVisibility(boolean)> -> _SINK_
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)> -> _SINK_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void insert(int,android.widget.RemoteViews,long,boolean)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: void setDirection(int)> -> _SINK_
<android.location.ILocationProvider$Stub$Proxy: void setMinTime(long,android.os.WorkSource)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)> -> _SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.animation.ObjectAnimator: void setTarget(java.lang.Object)> -> _SINK_
<com.android.server.wm.InputManager$Callbacks: void notifyLidSwitchChanged(long,boolean)> -> _SINK_
<android.webkit.WebSettings: void setDefaultFontSize(int)> -> _SINK_
<android.view.animation.Animation: void setRepeatMode(int)> -> _SINK_
<com.android.server.IntentResolver: void removeFilterInternal(android.content.IntentFilter)> -> _SINK_
<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)> -> _SINK_
<android.view.View: void setTagInternal(int,java.lang.Object)> -> _SINK_
<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)> -> _SINK_
<android.app.Notification: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.location.PassiveProvider: void setMinTime(long,android.os.WorkSource)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteAppWidgetId(int)> -> _SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setDoubleTapZoom(int)> -> _SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onFirstFix(int)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingRegion(int,int)> -> _SINK_
<android.app.Activity: void setFinishOnTouchOutside(boolean)> -> _SINK_
<android.preference.PreferenceGroup: boolean addPreference(android.preference.Preference)> -> _SINK_
<android.view.View$AttachInfo$InvalidateInfo: void setNextPoolable(android.view.View$AttachInfo$InvalidateInfo)> -> _SINK_
<android.widget.ListView: void setHeaderDividersEnabled(boolean)> -> _SINK_
<android.view.animation.AnimationSet: void setDuration(long)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean addPermission(android.content.pm.PermissionInfo)> -> _SINK_
<com.android.internal.widget.TransportControlView$IRemoteControlDisplayWeak: void setTransportControlFlags(int,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountVolume(java.lang.String,boolean,boolean)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)> -> _SINK_
<com.android.server.wm.InputManager$InputFilterHost: void sendInputEvent(android.view.InputEvent,int)> -> _SINK_
<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setMaximumScreenOffTimeount(int)> -> _SINK_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void updateStatusBarVisibilityLocked(int)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setOnTriggerListener(com.android.internal.widget.SlidingTab$OnTriggerListener)> -> _SINK_
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)> -> _SINK_
<android.app.Activity: void onCreate(android.os.Bundle)> -> _SINK_
<android.graphics.Bitmap: void setDefaultDensity(int)> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityMonitor addMonitor(android.content.IntentFilter,android.app.Instrumentation$ActivityResult,boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener)> -> _SINK_
<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)> -> _SINK_
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingText(java.lang.CharSequence,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setSubtitle(int)> -> _SINK_
<android.inputmethodservice.IInputMethodSessionWrapper: void executeMessage(android.os.Message)> -> _SINK_
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastErrorAndTransitionToInitialState(int)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)> -> _SINK_
<android.widget.AdapterView: void addView(android.view.View,int)> -> _SINK_
<android.os.Parcel: void writeStringList(java.util.List)> -> _SINK_
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void removeClient(com.android.internal.view.IInputMethodClient)> -> _SINK_
<android.app.ActivityManagerProxy: boolean removeSubTask(int,int)> -> _SINK_
<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)> -> _SINK_
<android.view.WindowManagerImpl: void setStoppedState(android.os.IBinder,boolean)> -> _SINK_
<android.location.IGpsStatusProvider$Stub$Proxy: void addGpsStatusListener(android.location.IGpsStatusListener)> -> _SINK_
<android.filterfw.core.NativeFrame: void setFloats(float[])> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> -> _SINK_
<android.widget.ImageView: void setImageResource(int)> -> _SINK_
<com.android.internal.widget.SlidingTab: void onMeasure(int,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$5100(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String,int)> -> _SINK_
<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[])> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void findAccessibilityNodeInfoByAccessibilityId(int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> -> _SINK_
<android.view.View: void setLayoutDirection(int)> -> _SINK_
<android.text.format.Time: void set(int,int,int,int,int,int)> -> _SINK_
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.WRITE_SETTINGS -> _SINK_
<android.app.ActivityManagerProxy: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCodeSource(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource)> -> _SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void setReserveOverflow(boolean)> -> _SINK_
<android.os.Looper: void setMessageLogging(android.util.Printer)> -> _SINK_
<android.server.BluetoothService: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.server.ConnectivityService: void setDataDependency(int,boolean)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)> -> _SINK_
<com.android.internal.app.AlertController: void setCustomTitle(android.view.View)> -> _SINK_
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.PopupWindow: void update(int,int,int,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeIcon(int)> -> _SINK_
<android.webkit.SearchBoxImpl: void setVerbatim(boolean)> -> _SINK_
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)> -> _SINK_
<android.app.ExpandableListActivity: void setSelectedGroup(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.pm.PackageParser$ActivityIntentInfo)> -> _SINK_
<android.widget.TextView: void setInputType(int)> -> _SINK_
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])> -> _SINK_
<com.android.internal.widget.WaveView: void onMeasure(int,int)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelectionBackReference(int,int)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setGradientType(int)> -> _SINK_
<com.android.internal.app.IMediaContainerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.graphics.Matrix: void setScale(float,float)> -> _SINK_
<android.app.ActivityManagerProxy: void unregisterProcessObserver(android.app.IProcessObserver)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)> -> _SINK_
<com.android.server.pm.PackageManagerService: boolean addPermission(android.content.pm.PermissionInfo)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> -> _SINK_
<android.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)> -> _SINK_
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.webkit.ZoomManager: void setZoomScale(float,boolean)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiMulticastEnabled(int)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,java.lang.Object,long)> -> _SINK_
<android.view.View: void setTop(int)> -> _SINK_
<android.app.ActivityManagerProxy: void setProcessForeground(android.os.IBinder,int,boolean)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setCallback(com.android.internal.os.BatteryStatsImpl$BatteryCallback)> -> _SINK_
<android.text.format.DateUtils: java.lang.CharSequence formatSameDayTime(long,long,int,int)> -> _SINK_
<android.media.AudioManager: void setWiredHeadsetOn(boolean)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: void set(android.widget.RemoteViewsAdapter$RemoteViewsMetaData)> -> _SINK_
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting addPackageLPw(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,int,int,int)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanType(boolean)> -> _SINK_
<android.server.BluetoothService: void sendUuidIntent(java.lang.String)> -> _SINK_
<android.widget.ListPopupWindow: void setModal(boolean)> -> _SINK_
<android.text.format.DateUtils: java.lang.String writeDateTime(java.util.Calendar)> -> _SINK_
<android.net.Uri: int compareTo(java.lang.Object)> -> _SINK_
<android.app.ActivityThread: void registerOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)> -> _SINK_
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)> -> _SINK_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperOffsetsComplete(android.os.IBinder)> -> _SINK_
<android.graphics.drawable.TransitionDrawable: void setCrossFadeEnabled(boolean)> -> _SINK_
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)> -> _SINK_
<android.webkit.SearchBoxImpl: void setDimensions(int,int,int,int)> -> _SINK_
<android.widget.LinearLayout: void setDividerPadding(int)> -> _SINK_
<android.widget.TextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void notifyAppWidgetViewDataChanged(int[],int)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: boolean reportFullscreenMode(boolean)> -> _SINK_
<android.widget.CompoundButton: void setChecked(boolean)> -> _SINK_
<android.view.Window$LocalWindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)> -> _SINK_
<android.view.View: void setFastX(float)> -> _SINK_
<android.view.View: void setSystemUiVisibility(int)> -> _SINK_
<android.webkit.WebTextView: void setRect(int,int,int,int)> -> _SINK_
<android.location.Address: void setSubThoroughfare(java.lang.String)> -> _SINK_
<android.app.AlarmManager: void setTimeZone(java.lang.String)> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[])> -> _SINK_
<android.app.Dialog: void setCancelMessage(android.os.Message)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setShortcut(boolean,char)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesDuration(int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> -> _SINK_
<android.widget.ProgressBar: void setIndeterminate(boolean)> -> _SINK_
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardView: boolean setShifted(boolean)> -> _SINK_
<android.view.WindowManagerImpl$CompatModeWrapper: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.appwidget.AppWidgetManager: void unbindRemoteViewsService(int,android.content.Intent)> -> _SINK_
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)> -> _SINK_
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)> -> _SINK_
<com.android.server.EventLogTags: void writeBootProgressPmsReady(long)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePreferredActivities(java.lang.String)> -> _SINK_
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.drawable.DrawableContainer: boolean onStateChange(int[])> -> _SINK_
<android.content.IClipboard$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setStroke(int,int)> -> _SINK_
<android.widget.RemoteViews: void setEmptyView(int,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int)> -> _SINK_
<android.net.rtp.RtpStream: void setMode(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)> -> _SINK_
<com.android.internal.os.BinderInternal: void forceGc(java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setVoip(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setData(java.nio.ByteBuffer,int,int)> -> _SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent)> -> _SINK_
<android.view.View: void setWillNotDraw(boolean)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setAudioStreamType(int)> -> _SINK_
<com.android.server.sip.SipHelper: void sendInviteRequestTerminated(javax.sip.message.Request,javax.sip.ServerTransaction)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,boolean,boolean,int,boolean,int)> -> _SINK_
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterByStatus(int)> -> _SINK_
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: void packageDeleted(java.lang.String,int)> -> _SINK_
<android.content.ContentService: void setMasterSyncAutomatically(boolean)> -> _SINK_
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<com.android.server.ConnectivityService$1: void onUidRulesChanged(int,int)> -> _SINK_
<android.widget.EditText: void setSelection(int,int)> -> _SINK_
<android.webkit.WebSettings: void setSupportZoom(boolean)> -> _SINK_
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> -> _SINK_
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_
<android.database.AbstractCursor: void onChange(boolean)> -> _SINK_
<android.security.IKeyChainService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)> -> _SINK_
<android.content.pm.PackageParser$Component: void setPackageName(java.lang.String)> -> _SINK_
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)> -> _SINK_
<android.app.DownloadManager: void restartDownload(long[])> -> _SINK_
<android.widget.ExpandableListView: void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener)> -> _SINK_
<android.widget.SearchView: void setQueryRefinementEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void updateBatteryWorkSource(android.os.WorkSource)> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)> -> _SINK_
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)> -> _SINK_
<android.app.Service: void stopForeground(boolean)> -> _SINK_
<android.app.Instrumentation: void sendKeyDownUpSync(int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setAlpha(int)> -> _SINK_
<android.view.View$ScrollabilityCache: void setFadeColor(int)> -> _SINK_
<android.app.ActivityManagerProxy: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.http.HttpAuthHeader: void setUsername(java.lang.String)> -> _SINK_
<android.location.Address: void setPremises(java.lang.String)> -> _SINK_
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.server.BluetoothService: boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])> -> _SINK_
<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)> -> _SINK_
<com.android.vcard.VCardProperty: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewBase: void setCallback(com.android.internal.policy.impl.KeyguardViewCallback)> -> _SINK_
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)> -> _SINK_
<android.widget.AbsListView: int access$800(android.widget.AbsListView)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceUp(java.lang.String)> -> _SINK_
<com.android.server.am.TaskRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.widget.ZoomControls: void setIsZoomOutEnabled(boolean)> -> _SINK_
<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SINK_
<android.net.wifi.WifiManager: void forgetNetwork(int)> -> _SINK_
<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)> -> _SINK_
<android.widget.SearchView: void setAppSearchData(android.os.Bundle)> -> _SINK_
<android.webkit.WebSettings: void setDoubleTapToastCount(int)> -> _SINK_
<android.content.ContentProviderProxy: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> -> _SINK_
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setOnlyIncludeVisibleInDownloadsUi(boolean)> -> _SINK_
<android.widget.SearchView: void setSuggestionsAdapter(android.widget.CursorAdapter)> -> _SINK_
<android.widget.ExpandableListView: void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.lang.String packageForFilter(android.content.IntentFilter)> -> _SINK_
<android.app.ActivityThread: void handleProfilerControl(boolean,android.app.ActivityThread$ProfilerControlData,int)> -> _SINK_
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.server.BluetoothService: boolean notifyIncomingConnection(java.lang.String,boolean)> -> _SINK_
<android.app.Activity: void setVolumeControlStream(int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setNavigationMode(int)> -> _SINK_
<android.view.ViewGroup: void dispatchSetSelected(boolean)> -> _SINK_
<android.widget.AbsListView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.view.View: void setHovered(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void setPackageScreenCompatMode(java.lang.String,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setAlpha(float)> -> _SINK_
<android.widget.MediaController: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.app.Dialog: void setTitle(java.lang.CharSequence)> -> _SINK_
<com.android.server.LocationManagerService$ProximityAlert: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)> -> _SINK_
<android.net.EthernetDataTracker: void defaultRouteSet(boolean)> -> _SINK_
<android.widget.AbsListView: int access$300(android.widget.AbsListView)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)> -> _SINK_
<com.android.internal.widget.SlidingTab$Slider: void setTarget(int)> -> _SINK_
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder before(android.animation.Animator)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setEnabled(boolean)> -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.lang.String)> -> _SINK_
<com.android.internal.os.storage.ExternalStorageFormatter: int onStartCommand(android.content.Intent,int,int)> -> _SINK_
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)> -> _SINK_
<android.net.wifi.WifiApConfigStore: void access$400(android.net.wifi.WifiApConfigStore,android.net.wifi.WifiConfiguration)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)> -> _SINK_
<android.widget.AbsListView$RecycleBin: void setViewTypeCount(int)> -> _SINK_
<android.app.UiModeManager: void enableCarMode(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceQuota(java.lang.String)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setDither(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void removeSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)> -> _SINK_
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> -> _SINK_
<android.graphics.Matrix$1: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> -> _SINK_
<android.net.wifi.WpsInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.webkit.WebView: void updateDefaultZoomDensity(float)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setMetaValue(java.lang.String,java.lang.Object)> -> _SINK_
<android.appwidget.AppWidgetManager: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder)> -> _SINK_
<android.view.View: void setX(float)> -> _SINK_
<android.webkit.ViewStateSerializer: boolean serializeViewState(java.io.OutputStream,android.webkit.WebView)> -> _SINK_
<android.server.BluetoothService: void updateRemoteDevicePropertiesCache(java.lang.String)> -> _SINK_
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setGradientRadius(float)> -> _SINK_
<android.net.EthernetDataTracker: void setTeardownRequested(boolean)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: void onDestroy(android.content.Intent)> -> _SINK_
<android.content.res.XmlBlock$Parser: void setProperty(java.lang.String,java.lang.Object)> -> _SINK_
<android.graphics.drawable.DrawableContainer: boolean setVisible(boolean,boolean)> -> _SINK_
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)> -> _SINK_
<android.content.ContentProvider$Transport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyMessageWaitingChanged(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setWindowWallpaperPositionLocked(com.android.server.wm.WindowState,float,float,float,float)> -> _SINK_
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.AbsListView: void smoothScrollBy(int,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setShowAsActionFlags(int)> -> _SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager$MulticastLock: void setReferenceCounted(boolean)> -> _SINK_
<android.app.ContextImpl: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.view.animation.AnimationSet: void initializeInvalidateRegion(int,int,int,int)> -> _SINK_
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> -> _SINK_
<com.android.internal.widget.multiwaveview.TargetDrawable: void setY(float)> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: void setOnTriggerListener(com.android.internal.widget.multiwaveview.MultiWaveView$OnTriggerListener)> -> _SINK_
<android.widget.ListPopupWindow: void setSelection(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)> -> _SINK_
<android.widget.CompoundButton: void setOnCheckedChangeWidgetListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SINK_
<android.widget.SearchView: void setQueryHint(java.lang.CharSequence)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setRequiresCell(boolean)> -> _SINK_
<android.app.ContextImpl: void startActivities(android.content.Intent[])> -> _SINK_
<android.widget.TextView$CharWrapper: void set(char[],int,int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setBlendEnabled(boolean)> -> _SINK_
<android.widget.AbsListView: int access$2400(android.widget.AbsListView)> -> _SINK_
<android.webkit.WebView$QueuedTouch: android.webkit.WebView$QueuedTouch set(android.view.MotionEvent,long)> -> _SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)> -> _SINK_
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)> -> _SINK_
<android.widget.TextView: void setRawInputType(int)> -> _SINK_
<android.widget.AbsListView: void access$3100(android.widget.AbsListView,boolean)> -> _SINK_
<android.location.Criteria: void setBearingRequired(boolean)> -> _SINK_
<android.widget.AdapterView: void setSelectedPositionInt(int)> -> _SINK_
<android.widget.TextView: void setHint(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> android.permission.MODIFY_AUDIO_SETTINGS -> _SINK_
<android.view.View: void setRotationY(float)> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])> -> _SINK_
<android.app.LoadedApk$ServiceDispatcher: void setUnbindLocation(java.lang.RuntimeException)> -> _SINK_
<android.location.Address$1: android.location.Address createFromParcel(android.os.Parcel)> -> _SINK_
<android.view.ViewRootImpl$3: void setFormat(int)> -> _SINK_
<android.widget.ImageView: void setBaselineAlignBottom(boolean)> -> _SINK_
<android.view.ViewGroup: void setPadding(int,int,int,int)> -> _SINK_
<android.widget.TextView: void setTextColor(int)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedHttpAuthCredentials(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.widget.Switch: void setTextOn(java.lang.CharSequence)> -> _SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.accessibility.AccessibilityManager$1: void setState(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)> -> _SINK_
<android.os.ServiceManagerProxy: void setPermissionController(android.os.IPermissionController)> -> _SINK_
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: void startAppFreezingScreen(android.os.IBinder,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)> -> _SINK_
<android.app.ActivityManagerProxy: void setActivityController(android.app.IActivityController)> -> _SINK_
<android.widget.TextView$EasyEditPopupWindow: int clipVertically(int)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)> -> _SINK_
<android.graphics.ColorMatrix: void setScale(float,float,float,float)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.webkit.Network: boolean restoreState(android.os.Bundle)> -> _SINK_
<android.animation.ValueAnimator: void setIntValues(int[])> -> _SINK_
<com.android.internal.widget.AbsActionBarView: void setVisibility(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkPermission(java.lang.String,java.lang.String)> -> _SINK_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)> -> _SINK_
<android.net.WebAddress: void setHost(java.lang.String)> -> _SINK_
<com.android.server.wm.Session: void setWallpaperPosition(android.os.IBinder,float,float,float,float)> -> _SINK_
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedClientCertRequest(android.webkit.ClientCertRequestHandler,java.lang.String)> -> _SINK_
<android.view.GLES20Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)> -> _SINK_
<android.net.wifi.WifiInfo: void setNetworkId(int)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int,int)> -> _SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateDrawState(android.text.TextPaint)> -> _SINK_
<android.view.ViewGroup: void setChildrenLayersEnabled(boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: void setValidator(android.widget.AutoCompleteTextView$Validator)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: void setWebChromeClient(android.webkit.WebChromeClient)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setCountryCode(int)> -> _SINK_
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Counter: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<android.widget.ZoomButtonsController: void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener)> -> _SINK_
<android.app.ActivityManagerProxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)> -> _SINK_
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)> -> _SINK_
<android.view.View$12: void setValue(android.view.View,float)> -> _SINK_
<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(android.view.View)> -> _SINK_
<android.view.VelocityTracker: void setNextPoolable(java.lang.Object)> -> _SINK_
<android.widget.AbsListView$PositionScroller: void start(int,int)> -> _SINK_
<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)> -> _SINK_
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)> -> _SINK_
<android.content.Intent: android.content.Intent setData(android.net.Uri)> -> _SINK_
<android.content.Intent: android.content.Intent setAction(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setChecked(boolean)> -> _SINK_
<android.net.NetworkPolicyManager: void dumpRules(java.io.PrintWriter,int)> -> _SINK_
<android.net.http.RequestQueue: android.net.http.RequestHandle queueSynchronousRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent)> -> _SINK_
<android.widget.TextView$ActionPopupWindow: int clipVertically(int)> -> _SINK_
<android.net.LinkProperties: void setInterfaceName(java.lang.String)> -> _SINK_
<android.widget.ScrollBarDrawable: void drawTrack(android.graphics.Canvas,android.graphics.Rect,boolean)> -> _SINK_
<android.net.ConnectivityManager: void setDataDependency(int,boolean)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)> -> _SINK_
<android.filterfw.io.GraphReader: void addReferencesByMap(android.filterfw.core.KeyValueMap)> -> _SINK_
<android.graphics.Rect: void set(android.graphics.Rect)> -> _SINK_
<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.os.BatteryStats$HistoryItem: void setTo(long,byte,android.os.BatteryStats$HistoryItem)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[])> -> _SINK_
<android.content.pm.PackageParser$Provider: void setPackageName(java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setWallpaperAnimLayerAdjustmentLocked(int)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)> -> _SINK_
<android.view.ViewGroup: void addView(android.view.View,int,int)> -> _SINK_
<android.webkit.SearchBoxImpl: void setSelection(int,int)> -> _SINK_
<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)> -> _SINK_
<android.webkit.WebView: void setActive(boolean)> -> _SINK_
<android.view.GLES20Canvas: void drawPatch(android.graphics.Bitmap,byte[],android.graphics.RectF,android.graphics.Paint)> -> _SINK_
<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> -> _SINK_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponent(android.content.ComponentName)> android.permission.SET_WALLPAPER_COMPONENT -> _SINK_
<android.webkit.CallbackProxy: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> -> _SINK_
<com.android.server.am.CompatModePackages: void setPackageAskCompatModeLocked(java.lang.String,boolean)> -> _SINK_
<com.android.server.LightsService$Light: void setBrightness(int,int)> -> _SINK_
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _SINK_
<com.android.server.am.ReceiverList: void dumpLocal(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.view.View: boolean setAlphaNoInvalidation(float)> -> _SINK_
<android.webkit.WebView: void setSelection(int,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)> -> _SINK_
<android.widget.HorizontalScrollView: void setOverScrollMode(int)> -> _SINK_
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)> -> _SINK_
<android.widget.EditText: void setSelection(int)> -> _SINK_
<android.widget.RelativeLayout: void onMeasure(int,int)> -> _SINK_
<android.widget.ZoomButtonsController$Container: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setStrict(boolean)> -> _SINK_
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$700(com.android.server.connectivity.Tethering$TetherInterfaceSM,boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowHomeEnabled(boolean)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupReset(java.lang.String)> -> _SINK_
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)> android.permission.BROADCAST_STICKY -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.server.MountService: boolean onEvent(int,java.lang.String,java.lang.String[])> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleNewIntent(java.util.List,android.os.IBinder)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int)> -> _SINK_
<android.view.animation.AnimationSet: void setStartOffset(long)> -> _SINK_
<android.webkit.WebSettings: void setXSSAuditorEnabled(boolean)> -> _SINK_
<android.widget.ListPopupWindow: void setAnchorView(android.view.View)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setCheckable(boolean)> -> _SINK_
<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setGradientCenter(float,float)> -> _SINK_
<com.android.internal.widget.ActionBarView$HomeView: void setUp(boolean)> -> _SINK_
<com.android.server.wm.InputManager: void setPointerSpeed(int)> -> _SINK_
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)> -> _SINK_
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void reboot(java.lang.String)> -> _SINK_
<android.widget.ZoomButton: boolean dispatchUnhandledMove(android.view.View,int)> -> _SINK_
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)> -> _SINK_
<android.text.method.AllCapsTransformationMethod: void setLengthChangesAllowed(boolean)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteHost(int)> -> _SINK_
<com.android.server.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean)> -> _SINK_
<android.os.Parcel: void writeCharSequence(java.lang.CharSequence)> -> _SINK_
<android.app.SearchDialog: void setWorking(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.StatusBarManagerService: void setNotificationCallbacks(com.android.server.StatusBarManagerService$NotificationCallbacks)> -> _SINK_
<android.app.ApplicationThreadProxy: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter,int)> -> _SINK_
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<com.android.server.pm.PackageManagerService: void readPermission(org.xmlpull.v1.XmlPullParser,java.lang.String)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelAllNotifications(java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: void setWebViewClient(android.webkit.WebViewClient)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFormat(int)> -> _SINK_
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)> -> _SINK_
<com.android.server.am.ActivityRecord: void setTask(com.android.server.am.TaskRecord,com.android.server.am.ThumbnailHolder,boolean)> -> _SINK_
<android.widget.GridView: void setStretchMode(int)> -> _SINK_
<android.app.ProgressDialog: void setSecondaryProgress(int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void disableNat(java.lang.String,java.lang.String)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setFullscreenMode(boolean)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setObjectClass(java.lang.Class)> -> _SINK_
<android.hardware.Sensor: void setLegacyType(int)> -> _SINK_
<android.widget.AdapterViewAnimator: void setInAnimation(android.content.Context,int)> -> _SINK_
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)> -> _SINK_
<android.view.View: void setClickable(boolean)> -> _SINK_
<android.util.SparseArray: void setValueAt(int,java.lang.Object)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteUserActivity(int,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> android.permission.CHANGE_NETWORK_STATE -> _SINK_
<android.view.View$5: void setValue(java.lang.Object,float)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setIsActionButton(boolean)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePermission(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)> -> _SINK_
<android.widget.TextView: void setImeOptions(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)> -> _SINK_
<android.app.AlertDialog: void setView(android.view.View)> -> _SINK_
<android.view.ViewGroup: void measureChild(android.view.View,int,int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)> -> _SINK_
<android.graphics.Matrix$1: boolean setPolyToPoly(float[],int,float[],int,int)> -> _SINK_
<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)> -> _SINK_
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)> -> _SINK_
<android.accessibilityservice.AccessibilityService: int access$002(android.accessibilityservice.AccessibilityService,int)> -> _SINK_
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)> -> _SINK_
<android.webkit.CallbackProxy: void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)> -> _SINK_
<android.filterfw.core.StopWatchMap: void start(java.lang.String)> -> _SINK_
<android.content.res.Resources: void setCompatibilityInfo(android.content.res.CompatibilityInfo)> -> _SINK_
<com.android.server.PowerManagerService: void setMaximumScreenOffTimeount(int)> -> _SINK_
<android.view.animation.Animation: void setStartOffset(long)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(int,java.lang.Object)> -> _SINK_
<android.graphics.ColorMatrix: void preConcat(android.graphics.ColorMatrix)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(int)> -> _SINK_
<android.filterfw.core.VertexFrame: void setInts(int[])> -> _SINK_
<android.net.http.Connection: void setCanPersist(boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setWallpaperPosition(android.os.IBinder,float,float,float,float)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setAlpha(int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void clearUserActivityTimeout(long,long)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void stopAccessPoint(java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void writeExternal(java.io.ObjectOutput)> -> _SINK_
<android.preference.Preference: void restoreHierarchyState(android.os.Bundle)> -> _SINK_
<android.app.ContextImpl: boolean stopService(android.content.Intent)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppWillBeHidden(android.os.IBinder)> -> _SINK_
<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)> -> _SINK_
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)> -> _SINK_
<android.webkit.WebSettings: void setUseWideViewPort(boolean)> -> _SINK_
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)> -> _SINK_
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)> -> _SINK_
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setTag(java.lang.Object)> -> _SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: void setCallback(java.lang.String,android.speech.tts.ITextToSpeechCallback)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)> -> _SINK_
<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.SharedPreferencesImpl$MemoryCommitResult: void setDiskWriteResult(boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void addSQLiteClosable(android.database.sqlite.SQLiteClosable)> -> _SINK_
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)> -> _SINK_
<android.filterfw.core.Frame: void setObjectValue(java.lang.Object)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setSupportsBearing(boolean)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)> -> _SINK_
<com.android.internal.util.StateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)> -> _SINK_
<android.view.View: void setScrollContainer(boolean)> -> _SINK_
<android.app.Instrumentation: void sendCharacterSync(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> -> _SINK_
<android.content.SyncQueue: boolean add(android.content.SyncOperation)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setSelection(int,int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void userActivityWithForce(long,boolean,boolean)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setFloats(float[])> -> _SINK_
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setTheme(int)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void setForceShowIcon(boolean)> -> _SINK_
<android.view.animation.AnimationSet: void setFillBefore(boolean)> -> _SINK_
<android.graphics.Canvas: void setScreenDensity(int)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setText(int)> -> _SINK_
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setPrefix(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.AbsListView: void setSelector(int)> -> _SINK_
<android.app.WallpaperManager: void setResource(int)> -> _SINK_
<android.widget.TextView: void setHeight(int)> -> _SINK_
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)> -> _SINK_
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(int)> -> _SINK_
<android.widget.TextView: void sendAccessibilityEvent(int)> -> _SINK_
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> -> _SINK_
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)> -> _SINK_
<android.view.ActionMode: void setTag(java.lang.Object)> -> _SINK_
<android.content.Intent: void readFromParcel(android.os.Parcel)> -> _SINK_
<com.android.server.PowerManagerService: void setStayOnSetting(int)> -> _SINK_
<android.graphics.drawable.AnimationDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)> -> _SINK_
<android.app.ActivityManagerProxy: boolean unbindService(android.app.IServiceConnection)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.widget.ProgressBar$SavedState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.app.IUsageStats$Stub$Proxy: void noteLaunchTime(android.content.ComponentName,int)> -> _SINK_
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)> -> _SINK_
<android.widget.TextView: void setMinWidth(int)> -> _SINK_
<com.android.server.MountService: void access$1100(com.android.server.MountService,boolean)> -> _SINK_
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeSummaryToParcel(android.os.Parcel)> -> _SINK_
<android.webkit.WebSettings: void setSaveFormData(boolean)> -> _SINK_
<android.location.ICountryDetector$Stub$Proxy: void addCountryListener(android.location.ICountryListener)> -> _SINK_
<android.widget.OverScroller$SplineOverScroller: void notifyEdgeReached(int,int,int)> -> _SINK_
<android.app.IActivityManager$ContentProviderHolder: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void accessoryDetached(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.content.Intent: android.content.Intent setFlags(int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAppWillBeHidden(android.os.IBinder)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: void readExternal(java.io.ObjectInput)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void unregisterListener(android.os.storage.IMountServiceListener)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newUpdateOperation(android.net.Uri,byte[])> -> _SINK_
<android.content.ContentQueryMap: void setKeepUpdated(boolean)> -> _SINK_
<android.os.IPermissionController$Stub$Proxy: boolean checkPermission(java.lang.String,int,int)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.app.ProgressDialog: void setProgressNumberFormat(java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void cursorStringToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.app.Activity: void setParent(android.app.Activity)> -> _SINK_
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.AbsListView: void setItemChecked(int,boolean)> -> _SINK_
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)> -> _SINK_
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])> -> _SINK_
<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean lineStart(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.widget.OverScroller: void setFriction(float)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int decryptStorage(java.lang.String)> -> _SINK_
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)> -> _SINK_
<android.app.backup.RestoreObserver: void restoreStarting(int)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int)> -> _SINK_
<android.graphics.drawable.AnimationDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.server.BluetoothInputProfileHandler: void setInitialInputDevicePriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<com.android.server.am.ActivityRecord: void addResultLocked(com.android.server.am.ActivityRecord,java.lang.String,int,int,android.content.Intent)> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Fragment,android.content.Intent,int)> -> _SINK_
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)> -> _SINK_
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> android.permission.ACCESS_COARSE_LOCATION -> _SINK_
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)> -> _SINK_
<com.android.server.pm.PackageManagerService$DumpState: void setSharedUser(com.android.server.pm.SharedUserSetting)> -> _SINK_
<android.graphics.drawable.ClipDrawable: boolean onStateChange(int[])> -> _SINK_
<android.view.View: void setActivated(boolean)> -> _SINK_
<android.widget.TextView: void setText(char[],int,int)> -> _SINK_
<android.widget.ScrollBarDrawable: void setAlpha(int)> -> _SINK_
<com.android.server.NotificationManagerService: void enqueueNotificationInternal(java.lang.String,int,int,java.lang.String,int,int,android.app.Notification,int[])> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean isProtectedBroadcast(java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)> -> _SINK_
<android.filterfw.io.PatternScanner: java.lang.String tryEat(java.util.regex.Pattern)> -> _SINK_
<android.app.Service: int onStartCommand(android.content.Intent,int,int)> -> _SINK_
<android.widget.AbsListView: void setOverScrollEffectPadding(int,int)> -> _SINK_
<android.view.animation.Animation: void setDuration(long)> -> _SINK_
<com.android.internal.view.menu.ActionMenuView: void setPresenter(com.android.internal.view.menu.ActionMenuPresenter)> -> _SINK_
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)> -> _SINK_
<android.net.wifi.NetworkUpdateResult: void setNetworkId(int)> -> _SINK_
<com.android.server.pm.Settings$1: void dumpFilter(java.io.PrintWriter,java.lang.String,com.android.server.pm.PreferredActivity)> -> _SINK_
<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])> -> _SINK_
<android.widget.ProgressBar: void setSecondaryProgress(int)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setShortcutsVisible(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void unregisterReceiver(android.content.IIntentReceiver)> -> _SINK_
<android.widget.FrameLayout: void setForeground(android.graphics.drawable.Drawable)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleSendResult(android.os.IBinder,java.util.List)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setHdmiPlugged(boolean)> -> _SINK_
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountSecureContainer(java.lang.String,java.lang.String,int)> -> _SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])> -> _SINK_
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> -> _SINK_
<android.view.View: void setPaddingRelative(int,int,int,int)> -> _SINK_
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.AppWidgetService: boolean writeStateToFileLocked(java.io.FileOutputStream)> -> _SINK_
<android.util.IntProperty: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.widget.SearchView$SearchAutoComplete: void setThreshold(int)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setDataSource(android.content.Context,android.net.Uri)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SINK_
<android.location.Criteria: void setAltitudeRequired(boolean)> -> _SINK_
<android.app.ProgressDialog: void setProgressStyle(int)> -> _SINK_
<android.widget.ProgressBar: void setVisibility(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void setIsGroupOwner(boolean)> -> _SINK_
<android.text.method.DialerKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)> -> _SINK_
<android.content.pm.PackageParser$PermissionGroup: void setPackageName(java.lang.String)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setKeyboardMode(int)> -> _SINK_
<android.filterfw.core.FilterGraph: void setDiscardUnconnectedOutputs(boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isSecureContainerMounted(java.lang.String)> -> _SINK_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)> -> _SINK_
<android.os.storage.StorageManager$ListenerDelegate: void sendShareAvailabilityChanged(boolean)> -> _SINK_
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> android.permission.RECORD_AUDIO -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void pauseKeyDispatching(android.os.IBinder)> -> _SINK_
<android.text.PackedIntVector: void setValue(int,int,int)> -> _SINK_
<android.widget.AdapterView: void setEmptyView(android.view.View)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)> -> _SINK_
<android.widget.AdapterViewAnimator: void setOutAnimation(android.animation.ObjectAnimator)> -> _SINK_
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> -> _SINK_
<com.android.server.StatusBarManagerService: android.os.IBinder addNotification(com.android.internal.statusbar.StatusBarNotification)> -> _SINK_
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void setHelpMessage(int,int)> -> _SINK_
<android.filterfw.core.Filter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setExtractView(android.view.View)> -> _SINK_
<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void registerListener(android.os.storage.IMountServiceListener)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void toggleSoftInput(int,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)> -> _SINK_
<android.filterfw.core.GLFrame: void setFloats(float[])> -> _SINK_
<android.text.style.TextAppearanceSpan: void updateMeasureState(android.text.TextPaint)> -> _SINK_
<android.view.View: void setRotationX(float)> -> _SINK_
<android.view.View: void setAlpha(float)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar$OnNavigationListener)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setGradientCenter(float,float)> -> _SINK_
<android.view.KeyEvent: void setSource(int)> -> _SINK_
<android.webkit.WebSettings: void setAutoFillProfile(android.webkit.WebSettings$AutoFillProfile)> -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])> -> _SINK_
<android.widget.AbsListView: int access$2200(android.widget.AbsListView)> -> _SINK_
<android.widget.TextView: void setSelected(boolean)> -> _SINK_
<android.os.BatteryStats$HistoryItem: void writeDelta(android.os.Parcel,android.os.BatteryStats$HistoryItem)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setInTouchMode(boolean)> -> _SINK_
<android.widget.AdapterView: void setNextSelectedPositionInt(int)> -> _SINK_
<android.location.Address: void setSubAdminArea(java.lang.String)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String)> -> _SINK_
<android.webkit.WebView: void setTitleBarGravity(int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)> -> _SINK_
<android.util.LongSparseArray: void setValues(long[],java.lang.Object)> -> _SINK_
<com.android.server.location.GpsLocationProvider: void updateNetworkState(int,android.net.NetworkInfo)> -> _SINK_
<android.widget.AbsListView: void setTranscriptMode(int)> -> _SINK_
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> -> _SINK_
<com.android.server.PowerManagerService: void setPokeLock(int,android.os.IBinder,java.lang.String)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setSupportsAltitude(boolean)> -> _SINK_
<android.app.ContextImpl: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)> -> _SINK_
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)> -> _SINK_
<android.media.MediaPlayer: int setMetadataFilter(java.util.Set,java.util.Set)> -> _SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setOutboundProxy(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.lang.Object newResult(android.content.IntentFilter,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)> -> _SINK_
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setExampleNumber(java.lang.String)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore(boolean)> -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void plugRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<android.app.ActivityManagerProxy: int checkPermission(java.lang.String,int,int)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)> -> _SINK_
<com.android.ex.variablespeed.VariableSpeed: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)> -> _SINK_
<android.net.WebAddress: void setAuthInfo(java.lang.String)> -> _SINK_
<android.location.Address: void setAdminArea(java.lang.String)> -> _SINK_
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)> -> _SINK_
<android.view.Window: void setDimAmount(float)> -> _SINK_
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownAlwaysVisible(boolean)> -> _SINK_
<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setFocusedApp(android.os.IBinder,boolean)> -> _SINK_
<android.webkit.WebSettings: void setSyntheticLinksEnabled(boolean)> -> _SINK_
<android.widget.AutoCompleteTextView: void setForceIgnoreOutsideTouch(boolean)> -> _SINK_
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.server.DevicePolicyManagerService$ActiveAdmin: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setUseLevel(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncEnableNetwork(com.android.internal.util.AsyncChannel,int,boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)> -> _SINK_
<android.graphics.drawable.ClipDrawable: void setAlpha(int)> -> _SINK_
<android.content.Intent: void setAllowFds(boolean)> -> _SINK_
<android.widget.RelativeLayout: void setVerticalGravity(int)> -> _SINK_
<android.inputmethodservice.InputMethodService: boolean sendDefaultEditorAction(boolean)> -> _SINK_
<android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCameraDisabled(android.content.ComponentName,boolean)> -> _SINK_
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> -> _SINK_
<com.android.server.wm.AppWindowToken: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)> -> _SINK_
<android.content.IIntentSender$Stub$Proxy: int send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String)> -> _SINK_
<android.os.TokenWatcher: int access$100(android.os.TokenWatcher)> -> _SINK_
<android.net.NetworkPolicyManager: void dumpPolicy(java.io.PrintWriter,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewBase$1: void setAlpha(int)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setSupportsSpeed(boolean)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: void setGrant(int,java.lang.String,boolean)> -> _SINK_
<android.widget.Spinner: void setGravity(int)> -> _SINK_
<android.view.ViewRootImpl: void dispatchKey(android.view.KeyEvent)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)> -> _SINK_
<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)> -> _SINK_
<com.android.server.sip.SipService$SipSessionGroupExt: void setWakeupTimer(com.android.server.sip.SipWakeupTimer)> -> _SINK_
<android.security.KeyStore: boolean put(java.lang.String,byte[])> -> _SINK_
<android.app.Activity: void dispatchActivityResult(java.lang.String,int,int,android.content.Intent)> -> _SINK_
<android.net.http.HttpsConnection: void setCertificate(android.net.http.SslCertificate)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)> -> _SINK_
<android.net.NetworkInfo: void setSubtype(int,java.lang.String)> -> _SINK_
<android.graphics.RectF: void set(android.graphics.Rect)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> -> _SINK_
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setType(int)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int changeEncryptionPassword(java.lang.String)> -> _SINK_
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)> -> _SINK_
<android.app.ActivityManagerProxy: boolean willActivityBeVisible(android.os.IBinder)> -> _SINK_
<android.graphics.Matrix: void setRotate(float,float,float)> -> _SINK_
<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)> -> _SINK_
<android.graphics.Matrix: void setValues(float[])> -> _SINK_
<android.app.ActivityManagerProxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)> -> _SINK_
<android.view.ViewRootImpl: void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo)> -> _SINK_
<android.app.ApplicationThreadProxy: void dispatchPackageBroadcast(int,java.lang.String[])> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDefaults(java.lang.String)> -> _SINK_
<android.app.ProgressDialog: void setProgressPercentFormat(java.text.NumberFormat)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setAlpha(int)> -> _SINK_
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)> -> _SINK_
<com.android.server.PowerManagerService$BrightnessState: void setTargetLocked(int,int,int,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)> -> _SINK_
<android.widget.TextView: void setInputExtras(int)> -> _SINK_
<android.webkit.WebView$WebViewTransport: void setWebView(android.webkit.WebView)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setStroke(int,int,float,float)> -> _SINK_
<android.widget.AbsListView: void setCacheColorHint(int)> -> _SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)> -> _SINK_
<android.widget.RemoteViews: void setScrollPosition(int,int)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable$GradientState: void setShape(int)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStateChanged(java.lang.String,boolean)> -> _SINK_
<android.widget.PopupWindow: void setContentView(android.view.View)> -> _SINK_
<android.app.ActivityManagerProxy: void killBackgroundProcesses(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProtocol(java.lang.String)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)> -> _SINK_
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor)> -> _SINK_
<com.android.vcard.VCardProperty: void setByteValue(byte[])> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInput(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,boolean,boolean)> -> _SINK_
<android.preference.Preference: void setIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.view.VelocityTracker: void setPooled(boolean)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)> -> _SINK_
<com.android.server.AppWidgetService: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)> -> _SINK_
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<com.android.server.WifiService: void setFrequencyBand(int,boolean)> -> _SINK_
<android.webkit.HTML5VideoView: void setVideoURI(java.lang.String,android.webkit.HTML5VideoViewProxy)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> -> _SINK_
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)> -> _SINK_
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)> -> _SINK_
<android.graphics.drawable.ColorDrawable: void setAlpha(int)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setInstallerPackageName(java.lang.String,java.lang.String)> -> _SINK_
<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)> -> _SINK_
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.os.WorkSource: void set(int)> -> _SINK_
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)> -> _SINK_
<android.app.ProgressDialog: void setMax(int)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.View$7: void setValue(java.lang.Object,float)> -> _SINK_
<android.os.Parcel: void writeByte(byte)> -> _SINK_
<com.android.vcard.VCardProperty: void setRawValue(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void addActivity(android.content.pm.PackageParser$Activity,java.lang.String)> -> _SINK_
<android.view.GLES20RenderLayer: void setTransform(android.graphics.Matrix)> -> _SINK_
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)> -> _SINK_
<android.os.RecoverySystem: void verifyPackage(java.io.File,android.os.RecoverySystem$ProgressListener,java.io.File)> -> _SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onError(java.lang.String)> -> _SINK_
<com.android.internal.util.XmlUtils: java.util.HashMap readThisMapXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])> -> _SINK_
<android.filterfw.core.FilterPort: void checkFrameType(android.filterfw.core.Frame,boolean)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: void setRowDelay(float)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setChecked(boolean)> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void accessoryAttached(android.hardware.usb.UsbAccessory)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SINK_
<com.android.server.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setVisibility(int)> -> _SINK_
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)> -> _SINK_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)> -> _SINK_
<android.text.SpannableStringInternal: int nextSpanTransition(int,int,java.lang.Class)> -> _SINK_
<com.android.server.InputMethodManagerService: void setEnabledSessionInMainThread(com.android.server.InputMethodManagerService$SessionState)> -> _SINK_
<android.webkit.WebView: void setTouchInterval(int)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderTitle(int)> -> _SINK_
<android.view.IWindow$Stub$Proxy: void resized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)> -> _SINK_
<android.graphics.Matrix: void setScale(float,float,float,float)> -> _SINK_
<android.view.animation.Transformation: void setAlpha(float)> -> _SINK_
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean updateWallpaperOffsetLocked(com.android.server.wm.WindowState,int,int,boolean)> -> _SINK_
<android.view.LayoutInflater$BlinkLayout: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)> -> _SINK_
<android.filterfw.core.GLFrame: void setViewport(android.graphics.Rect)> -> _SINK_
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)> -> _SINK_
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)> -> _SINK_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setAllowedNetworkTypes(int)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bindNull(int)> -> _SINK_
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Float)> -> _SINK_
<android.net.wifi.WifiConfigStore: void selectNetwork(int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.HTML5VideoView: void setOnCompletionListener(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<android.widget.AdapterView: void addView(android.view.View)> -> _SINK_
<android.widget.ImageView: void setImageLevel(int)> -> _SINK_
<com.android.server.AppWidgetService: void updateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long)> -> _SINK_
<android.widget.PopupWindow$PopupViewContainer: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)> -> _SINK_
<android.webkit.LoadListener: void setRequestData(java.lang.String,java.util.Map,byte[])> -> _SINK_
<android.filterfw.core.Filter: void setInputValue(java.lang.String,java.lang.Object)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayHomeAsUpEnabled(boolean)> -> _SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> -> _SINK_
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)> -> _SINK_
<android.app.ActivityThread$Profiler: void setProfiler(java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.server.WifiService: void startScan(boolean)> -> _SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)> -> _SINK_
<android.widget.PopupWindow: void update(android.view.View,int,int)> -> _SINK_
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.preference.GenericInflater: java.lang.Object onCreateItem(java.lang.String,android.util.AttributeSet)> -> _SINK_
<android.hardware.Camera$Parameters: void setZoom(int)> -> _SINK_
<android.widget.ListPopupWindow: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _SINK_
<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)> -> _SINK_
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SINK_
<com.android.server.sip.SipHelper: javax.sip.ClientTransaction sendInvite(android.net.sip.SipProfile,android.net.sip.SipProfile,java.lang.String,java.lang.String,gov.nist.javax.sip.header.extensions.ReferredByHeader,java.lang.String)> -> _SINK_
<com.android.vcard.VCardParserImpl_V30: boolean readBeginVCard(boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountVolume(java.lang.String)> -> _SINK_
<android.app.IProcessObserver$Stub$Proxy: void onProcessDied(int,int)> -> _SINK_
<android.widget.AbsListView: void setFilterText(java.lang.String)> -> _SINK_
<android.view.View$10: void setValue(android.view.View,float)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)> -> _SINK_
<android.util.Xml: void parse(java.io.InputStream,android.util.Xml$Encoding,org.xml.sax.ContentHandler)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[])> -> _SINK_
<android.view.animation.AnimationSet: void setRepeatMode(int)> -> _SINK_
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)> android.permission.VIBRATE -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleSleeping(android.os.IBinder,boolean)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void setBtHeadset(android.bluetooth.BluetoothHeadset)> -> _SINK_
<android.net.wifi.WifiStateMachine$ScanModeState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int,int)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SINK_
<com.android.server.wm.InputManager: void dump(java.io.PrintWriter)> -> _SINK_
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)> -> _SINK_
<com.android.server.InputMethodManagerService$3: int compare(android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodInfo)> -> _SINK_
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> -> _SINK_
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.preference.Preference: void setLayoutResource(int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> -> _SINK_
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)> -> _SINK_
<com.android.server.location.MockProvider: void setStatus(int,android.os.Bundle,long)> -> _SINK_
<android.widget.TextView: void setLineSpacing(float,float)> -> _SINK_
<com.android.internal.util.XmlUtils: void writeSetXml(java.util.Set,java.lang.String,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean deleteCaCertificate(java.lang.String)> -> _SINK_
<android.view.SurfaceView$4: void setFixedSize(int,int)> -> _SINK_
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.UserInfo createUser(java.lang.String,int)> -> _SINK_
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs: com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs fromIntent(android.content.Intent)> -> _SINK_
<android.widget.TextView: void setMinHeight(int)> -> _SINK_
<android.os.Parcel: void writeException(java.lang.Exception)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> -> _SINK_
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)> -> _SINK_
<android.widget.ScrollBarDrawable: void drawThumb(android.graphics.Canvas,android.graphics.Rect,int,int,boolean)> -> _SINK_
<android.view.inputmethod.InputMethodManager$1: void setUsingInputMethod(boolean)> -> _SINK_
<com.android.server.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)> -> _SINK_
<android.graphics.drawable.RotateDrawable: boolean onStateChange(int[])> -> _SINK_
<android.view.View: void setSoundEffectsEnabled(boolean)> -> _SINK_
<android.graphics.drawable.RotateDrawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)> -> _SINK_
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)> -> _SINK_
<android.net.wifi.WifiInfo: void setExplicitConnect(boolean)> -> _SINK_
<android.widget.RemoteViews: void setIsWidgetCollectionChild(boolean)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData: void set(android.widget.RemoteViews,long,boolean)> -> _SINK_
<android.view.animation.GridLayoutAnimationController: void setDirectionPriority(int)> -> _SINK_
<android.telephony.SignalStrength: android.telephony.SignalStrength newFromBundle(android.os.Bundle)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> -> _SINK_
<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfosResult(java.util.List,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void stopAppFreezingScreen(android.os.IBinder,boolean)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<com.android.internal.statusbar.StatusBarIconList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.view.BaseIWindow: void setSession(android.view.IWindowSession)> -> _SINK_
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setRawInput(java.lang.String)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,byte[])> -> _SINK_
<android.media.AudioManager: void setStreamVolume(int,int,int)> -> _SINK_
<android.webkit.WebView$1: void onPostExecute(java.util.Set)> -> _SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)> -> _SINK_
<android.content.Intent: android.content.Intent setType(java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<android.view.ViewGroup: void dispatchSetPressed(boolean)> -> _SINK_
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<com.android.internal.widget.ScrollingTabContainerView: void setTabSelected(int)> -> _SINK_
<android.database.BulkCursorProxy: void onMove(int)> -> _SINK_
<android.widget.TextView$SelectionEndHandleView: void updateSelection(int)> -> _SINK_
<android.webkit.WebSettings: void setPageCacheCapacity(int)> -> _SINK_
<android.location.Criteria: void setAccuracy(int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)> -> _SINK_
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> -> _SINK_
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)> -> _SINK_
<android.view.IRotationWatcher$Stub$Proxy: void onRotationChanged(int)> -> _SINK_
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)> -> _SINK_
<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,android.content.Intent)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setSourceRect(float,float,float,float)> -> _SINK_
<com.android.server.location.LocationProviderProxy: void updateNetworkState(int,android.net.NetworkInfo)> -> _SINK_
<android.view.View: boolean setFrame(int,int,int,int)> -> _SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)> -> _SINK_
<android.widget.AbsListView: void smoothScrollToPosition(int,int)> -> _SINK_
<android.widget.ArrayAdapter: void setDropDownViewResource(int)> -> _SINK_
<android.graphics.drawable.ScaleDrawable: boolean onLevelChange(int)> -> _SINK_
<android.filterfw.core.StreamPort: void setFrame(android.filterfw.core.Frame)> -> _SINK_
<android.widget.OverScroller: void notifyHorizontalEdgeReached(int,int,int)> -> _SINK_
<com.android.server.PowerManagerService$BrightnessState: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.view.GLES20Canvas: void drawLines(float[],int,int,android.graphics.Paint)> -> _SINK_
<android.view.ViewRootImpl: int enqueuePendingEvent(java.lang.Object,boolean)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setNavigationMode(int)> -> _SINK_
<android.widget.FastScroller: void setScrollbarPosition(int)> -> _SINK_
<android.view.animation.AnimationSet: void setFillAfter(boolean)> -> _SINK_
<android.widget.Spinner: void setEnabled(boolean)> -> _SINK_
<android.view.textservice.TextServicesManager: void setSpellCheckerSubtype(android.view.textservice.SpellCheckerSubtype)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentDisconnected(java.lang.String)> -> _SINK_
<android.webkit.WebStorage$2: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setUsingInputMethod(boolean)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAppOrientation(android.view.IApplicationToken,int)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)> -> _SINK_
<com.android.server.pm.PackageManagerService: boolean addPermissionAsync(android.content.pm.PermissionInfo)> -> _SINK_
<com.android.server.wm.InputManager: void setFocusedApplication(com.android.server.wm.InputApplicationHandle)> -> _SINK_
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$Tab setCustomView(int)> -> _SINK_
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)> -> _SINK_
<android.view.View: void initializeScrollbars(android.content.res.TypedArray)> -> _SINK_
<android.webkit.WebSettings: void setShowVisualIndicator(boolean)> -> _SINK_
<android.content.pm.PackageParser$Activity: void setPackageName(java.lang.String)> -> _SINK_
<android.preference.Preference: void setOrder(int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleCrash(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setMinimumFontSize(int)> -> _SINK_
<android.view.textservice.TextServicesManager: void setSpellCheckerEnabled(boolean)> -> _SINK_
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)> -> _SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)> -> _SINK_
<android.text.TextPaint: void setUnderlineText(int,float)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.app.ContextImpl: void startActivity(android.content.Intent)> -> _SINK_
<android.webkit.WebTextView: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<com.android.server.AppWidgetService: void addProvidersForPackageLocked(java.lang.String)> -> _SINK_
<com.android.server.pm.PackageManagerService$SdInstallArgs: boolean matchContainer(java.lang.String)> -> _SINK_
<android.widget.AbsListView: void sendAccessibilityEvent(int)> -> _SINK_
<android.webkit.Plugin: void setClickHandler(android.webkit.Plugin$PreferencesClickHandler)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextAfterCursor(java.lang.CharSequence,int)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> -> _SINK_
<android.webkit.WebTextView$BackgroundDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.content.ContextWrapper: boolean stopService(android.content.Intent)> -> _SINK_
<com.android.internal.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)> -> _SINK_
<android.widget.AutoCompleteTextView: void setDropDownAnchor(int)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,long)> -> _SINK_
<com.android.server.AppWidgetService: void deleteAppWidgetLocked(com.android.server.AppWidgetService$AppWidgetId)> -> _SINK_
<android.location.Address: void setThoroughfare(java.lang.String)> -> _SINK_
<android.app.NotificationManager: void notify(int,android.app.Notification)> -> _SINK_
<android.graphics.drawable.Drawable: void setDither(boolean)> -> _SINK_
<android.widget.ExpandableListConnector: void setExpandedGroupMetadataList(java.util.ArrayList)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setContextView(com.android.internal.widget.ActionBarContextView)> -> _SINK_
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)> -> _SINK_
<android.view.ViewTreeObserver$InternalInsetsInfo: void setTouchableInsets(int)> -> _SINK_
<android.view.View: void setScrollY(int)> -> _SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderDisabled(java.lang.String)> -> _SINK_
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void crash(java.lang.String)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensionCount(int)> -> _SINK_
<android.server.BluetoothDeviceProperties: java.util.Map addProperties(java.lang.String,java.lang.String[])> -> _SINK_
<android.os.ServiceManager: void initServiceCache(java.util.Map)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setEnabled(boolean)> -> _SINK_
<com.android.server.usb.UsbService: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<android.text.format.Time: long setJulianDay(int)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidSignatures(int,int)> -> _SINK_
<android.webkit.WebSettings: void setProperty(java.lang.String,java.lang.String)> -> _SINK_
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)> -> _SINK_
<android.net.wifi.WifiInfo: void setHiddenSSID(boolean)> -> _SINK_
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_
<android.widget.TextView: void setTextAppearance(android.content.Context,int)> -> _SINK_
<com.android.server.pm.PackageVerificationState: void addSufficientVerifier(int)> -> _SINK_
<android.webkit.WebSettings: void setAppCacheMaxSize(long)> -> _SINK_
<android.app.ActivityManagerProxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String)> -> _SINK_
<android.widget.PopupWindow: void setLayoutInsetDecor(boolean)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void hideMySoftInput(android.os.IBinder,int)> -> _SINK_
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)> -> _SINK_
<android.view.View: void setRotation(float)> -> _SINK_
<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)> -> _SINK_
<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void removeContentProvider(android.app.IApplicationThread,java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewMediator: void setHidden(boolean)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> -> _SINK_
<android.widget.AbsListView: void setChoiceMode(int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void displayCompletions(android.view.inputmethod.CompletionInfo[])> -> _SINK_
<android.app.Activity: void setRequestedOrientation(int)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(int)> -> _SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setAllMetadata(int,android.os.Bundle,android.graphics.Bitmap)> -> _SINK_
<android.view.View: boolean dispatchPointerEvent(android.view.MotionEvent)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupProvisioned(boolean)> -> _SINK_
<com.android.server.EventLogTags: void writeFreeStorageChanged(long)> -> _SINK_
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setHoldScreenLocked(boolean)> -> _SINK_
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)> -> _SINK_
<com.android.server.InputMethodManagerService: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<android.location.Location: void setSpeed(float)> -> _SINK_
<android.view.View$8: void setValue(android.view.View,float)> -> _SINK_
<android.widget.Spinner: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SINK_
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)> -> _SINK_
<android.server.BluetoothService: boolean setPin(java.lang.String,byte[])> -> _SINK_
<com.android.vcard.VCardComposer: void setPhoneNumberTranslationCallback(com.android.vcard.VCardPhoneNumberTranslationCallback)> -> _SINK_
<android.net.sip.SipAudioCall: void setAudioGroup(android.net.rtp.AudioGroup)> -> _SINK_
<android.net.wifi.WifiStateMachine: int syncAddOrUpdateNetwork(com.android.internal.util.AsyncChannel,android.net.wifi.WifiConfiguration)> -> _SINK_
<com.android.server.am.ActivityStack: int startActivities(android.app.IApplicationThread,int,android.content.Intent[],java.lang.String[],android.os.IBinder)> -> _SINK_
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.util.List,android.content.ComponentName,java.lang.String,android.os.ParcelFileDescriptor,boolean,android.os.Bundle,android.app.IInstrumentationWatcher,int,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle)> -> _SINK_
<android.graphics.drawable.Drawable: boolean setLevel(int)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)> -> _SINK_
<android.view.ViewRootImpl$W: void dispatchSystemUiVisibilityChanged(int,int,int,int)> -> _SINK_
<android.net.NetworkInfo: void setFailover(boolean)> -> _SINK_
<android.media.AudioService: void playSoundEffect(int)> -> _SINK_
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)> -> _SINK_
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setCandidatesView(android.view.View)> -> _SINK_
<android.view.ViewRootImpl: void setView(android.view.View,android.view.WindowManager$LayoutParams,android.view.View)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void beginLayoutLw(int,int,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void registerStatusBar(com.android.internal.statusbar.IStatusBar,com.android.internal.statusbar.StatusBarIconList,java.util.List,java.util.List,int[],java.util.List)> -> _SINK_
<com.android.server.AppWidgetService: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.widget.TextView: void setCompoundDrawablePadding(int)> -> _SINK_
<com.android.internal.view.menu.ActionMenuView: void setOverflowReserved(boolean)> -> _SINK_
<android.preference.Preference: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsTimestamp(long)> -> _SINK_
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)> -> _SINK_
<android.view.View: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)> -> _SINK_
<com.android.server.sip.SipService$AutoRegistrationProcess: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<android.view.View: void setSaveEnabled(boolean)> -> _SINK_
<android.media.RingtoneManager: void setStopPreviousRingtone(boolean)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(int)> -> _SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)> -> _SINK_
<android.location.Location: void setTime(long)> -> _SINK_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)> -> _SINK_
<com.android.server.WifiService$AsyncServiceHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.view.WindowManagerImpl: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.widget.ImageView: void setSelected(boolean)> -> _SINK_
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)> -> _SINK_
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleStopActivity(android.os.IBinder,boolean,int)> -> _SINK_
<android.util.PrintWriterPrinter: void println(java.lang.String)> -> _SINK_
<android.widget.RemoteViews$SetOnClickPendingIntent$1: void onClick(android.view.View)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)> -> _SINK_
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> android.permission.GLOBAL_SEARCH -> _SINK_
<android.filterfw.core.Frame: void setFormat(android.filterfw.core.FrameFormat)> -> _SINK_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)> -> _SINK_
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)> -> _SINK_
<android.widget.PopupWindow: void update(int,int,int,int,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void setFrontActivityScreenCompatMode(int)> -> _SINK_
<android.view.animation.AnimationSet: void setStartTime(long)> -> _SINK_
<android.os.Parcel: void writeFloatArray(float[])> -> _SINK_
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)> -> _SINK_
<android.media.AudioService$VolumeStreamState: void setLastAudibleIndex(int)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setExtractViewShown(boolean)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> -> _SINK_
<android.location.Address: void setExtras(android.os.Bundle)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsTag(int)> -> _SINK_
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)> -> _SINK_
<com.android.internal.policy.impl.LockPatternKeyguardView: void access$100(com.android.internal.policy.impl.LockPatternKeyguardView,com.android.internal.policy.impl.LockPatternKeyguardView$Mode,boolean)> -> _SINK_
<android.widget.HorizontalScrollView: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.os.Parcel: void writeSerializable(java.io.Serializable)> -> _SINK_
<android.app.IUiModeManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.inputmethodservice.ExtractEditText: void setIME(android.inputmethodservice.InputMethodService)> -> _SINK_
<com.android.server.ConnectivityService: void setNetworkPreference(int)> android.permission.BLUETOOTH -> _SINK_
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredExtnPrefix(java.lang.String)> -> _SINK_
<android.app.IAlarmManager$Stub$Proxy: void setInexactRepeating(int,long,long,android.app.PendingIntent)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)> -> _SINK_
<android.content.IIntentSender$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.view.ViewGroup: void measureChildren(int,int)> -> _SINK_
<com.android.server.net.NetworkIdentitySet: void writeToStream(java.io.DataOutputStream)> -> _SINK_
<android.view.SurfaceView$4: void setFormat(int)> -> _SINK_
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetwork(int,boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setLastSqlStatement(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void moveTaskToFront(int,int)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivityInPackage(int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,boolean)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.graphics.RectF: void set(float,float,float,float)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: void setContentHeight(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> -> _SINK_
<com.android.server.DevicePolicyManagerService$ActiveAdmin: void writeToXml(org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.content.pm.PackageParser$Service: void setPackageName(java.lang.String)> -> _SINK_
<android.graphics.drawable.ColorDrawable: void setColor(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder)> -> _SINK_
<android.widget.LinearLayout: void setWeightSum(float)> -> _SINK_
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$7400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,int)> -> _SINK_
<android.view.Window: void addFlags(int)> -> _SINK_
<com.android.server.am.AppBindRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.animation.Keyframe: void setFraction(float)> -> _SINK_
<android.widget.SearchView: void setMaxWidth(int)> -> _SINK_
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)> -> _SINK_
<android.widget.TextView: void setMinEms(int)> -> _SINK_
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setColor(int)> -> _SINK_
<com.android.server.usb.UsbDeviceManager$1: void onUEvent(android.os.UEventObserver$UEvent)> -> _SINK_
<android.preference.Preference: void setSelectable(boolean)> -> _SINK_
<android.server.BluetoothBondState: void setPendingOutgoingBonding(java.lang.String)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setHardKeyboardEnabled(boolean)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean down(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.filterfw.core.Filter: void parametersUpdated(java.util.Set)> -> _SINK_
<android.preference.PreferenceGroup: void dispatchSaveInstanceState(android.os.Bundle)> -> _SINK_
<android.widget.AbsListView: boolean onInterceptTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setEventDispatching(boolean)> -> _SINK_
<android.app.IActivityManager$WaitResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: boolean processMessage(android.os.Message)> -> _SINK_
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityStarting(android.content.Intent,java.lang.String)> -> _SINK_
<android.net.WebAddress: void setScheme(java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setSealed(boolean)> -> _SINK_
<android.webkit.LoadListener: void setCacheLoader(android.webkit.CacheLoader)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.widget.TextView$SuggestionsPopupWindow: int clipVertically(int)> -> _SINK_
<android.widget.AbsListView: int access$3200(android.widget.AbsListView)> -> _SINK_
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.graphics.Matrix$1: void setSkew(float,float)> -> _SINK_
<android.widget.ImageView: void setMaxHeight(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setUan(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)> -> _SINK_
<android.content.BroadcastReceiver: void setResultCode(int)> -> _SINK_
<android.graphics.Rect: void set(int,int,int,int)> -> _SINK_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.media.AudioService: void playSoundEffectVolume(int,float)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.Activity: void setImmersive(boolean)> -> _SINK_
<android.webkit.WebHistoryItem: void setFavicon(android.graphics.Bitmap)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingDigits(java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setAllowFileAccess(boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void findAccessibilityNodeInfosByViewText(java.lang.String,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> -> _SINK_
<android.hardware.Camera$Parameters: void setExposureCompensation(int)> -> _SINK_
<android.os.AsyncTask: void publishProgress(java.lang.Object[])> -> _SINK_
<android.widget.MediaController: void show(int)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: int appNotResponding(java.lang.String,int,java.lang.String)> -> _SINK_
<android.widget.Scroller: void setFriction(float)> -> _SINK_
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])> -> _SINK_
<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(android.graphics.drawable.Drawable)> -> _SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)> -> _SINK_
<android.graphics.Picture$RecordingCanvas: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.media.AudioManager: void setVibrateSetting(int,int)> -> _SINK_
<com.android.server.EventLogTags: void writeBackupStart(java.lang.String)> -> _SINK_
<android.widget.TextView$HandleView: void positionAtCursorOffset(int,boolean)> -> _SINK_
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)> -> _SINK_
<android.animation.AnimatorSet: android.animation.AnimatorSet setDuration(long)> -> _SINK_
<android.webkit.OverScrollGlow: void setOverScrollDeltas(int,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setGeneralDesc(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.os.Bundle sendWindowWallpaperCommandLocked(com.android.server.wm.WindowState,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)> -> _SINK_
<android.view.Surface: void setPosition(int,int)> -> _SINK_
<android.net.MobileDataStateTracker: boolean setRadio(boolean)> -> _SINK_
<com.android.server.EventLogTags: void writeLowStorage(long)> -> _SINK_
<android.webkit.HTML5VideoView: void setPlayerBuffering(boolean)> -> _SINK_
<android.inputmethodservice.InputMethodService: void sendDownUpKeyEvents(int)> -> _SINK_
<android.os.storage.IObbActionListener$Stub$Proxy: void onObbResult(java.lang.String,int,int)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)> -> _SINK_
<android.accessibilityservice.IEventListener$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SINK_
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.widget.ImageView: void setBaseline(int)> -> _SINK_
<android.net.wifi.NetworkUpdateResult: void setIpChanged(boolean)> -> _SINK_
<com.android.server.pm.PackageSettingBase: void setTimeStamp(long)> -> _SINK_
<com.android.server.wm.InputManager: void setDisplayOrientation(int,int)> -> _SINK_
<android.view.View: void setNextFocusLeftId(int)> -> _SINK_
<android.app.ISearchManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.TextView: void access$4400(android.widget.TextView,int,int,boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setDnsServersForInterface(java.lang.String,java.lang.String[])> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SINK_
<android.animation.LayoutTransition: void setDuration(int,long)> -> _SINK_
<android.media.Ringtone: void setTitle(java.lang.String)> -> _SINK_
<com.android.server.am.BaseErrorDialog: void access$100(com.android.server.am.BaseErrorDialog,boolean)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setAlphabeticShortcut(char)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)> -> _SINK_
<android.location.ILocationProvider$Stub$Proxy: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.widget.SearchView$SearchAutoComplete: boolean onKeyPreIme(int,android.view.KeyEvent)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)> -> _SINK_
<android.preference.PreferenceGroup: void dispatchRestoreInstanceState(android.os.Bundle)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setSystemUiVisibility(int)> -> _SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.DummyDataStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)> -> _SINK_
<com.android.internal.widget.ActionBarView$HomeView: void onMeasure(int,int)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)> -> _SINK_
<android.net.NetworkInfo: void setRoaming(boolean)> -> _SINK_
<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)> -> _SINK_
<android.widget.RemoteViews$ReflectionAction: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.accessibilityservice.AccessibilityService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void access$1000(com.android.internal.policy.impl.KeyguardStatusViewManager,com.android.internal.telephony.IccCard$State)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setCollapsable(boolean)> -> _SINK_
<android.widget.FrameLayout: void onMeasure(int,int)> -> _SINK_
<android.widget.HorizontalScrollView: void setFillViewport(boolean)> -> _SINK_
<android.widget.AdapterView: void setFocusable(boolean)> -> _SINK_
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)> -> _SINK_
<com.android.internal.location.DummyLocationProvider: void setRequiresSatellite(boolean)> -> _SINK_
<com.android.server.wm.InputMonitor: void setInputFocusLw(com.android.server.wm.WindowState,boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: int watchRotation(android.view.IRotationWatcher)> -> _SINK_
<android.webkit.HTML5VideoView: java.util.Map generateHeaders(java.lang.String,android.webkit.HTML5VideoViewProxy)> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int)> -> _SINK_
<android.widget.TextView: void setIncludeFontPadding(boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)> -> _SINK_
<android.widget.RelativeLayout: void setHorizontalGravity(int)> -> _SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)> -> _SINK_
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)> -> _SINK_
<android.inputmethodservice.InputMethodService$InputMethodImpl: void attachToken(android.os.IBinder)> -> _SINK_
<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)> -> _SINK_
<android.content.pm.IPackageMoveObserver$Stub$Proxy: void packageMoved(java.lang.String,int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.am.BroadcastFilter: void dumpInReceiverList(java.io.PrintWriter,android.util.Printer,java.lang.String)> -> _SINK_
<android.view.View$13: void setValue(java.lang.Object,float)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> -> _SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityResuming(java.lang.String)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: int encryptStorage(java.lang.String)> -> _SINK_
<android.view.ViewGroup: boolean notifyChildOfDrag(android.view.View)> -> _SINK_
<android.widget.PopupWindow: void setOutsideTouchable(boolean)> -> _SINK_
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setExtractedText(android.view.inputmethod.ExtractedText,int)> -> _SINK_
<android.webkit.WebView: void setMockDeviceOrientation(boolean,double,boolean,double,boolean,double)> -> _SINK_
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppGroupId(android.os.IBinder,int)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean bottom(android.widget.TextView,android.text.Spannable)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: boolean allowFilterResult(android.content.IntentFilter,java.util.List)> -> _SINK_
<android.text.format.DateUtils: void assign(java.util.Calendar,java.util.Calendar)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)> -> _SINK_
<android.graphics.Matrix: void setSinCos(float,float,float,float)> -> _SINK_
<android.webkit.HttpAuthHandlerImpl: void proceed(java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.drawable.LayerDrawable: boolean onLevelChange(int)> -> _SINK_
<com.android.internal.widget.DrawableHolder: void setY(float)> -> _SINK_
<android.filterfw.core.FilterContext: void setFrameManager(android.filterfw.core.FrameManager)> -> _SINK_
<android.media.MediaPlayer: boolean setParameter(int,java.lang.String)> -> _SINK_
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)> -> _SINK_
<android.webkit.WebView: boolean savePicture(android.os.Bundle,java.io.File)> -> _SINK_
<com.android.server.am.ActivityStack: void ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String,int)> -> _SINK_
<android.preference.Preference: boolean persistFloat(float)> -> _SINK_
<android.media.AudioService: int access$4600(int)> -> _SINK_
<android.widget.TextView: void setScroller(android.widget.Scroller)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)> -> _SINK_
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<android.app.AlertDialog: void setCustomTitle(android.view.View)> -> _SINK_
<android.widget.AbsListView: void addTouchables(java.util.ArrayList)> -> _SINK_
<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)> -> _SINK_
<android.preference.PreferenceManager: void setFragment(android.preference.PreferenceFragment)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void hideSoftInput(int,android.os.ResultReceiver)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(com.android.internal.textservice.ISpellCheckerSessionListener)> -> _SINK_
<com.android.internal.policy.IFaceLockInterface$Stub$Proxy: void registerCallback(com.android.internal.policy.IFaceLockCallback)> -> _SINK_
<android.widget.TextView: void setHint(java.lang.CharSequence)> -> _SINK_
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)> -> _SINK_
<android.widget.GridView: void setGravity(int)> -> _SINK_
<android.content.ContentProvider: void setWritePermission(java.lang.String)> -> _SINK_
<com.android.server.location.PassiveProvider: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.LoaderManager: void enableDebugLogging(boolean)> -> _SINK_
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_
<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.net.Proxy: void setHttpProxySystemProperty(android.net.ProxyProperties)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleResumeActivity(android.os.IBinder,boolean)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setBacklightBrightness(int)> -> _SINK_
<android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.view.Surface$CompatibleCanvas: void setMatrix(android.graphics.Matrix)> -> _SINK_
<android.widget.AbsSpinner: void setSelection(int)> -> _SINK_
<android.content.BroadcastReceiver: void setOrderedHint(boolean)> -> _SINK_
<android.view.View: void setHorizontalScrollBarEnabled(boolean)> -> _SINK_
<com.android.server.InputMethodManagerService: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.widget.LinearLayout: void setVerticalGravity(int)> -> _SINK_
<com.android.server.wm.InputManager: void setInputFilter(com.android.server.wm.InputFilter)> -> _SINK_
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)> -> _SINK_
<android.widget.ImageView: void setImageURI(android.net.Uri)> -> _SINK_
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)> -> _SINK_
<android.database.DatabaseUtils: void cursorDoubleToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void findAccessibilityNodeInfoByViewId(int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setCallback(java.lang.Runnable)> -> _SINK_
<com.android.server.NotificationPlayer: void access$500(com.android.server.NotificationPlayer,com.android.server.NotificationPlayer$Command)> -> _SINK_
<com.android.server.wm.ScreenRotationAnimation: void setRotation(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void moveAppToken(int,android.os.IBinder)> -> _SINK_
<android.content.res.Resources: android.content.res.ColorStateList loadColorStateList(android.util.TypedValue,int)> -> _SINK_
<android.widget.GridView: void setColumnWidth(int)> -> _SINK_
<android.test.mock.MockContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> -> _SINK_
<android.media.RingtoneManager: void setType(int)> -> _SINK_
<android.app.ApplicationPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SINK_
<android.app.ExpandableListActivity: void setListAdapter(android.widget.ExpandableListAdapter)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void limitReached(java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: com.android.internal.view.menu.ActionMenuItem setExclusiveCheckable(boolean)> -> _SINK_
<android.os.storage.StorageManager$ListenerDelegate: void sendStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.internal.util.FastXmlSerializer: void setFeature(java.lang.String,boolean)> -> _SINK_
<android.app.Dialog: void setOwnerActivity(android.app.Activity)> -> _SINK_
<android.net.wifi.WifiInfo: void setMacAddress(java.lang.String)> -> _SINK_
<com.android.server.AppWidgetService: void notifyAppWidgetViewDataChanged(int[],int)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void showSoftInput(int,android.os.ResultReceiver)> -> _SINK_
<com.android.internal.util.StateMachine$ProcessedMessages: void setSize(int)> -> _SINK_
<android.app.ResultInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setSendKeepAlive(boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setPreviewFormat(int)> -> _SINK_
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)> -> _SINK_
<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)> -> _SINK_
<android.widget.AbsListView$MultiChoiceModeWrapper: void setWrapped(android.widget.AbsListView$MultiChoiceModeListener)> -> _SINK_
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)> -> _SINK_
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)> -> _SINK_
<android.widget.TextView: void setHintTextColor(int)> -> _SINK_
<com.android.server.AppWidgetService: void notifyAppWidgetViewDataChangedInstanceLocked(com.android.server.AppWidgetService$AppWidgetId,int)> -> _SINK_
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)> -> _SINK_
<android.location.INetInitiatedListener$Stub$Proxy: boolean sendNiResponse(int,int)> -> _SINK_
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)> -> _SINK_
<android.app.AlertDialog: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)> -> _SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: void setDirectionDescriptionsResourceId(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void moveAppTokensToTop(java.util.List)> -> _SINK_
<com.android.server.PowerManagerService: void access$3200(com.android.server.PowerManagerService,int,int)> -> _SINK_
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)> -> _SINK_
<android.net.http.RequestHandle: void pauseRequest(boolean)> -> _SINK_
<com.android.server.IntentResolver: void sortResults(java.util.List)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Timer: void writeTimerToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Timer,long)> -> _SINK_
<android.media.AudioService: void setStreamVolume(int,int,int)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setShape(int)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)> -> _SINK_
<com.android.internal.widget.AbsActionBarView: void setSplitWhenNarrow(boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceType(java.lang.String)> -> _SINK_
<android.server.BluetoothService: boolean setRemoteOutOfBandData(java.lang.String)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void setInitialDisplaySize(int,int)> -> _SINK_
<android.view.Window: void setUiOptions(int,int)> -> _SINK_
<com.android.server.wm.InputManager$Callbacks: void notifyInputChannelBroken(com.android.server.wm.InputWindowHandle)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])> -> _SINK_
<android.text.style.SuggestionRangeSpan: void setBackgroundColor(int)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean up(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])> -> _SINK_
<com.android.internal.widget.multiwaveview.MultiWaveView: void setTargetResources(int)> -> _SINK_
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)> -> _SINK_
<android.widget.TextView: void setGravity(int)> -> _SINK_
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void sessionCreated(com.android.internal.view.IInputMethodSession)> -> _SINK_
<android.content.ClipboardManager: void setText(java.lang.CharSequence)> -> _SINK_
<com.android.internal.widget.DrawableHolder: void setScaleX(float)> -> _SINK_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelock(int,int,java.lang.String,int)> -> _SINK_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void wipeData(int)> -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.view.GLES20Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void appendAndPutEnabledInputMethodLocked(java.lang.String,boolean)> -> _SINK_
<android.app.ActivityManagerProxy: void setAlwaysFinish(boolean)> -> _SINK_
<android.animation.LayoutTransition: void setStartDelay(int,long)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(android.os.Message)> -> _SINK_
<android.media.AudioManager: boolean shouldVibrate(int)> -> _SINK_
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setVersion(int)> -> _SINK_
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)> -> _SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,float)> -> _SINK_
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)> -> _SINK_
<android.view.View: void setFilterTouchesWhenObscured(boolean)> -> _SINK_
<android.view.View: void setNextFocusForwardId(int)> -> _SINK_
<android.app.PendingIntent: void send(int)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void startInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)> -> _SINK_
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> -> _SINK_
<com.android.server.location.GpsLocationProvider: void access$100(com.android.server.location.GpsLocationProvider,boolean)> -> _SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)> -> _SINK_
<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)> -> _SINK_
<android.view.ViewGroup$MarginLayoutParams: void setMarginsRelative(int,int,int,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void deviceDetached(android.hardware.usb.UsbDevice)> -> _SINK_
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> android.permission.CHANGE_WIFI_STATE -> _SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void unplugRemoteControlDisplay(android.media.IRemoteControlDisplay)> -> _SINK_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder setClassInstanceLimit(java.lang.Class,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)> -> _SINK_
<android.os.StrictMode: void incrementExpectedActivityCount(java.lang.Class)> -> _SINK_
<android.util.Property: void set(java.lang.Object,java.lang.Object)> -> _SINK_
<com.android.server.pm.Settings: boolean setPackageStoppedStateLPw(java.lang.String,boolean,boolean,int)> -> _SINK_
<android.location.Criteria: void setHorizontalAccuracy(int)> -> _SINK_
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> -> _SINK_
<com.android.server.PowerManagerService: void setBacklightBrightness(int)> -> _SINK_
<android.appwidget.AppWidgetHostView: void setAppWidget(int,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<android.media.MediaRecorder: void setOrientationHint(int)> -> _SINK_
<android.webkit.ViewManager$ChildView: void setBounds(int,int,int,int)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTagPriority(java.lang.String,java.lang.String,int,int,android.app.Notification,int[])> -> _SINK_
<android.webkit.CallbackProxy: boolean uiOverrideUrlLoading(java.lang.String)> -> _SINK_
<android.media.MediaRecorder: void setAudioChannels(int)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)> -> _SINK_
<android.view.View: void setBackgroundColor(int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> android.permission.BLUETOOTH -> _SINK_
<android.widget.AbsListView$FlingRunnable: void startScroll(int,int)> -> _SINK_
<android.bluetooth.BluetoothHeadset: boolean setAudioState(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: boolean inflateTag(java.lang.String,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: boolean dispatchMenuItemSelected(com.android.internal.view.menu.MenuBuilder,android.view.MenuItem)> -> _SINK_
<android.hardware.Camera: android.hardware.Camera open(int)> -> _SINK_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)> -> _SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)> -> _SINK_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> -> _SINK_
<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<com.android.server.IntentResolver: void addFilter(android.content.IntentFilter)> -> _SINK_
<android.server.BluetoothService: void setA2dpService(android.server.BluetoothA2dpService)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setItemInvoker(com.android.internal.view.menu.MenuBuilder$ItemInvoker)> -> _SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void revokeSession(com.android.internal.view.IInputMethodSession)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)> -> _SINK_
<android.net.wifi.WifiStateTracker: void privateDnsRouteSet(boolean)> -> _SINK_
<android.view.View: void setCameraDistance(float)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)> -> _SINK_
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.ConnectivityService: void access$2200(com.android.server.ConnectivityService,android.content.Intent)> -> _SINK_
<android.location.Address: void setAddressLine(int,java.lang.String)> -> _SINK_
<android.widget.AdapterView: void dispatchSaveInstanceState(android.util.SparseArray)> -> _SINK_
<android.view.ViewGroup: void detachViewFromParent(android.view.View)> -> _SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToLastInputMethod(android.os.IBinder)> -> _SINK_
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int)> -> _SINK_
<com.android.server.IntentResolver: java.lang.Object newResult(android.content.IntentFilter,int)> -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])> -> _SINK_
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setCallback(android.app.ActionBar$OnNavigationListener)> -> _SINK_
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.widget.SearchView: void setQuery(java.lang.CharSequence,boolean)> -> _SINK_
<android.widget.LinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.AlertDialog: void setIconAttribute(int)> -> _SINK_
<android.view.accessibility.AccessibilityInteractionClient: void setSameThreadMessage(android.os.Message)> -> _SINK_
<android.view.View: void setLeft(int)> -> _SINK_
<android.view.ViewGroup: void dispatchRestoreInstanceState(android.util.SparseArray)> -> _SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setVisible(boolean)> -> _SINK_
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)> -> _SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: void setLoadingViewTemplates(android.widget.RemoteViews,android.widget.RemoteViews)> -> _SINK_
<android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])> -> _SINK_
<android.filterfw.core.Frame: boolean requestResize(int[])> -> _SINK_
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> android.permission.MANAGE_ACCOUNTS -> _SINK_
<android.graphics.drawable.DrawableContainer: void setEnterFadeDuration(int)> -> _SINK_
<android.webkit.WebTextView: void setAutoFillProfileIsSet(boolean)> -> _SINK_
<android.view.View$8: void setValue(java.lang.Object,float)> -> _SINK_
<android.view.ViewRootImpl: void dumpGfxInfo(java.io.PrintWriter,int[])> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateExtractedText(int,android.view.inputmethod.ExtractedText)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.server.BluetoothService: void setLinkTimeout(java.lang.String,int)> -> _SINK_
<android.filterfw.core.ShaderProgram: void setDrawMode(int)> -> _SINK_
<android.widget.EdgeEffect: void setSize(int,int)> -> _SINK_
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> -> _SINK_
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)> -> _SINK_
<android.app.ApplicationThreadProxy: void profilerControl(boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> -> _SINK_
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<android.webkit.FrameLoader: void setHeaders(java.util.HashMap)> -> _SINK_
<android.app.ActivityManagerProxy: boolean dumpHeap(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SINK_
<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SINK_
<android.app.ContextImpl: java.io.FileInputStream openFileInput(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> -> _SINK_
<android.preference.Preference: void onBindView(android.view.View)> -> _SINK_
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.filterfw.core.GLFrame: void setBitmap(android.graphics.Bitmap)> -> _SINK_
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)> -> _SINK_
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMobile(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.view.View: void setTag(int,java.lang.Object)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setIpForwardingEnabled(boolean)> -> _SINK_
<android.widget.TextView: void setCursorVisible(boolean)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void setUsbMassStorageEnabled(boolean)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SINK_
<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiStateTracker: void defaultRouteSet(boolean)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNoInternationalDialling(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAutoRegistration(boolean)> -> _SINK_
<android.preference.Preference: void setWidgetLayoutResource(int)> -> _SINK_
<android.view.ViewGroup: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)> -> _SINK_
<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)> -> _SINK_
<android.app.IProcessObserver$Stub$Proxy: void onForegroundActivitiesChanged(int,int,boolean)> -> _SINK_
<com.android.internal.util.TypedProperties: void parse(java.io.Reader,java.util.Map)> -> _SINK_
<android.view.View: void setFastY(float)> -> _SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)> -> _SINK_
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)> -> _SINK_
<com.android.ex.variablespeed.VariableSpeed: void setDataSource(java.lang.String)> -> _SINK_
<android.net.MobileDataStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.hardware.Camera$Parameters: void setRotation(int)> -> _SINK_
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onRestorePackage(java.lang.String)> -> _SINK_
<android.net.InterfaceConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)> -> _SINK_
<android.net.http.Headers: void setEtag(java.lang.String)> -> _SINK_
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])> -> _SINK_
<android.filterfw.core.VertexFrame: void setFloats(float[])> -> _SINK_
<com.android.internal.location.GpsNetInitiatedHandler: void handleNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)> -> _SINK_
<android.graphics.drawable.InsetDrawable: void setAlpha(int)> -> _SINK_
<android.webkit.WebSettings: void setPluginsPath(java.lang.String)> -> _SINK_
<com.android.internal.widget.LockPatternView: void setOnPatternListener(com.android.internal.widget.LockPatternView$OnPatternListener)> -> _SINK_
<android.text.Layout: float nextTab(java.lang.CharSequence,int,int,float,java.lang.Object[])> -> _SINK_
<android.app.Activity: void setTitleColor(int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize(int,int)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> -> _SINK_
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)> -> _SINK_
<android.widget.AdapterViewAnimator: void transformViewForTransition(int,int,android.view.View,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabled(boolean)> -> _SINK_
<android.app.ContextImpl: void removeStickyBroadcast(android.content.Intent)> -> _SINK_
<com.android.server.NetworkManagementService: void setGlobalAlert(long)> -> _SINK_
<com.android.server.pm.GrantedPermissions: void setFlags(int)> -> _SINK_
<android.location.Location: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(int,android.os.IBinder,java.lang.String,android.os.WorkSource)> -> _SINK_
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> -> _SINK_
<android.widget.SearchView: void setIconifiedByDefault(boolean)> -> _SINK_
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void addService(android.content.pm.PackageParser$Service)> -> _SINK_
<com.android.internal.app.AlertController: void setView(android.view.View,int,int,int,int)> -> _SINK_
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)> -> _SINK_
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)> -> _SINK_
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void logState(android.util.Printer,java.lang.String)> -> _SINK_
<android.view.GLES20Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)> -> _SINK_
<android.graphics.Matrix: void setSkew(float,float,float,float)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> -> _SINK_
<android.app.ActivityManagerProxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)> -> _SINK_
<android.widget.Filter: void setDelayer(android.widget.Filter$Delayer)> -> _SINK_
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)> -> _SINK_
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)> -> _SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> -> _SINK_
<com.android.server.usb.UsbSettingsManager$DeviceFilter: com.android.server.usb.UsbSettingsManager$DeviceFilter read(org.xmlpull.v1.XmlPullParser)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefix(java.lang.String)> -> _SINK_
<android.filterfw.core.SimpleFrame: void setInts(int[])> -> _SINK_
<android.provider.Browser: void saveBookmark(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> -> _SINK_
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundNdefPush(android.nfc.NdefMessage,android.nfc.INdefPushCallback)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: void initialize(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean hasGrant(int,java.lang.String)> -> _SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessageCallback(android.app.Activity,android.nfc.NfcAdapter$CreateNdefMessageCallback)> -> _SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setIntent(android.content.Intent)> -> _SINK_
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> -> _SINK_
<android.graphics.Paint: void setARGB(int,int,int,int)> -> _SINK_
<com.android.internal.net.LegacyVpnInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.ActivityManagerProxy: void noteWakeupAlarm(android.content.IIntentSender)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri,android.database.IContentObserver,boolean,boolean)> -> _SINK_
<android.graphics.drawable.DrawableContainer: void setAlpha(int)> -> _SINK_
<android.database.DatabaseUtils: void cursorShortToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.database.CursorWindow: boolean setNumColumns(int)> -> _SINK_
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter$CursorToStringConverter)> -> _SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleDestroyActivity(android.os.IBinder,boolean,int)> -> _SINK_
<android.net.wifi.WifiInfo: void setInetAddress(java.net.InetAddress)> -> _SINK_
<android.view.MotionEvent: void setEdgeFlags(int)> -> _SINK_
<android.widget.AbsListView: void setVerticalScrollbarPosition(int)> -> _SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)> -> _SINK_
<android.media.AudioService: int setModeInt(int,android.os.IBinder,int)> -> _SINK_
<android.widget.ZoomButton: void setEnabled(boolean)> -> _SINK_
<android.widget.SpellChecker$SpellParser: void init(int,int)> -> _SINK_
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)> -> _SINK_
<com.android.server.wm.DragState: void sendDragStartedIfNeededLw(com.android.server.wm.WindowState)> -> _SINK_
<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleRelaunchActivity(android.os.IBinder,java.util.List,java.util.List,int,boolean,android.content.res.Configuration)> -> _SINK_
<android.view.ViewGroup: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)> -> _SINK_
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _SINK_
<android.net.http.CharArrayBuffers: int setLowercaseIndexOf(org.apache.http.util.CharArrayBuffer,int)> -> _SINK_
<android.app.Service: void setForeground(boolean)> -> _SINK_
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)> -> _SINK_
<android.webkit.CallbackProxy: void setDownloadListener(android.webkit.DownloadListener)> -> _SINK_
<android.graphics.Matrix: void set(android.graphics.Matrix)> -> _SINK_
<android.inputmethodservice.Keyboard: void setKeyWidth(int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setCustomNavigationView(android.view.View)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowCustomEnabled(boolean)> -> _SINK_
<android.widget.OverScroller$SplineOverScroller: void setFinalPosition(int)> -> _SINK_
<com.android.internal.util.XmlUtils: java.util.ArrayList readListXml(java.io.InputStream)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> -> _SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.widget.AbsListView: int access$1200(android.widget.AbsListView)> -> _SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellCheckerSubtype(java.lang.String,int)> -> _SINK_
<android.net.http.Headers: void setAcceptRanges(java.lang.String)> -> _SINK_
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void readExternal(java.io.ObjectInput)> -> _SINK_
<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindNull(int)> -> _SINK_
<android.widget.OverScroller$SplineOverScroller: boolean springback(int,int,int)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService$XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)> -> _SINK_
<android.text.format.Time: void set(android.text.format.Time)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)> -> _SINK_
<android.media.effect.Effect: void setUpdateListener(android.media.effect.EffectUpdateListener)> -> _SINK_
<com.android.internal.view.IInputMethodSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setEnableHaptics(boolean)> -> _SINK_
<android.server.BluetoothService: boolean enable(boolean)> -> _SINK_
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)> -> _SINK_
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)> -> _SINK_
<android.widget.ScrollView: void setFillViewport(boolean)> -> _SINK_
<android.widget.RemoteViewsAdapter: void access$1300(android.widget.RemoteViewsAdapter,int,boolean)> -> _SINK_
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void resumeKeyDispatching(android.os.IBinder)> -> _SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)> -> _SINK_
<android.os.Handler: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)> -> _SINK_
<android.webkit.WebChromeClient: void setupAutoFill(android.os.Message)> -> _SINK_
<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)> -> _SINK_
<android.app.backup.BackupDataOutput: void setKeyPrefix(java.lang.String)> -> _SINK_
<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable,int,int)> -> _SINK_
<com.android.server.wm.ScreenRotationAnimation: boolean stepAnimation(long)> -> _SINK_
<android.view.animation.Animation: void setDetachWallpaper(boolean)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: void reportDropResult(android.view.IWindow,boolean)> -> _SINK_
<android.view.View: void setVerticalScrollbarPosition(int)> -> _SINK_
<android.filterfw.core.SerializedFrame: void setInts(int[])> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)> -> _SINK_
<android.widget.GridView: void setVerticalSpacing(int)> -> _SINK_
<android.widget.Toast: void setView(android.view.View)> -> _SINK_
<android.view.IWindowSession$Stub$Proxy: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> -> _SINK_
<android.server.BluetoothService: void setRemoteDeviceProperty(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.am.ActivityRecord: void startFreezingScreenLocked(com.android.server.am.ProcessRecord,int)> -> _SINK_
<android.os.BatteryStats$HistoryItem: void setTo(android.os.BatteryStats$HistoryItem)> -> _SINK_
<android.inputmethodservice.InputMethodService: void setInputView(android.view.View)> -> _SINK_
<android.widget.ListPopupWindow: boolean onKeyPreIme(int,android.view.KeyEvent)> -> _SINK_
<android.view.View: void setContentDescription(java.lang.CharSequence)> -> _SINK_
<android.app.backup.IBackupManager$Stub$Proxy: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.StatusBarManagerService: void setSystemUiVisibility(int)> -> _SINK_
<android.widget.CheckedTextView: void setCheckMarkDrawable(int)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> -> _SINK_
<com.android.internal.util.XmlUtils: java.util.HashSet readSetXml(java.io.InputStream)> -> _SINK_
<android.view.View: void setPressed(boolean)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setLeftTabResources(int,int,int,int)> -> _SINK_
<com.android.server.am.BroadcastFilter: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.database.sqlite.DatabaseConnectionPool: void setMaxPoolSize(int)> -> _SINK_
<android.security.KeyChain$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> -> _SINK_
<android.content.ContentProvider: void setReadPermission(java.lang.String)> -> _SINK_
<com.android.internal.app.IUsageStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.PreferredComponent: void dump(java.io.PrintWriter,java.lang.String,java.lang.Object)> -> _SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)> -> _SINK_
<android.os.WorkSource: void set(android.os.WorkSource)> -> _SINK_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setVariablePadding(boolean)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> -> _SINK_
<android.accessibilityservice.AccessibilityService$IEventListenerWrapper: void setConnection(android.accessibilityservice.IAccessibilityServiceConnection,int)> -> _SINK_
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String)> -> _SINK_
<com.android.server.wm.InputMonitor: void setEventDispatchingLw(boolean)> -> _SINK_
<android.app.ActivityManagerProxy: int checkUriPermission(android.net.Uri,int,int,int)> -> _SINK_
<com.android.server.am.ActivityStack: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.ActivityRecord)> -> _SINK_
<android.widget.TextView: void setMaxHeight(int)> -> _SINK_
<android.widget.TextView$ErrorPopup: void update(int,int,int,int,boolean)> -> _SINK_
<android.net.http.RequestHandle: void setRedirectCount(int)> -> _SINK_
<android.media.IAudioFocusDispatcher$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int playSilence(java.lang.String,long,int,android.os.Bundle)> -> _SINK_
<android.app.Fragment: void setMenuVisibility(boolean)> -> _SINK_
<android.view.View: void setFitsSystemWindows(boolean)> -> _SINK_
<android.view.View: void setHapticFeedbackEnabled(boolean)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)> -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)> -> _SINK_
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> -> _SINK_
<android.app.ActivityThread: android.app.ActivityThread$ActivityClientRecord performResumeActivity(android.os.IBinder,boolean)> -> _SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> -> _SINK_
<android.location.GpsStatus: void setStatus(android.location.GpsStatus)> -> _SINK_
<android.view.ViewGroup: void addView(android.view.View,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setInTouchMode(boolean)> -> _SINK_
<android.widget.ListView: void onMeasure(int,int)> -> _SINK_
<com.android.server.am.ContentProviderRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.server.WallpaperManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodFileManager: void addInputMethodSubtypes(android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype[])> -> _SINK_
<android.widget.AbsListView: void positionSelector(int,android.view.View)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> -> _SINK_
<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAppVisibility(android.os.IBinder,boolean)> -> _SINK_
<android.content.res.Configuration: void setTo(android.content.res.Configuration)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> -> _SINK_
<android.net.NetworkStats: java.lang.String setToString(int)> -> _SINK_
<android.content.pm.PackageInfoLite: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.view.View$13: void setValue(android.view.View,float)> -> _SINK_
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)> -> _SINK_
<com.android.internal.view.menu.MenuPopupHelper: void setCallback(com.android.internal.view.menu.MenuPresenter$Callback)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean lineEnd(android.widget.TextView,android.text.Spannable)> -> _SINK_
<com.android.internal.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)> -> _SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)> -> _SINK_
<com.android.server.IntentResolver: boolean allowFilterResult(android.content.IntentFilter,java.util.List)> -> _SINK_
<android.os.storage.IMountService$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void moveAppTokensToBottom(java.util.List)> -> _SINK_
<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)> -> _SINK_
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)> -> _SINK_
<android.graphics.drawable.DrawableContainer: void setExitFadeDuration(int)> -> _SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void removeIcon(java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> -> _SINK_
<com.android.internal.view.BaseSurfaceHolder: void setFixedSize(int,int)> -> _SINK_
<android.appwidget.AppWidgetHostView$ParcelableSparseArray$1: android.appwidget.AppWidgetHostView$ParcelableSparseArray createFromParcel(android.os.Parcel)> -> _SINK_
<android.animation.ValueAnimator: void setRepeatMode(int)> -> _SINK_
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)> -> _SINK_
<com.android.server.InputMethodManagerService$InputMethodSettings: void addSubtypeToHistory(java.lang.String,java.lang.String)> -> _SINK_
<android.text.Selection: void extendSelection(android.text.Spannable,int)> -> _SINK_
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)> -> _SINK_
<android.view.View$4: void setValue(java.lang.Object,float)> -> _SINK_
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneDataConnectionState(int,boolean)> -> _SINK_
<android.location.ILocationProvider$Stub$Proxy: void addListener(int)> -> _SINK_
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)> -> _SINK_
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)> -> _SINK_
<com.android.internal.net.VpnConfig: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.INetworkManagementService$Stub$Proxy: void addRoute(java.lang.String,android.net.RouteInfo)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void writeToParcel(android.os.Parcel,long)> -> _SINK_
<android.view.View: void setScrollX(int)> -> _SINK_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<android.service.wallpaper.IWallpaperConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setAnimationScales(float[])> -> _SINK_
<android.graphics.BitmapFactory: void setDefaultConfig(android.graphics.Bitmap$Config)> -> _SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> -> _SINK_
<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)> -> _SINK_
<android.view.ViewRootImpl: void handleMessage(android.os.Message)> -> _SINK_
<android.view.View: void setTranslationY(float)> -> _SINK_
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> -> _SINK_
<com.android.server.am.UriPermission: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.inputmethodservice.KeyboardView: void setPopupParent(android.view.View)> -> _SINK_
<android.webkit.HTML5VideoView: void setOnErrorListener(android.webkit.HTML5VideoViewProxy)> -> _SINK_
<com.android.server.wm.Session: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_
<com.android.internal.util.StateMachine: void addState(com.android.internal.util.State)> -> _SINK_
<com.android.internal.widget.SlidingTab: void setHoldAfterTrigger(boolean,boolean)> -> _SINK_
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> -> _SINK_
<android.media.AudioService: void setMode(int,android.os.IBinder)> -> _SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setId(java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setSubtitle(java.lang.CharSequence)> -> _SINK_
<android.filterfw.core.FilterFunction: void setInputFrame(java.lang.String,android.filterfw.core.Frame)> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.text.method.ArrowKeyMovementMethod: boolean right(android.widget.TextView,android.text.Spannable)> -> _SINK_
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)> -> _SINK_
<android.animation.LayoutTransition: void setStagger(int,long)> -> _SINK_
<android.os.PerformanceCollector: void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)> -> _SINK_
<android.view.Window: void setCallback(android.view.Window$Callback)> -> _SINK_
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)> -> _SINK_
<android.view.HardwareLayer: void update(int,int,boolean)> -> _SINK_
<com.android.internal.util.XmlUtils: void writeListXml(java.util.List,java.io.OutputStream)> -> _SINK_
<com.android.internal.policy.impl.KeyguardStatusViewManager: void setCarrierText(java.lang.CharSequence)> -> _SINK_
<android.webkit.LoadListener: void setUrl(java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)> -> _SINK_
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> -> _SINK_
<android.view.animation.Animation: void setZAdjustment(int)> -> _SINK_
<android.net.LocalSocket: void setSendBufferSize(int)> -> _SINK_
<com.android.internal.widget.ActionBarView: void setIcon(int)> -> _SINK_
<android.preference.Preference: void setFragment(java.lang.String)> -> _SINK_
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: boolean process(java.util.EventObject)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)> -> _SINK_
<com.android.server.wm.StrictModeFlash: void setVisibility(boolean)> -> _SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupVisible(int,boolean)> -> _SINK_
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)> -> _SINK_
<android.app.ApplicationThreadProxy: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromDevice(android.net.wifi.WpsInfo)> -> _SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void clearMetaKeyStates(int)> -> _SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreStarting(int)> -> _SINK_
<android.widget.ScrollView: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.os.Parcel: void writeArray(java.lang.Object[])> -> _SINK_
<android.net.SntpClient: boolean requestTime(java.lang.String,int)> -> _SINK_
<android.net.wifi.WifiManager: void saveNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.os.IPowerManager$Stub$Proxy: void setPokeLock(int,android.os.IBinder,java.lang.String)> -> _SINK_


<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: void setActiveApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> -> _SINK_
<android.net.http.HttpConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.ACCESS_NETWORK_STATE -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setState(com.android.internal.telephony.DataConnectionTracker$State)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: void setProfileId(int)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.CHANGE_NETWORK_STATE -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.BLUETOOTH_ADMIN -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.BLUETOOTH -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.READ_PHONE_STATE -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setState(com.android.internal.telephony.DataConnectionTracker$State)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: void setDisconnectCause(com.android.internal.telephony.Connection$DisconnectCause)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void notifyTetheredOfNewUpstreamIface(java.lang.String)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.ACCESS_WIFI_STATE -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.CHANGE_WIFI_STATE -> _SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult updateLinkPropertiesDataCallStateSync(com.android.internal.telephony.DataCallState)> -> _SINK_
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> -> _SINK_


<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void access$300(android.net.sip.SimpleSessionDescription$Media,java.lang.StringBuilder)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> android.permission.WAKE_LOCK -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void access$200(android.net.sip.SimpleSessionDescription$Fields,java.lang.StringBuilder)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> -> _SINK_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener,boolean)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)> -> _SINK_
<com.android.server.sip.SipSessionGroup: void openToReceiveCalls(android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> -> _SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> android.permission.USE_SIP -> _SINK_


<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> -> _SINK_
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> -> _SINK_


<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setDependencyMet(boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectHeadset(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.MODIFY_AUDIO_SETTINGS -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean changeApplicationBluetoothState(boolean,android.bluetooth.IBluetoothStateChangeCallback,android.os.IBinder)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void privateDnsRouteSet(boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(java.lang.String,byte[])> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isBluetoothDock(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH_ADMIN -> _SINK_
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectHeadset(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(java.lang.String,boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteAlias(java.lang.String,java.lang.String)> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.WRITE_SETTINGS -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean notifyIncomingConnection(java.lang.String,boolean)> -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> -> _SINK_
<android.bluetooth.BluetoothProfileState$PendingCommandState: boolean processMessage(android.os.Message)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: boolean setRadio(boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setTeardownRequested(boolean)> -> _SINK_
<android.bluetooth.BluetoothServerSocket: void setCloseHandler(android.os.Handler,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteOutOfBandData(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothSocket: int write(byte[],int,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void setBluetoothTethering(boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(java.lang.String,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void removeServiceRecord(int)> -> _SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> -> _SINK_
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setTrust(java.lang.String,boolean)> -> _SINK_
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onRfcommChannelFound(int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> -> _SINK_
<android.bluetooth.BluetoothTetheringDataTracker: void defaultRouteSet(boolean)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])> -> _SINK_
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> -> _SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.WAKE_LOCK -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> -> _SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean removeBond(java.lang.String)> -> _SINK_


<android.accounts.AccountManagerService$3: java.lang.String toDebugString(long)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void writeUserDataIntoCacheLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: int access$1202(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,int)> -> _SINK_
<android.accounts.AccountManager$2: android.accounts.Account[] bundleToResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)> -> _SINK_
<android.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void access$900(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,java.lang.Throwable)> -> _SINK_
<android.net.http.HttpAuthHeader: void setPassword(java.lang.String)> -> _SINK_
<android.app.Application: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.accounts.AccountManagerService$Session: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void access$1000(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,java.lang.Throwable)> -> _SINK_
<android.accounts.AccountManagerService: void access$300(android.accounts.AccountManagerService,android.accounts.Account,java.lang.CharSequence,android.content.Intent)> -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> -> _SINK_
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: java.lang.String readUserDataInternal(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void access$1100(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,java.lang.Throwable)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.webkit.WebViewDatabase: void setUsernamePassword(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> -> _SINK_
<android.accounts.AccountManager$BaseFutureTask: void postRunnableToHandler(java.lang.Runnable)> -> _SINK_
<android.accounts.AccountManagerService$Session: void onServiceDisconnected(android.content.ComponentName)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> -> _SINK_
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> -> _SINK_
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> -> _SINK_
<android.accounts.AccountManagerService$7: java.lang.String toDebugString(long)> -> _SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: boolean access$200(android.accounts.AccountManagerService,android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountAuthenticatorCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.accounts.AccountManager$BaseFutureTask: void access$700(android.accounts.AccountManager$BaseFutureTask,java.lang.Object)> -> _SINK_
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> -> _SINK_
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS -> _SINK_
<android.content.PeriodicSync: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.webkit.Network: void setProxyPassword(java.lang.String)> -> _SINK_
<android.accounts.AccountAuthenticatorCache$MySerializer: android.accounts.AuthenticatorDescription createFromXml(org.xmlpull.v1.XmlPullParser)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: android.os.IBinder onBind(android.content.Intent)> -> _SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService$2: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> -> _SINK_
<android.webkit.WebSettings: void setSavePassword(boolean)> -> _SINK_
<android.accounts.AccountManagerService$4: java.lang.String toDebugString(long)> -> _SINK_
<android.accounts.AccountManagerService$TestFeaturesSession: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService$Session: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> android.permission.SET_WALLPAPER -> _SINK_
<android.accounts.AccountManager$AmsTask: void set(java.lang.Object)> -> _SINK_
<android.accounts.AccountManagerService: void installNotification(int,android.app.Notification)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)> -> _SINK_
<android.accounts.AccountManagerService: void cancelNotification(int)> -> _SINK_
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> -> _SINK_
<android.accounts.IAccountManagerResponse$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SINK_
<android.accounts.AccountManagerService: java.util.HashMap readUserDataForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.GrantCredentialsPermissionActivity: void setAccountAuthenticatorResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: java.lang.String toDebugString(long)> -> _SINK_
<android.accounts.AccountManagerService$RemoveAccountSession: java.lang.String toDebugString(long)> -> _SINK_
<android.accounts.AccountManagerService$5: java.lang.String toDebugString(long)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS -> _SINK_
<android.accounts.AccountManagerService$3: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> android.permission.USE_CREDENTIALS -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SINK_
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)> android.permission.SET_WALLPAPER -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> -> _SINK_
<android.accounts.AccountManagerService: void grantAppPermission(android.accounts.Account,java.lang.String,int)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.accounts.IAccountAuthenticatorResponse$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: java.lang.Integer access$800(android.accounts.AccountManagerService,android.accounts.Account)> -> _SINK_
<android.accounts.AccountManagerService$TestFeaturesSession: java.lang.String toDebugString(long)> -> _SINK_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> -> _SINK_
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.accounts.AccountManager$AmsTask: void access$500(android.accounts.AccountManager$AmsTask,java.lang.Throwable)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_
<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.MANAGE_APP_TOKENS -> _SINK_
<android.webkit.WebViewDatabase: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebView: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> -> _SINK_
<android.accounts.AccountManager$BaseFutureTask: void access$800(android.accounts.AccountManager$BaseFutureTask,java.lang.Throwable)> -> _SINK_
<android.accounts.AccountManagerService$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> -> _SINK_
<android.accounts.AccountManagerService$6: java.lang.String toDebugString(long)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> -> _SINK_
<android.accounts.AccountManagerService$RemoveAccountSession: void onResult(android.os.Bundle)> -> _SINK_
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> -> _SINK_
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.accounts.AccountManagerService$2: java.lang.String toDebugString(long)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)> -> _SINK_
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: void onError(int,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -> _SINK_
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> -> _SINK_
<android.accounts.AccountManagerService$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> -> _SINK_


<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)> -> _SINK_
<android.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SINK_
<android.content.SyncStorageEngine: void setBackoff(android.accounts.Account,java.lang.String,long,long)> -> _SINK_
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> android.permission.WRITE_SYNC_SETTINGS -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> android.permission.VIBRATE -> _SINK_
<android.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean)> -> _SINK_
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -> _SINK_
<android.content.SyncStorageEngine: void setDelayUntilTime(android.accounts.Account,java.lang.String,long)> -> _SINK_
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newSetOperation(android.net.Uri,android.accounts.Account,byte[])> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> android.permission.WAKE_LOCK -> _SINK_
<android.content.SyncStorageEngine: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> android.permission.ACCESS_NETWORK_STATE -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)> -> _SINK_
<android.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SINK_
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SINK_
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)> -> _SINK_
<android.content.SyncManager: void access$1100(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> -> _SINK_
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: boolean bindToSyncAdapter(android.content.pm.RegisteredServicesCache$ServiceInfo)> -> _SINK_
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> android.permission.READ_SYNC_SETTINGS -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> android.permission.WRITE_SYNC_SETTINGS -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)> -> _SINK_
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> -> _SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> -> _SINK_
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)> -> _SINK_
<android.provider.SyncStateContract$Helpers: void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])> -> _SINK_
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)> -> _SINK_
<android.provider.SyncStateContract$Helpers: android.net.Uri insert(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])> -> _SINK_
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SINK_
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,java.lang.String)> -> _SINK_


<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)> -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])> android.permission.DUMP -> _SINK_
<android.view.inputmethod.InputMethodManager$1: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.TransferPipe: void goDump(android.os.IBinder,java.io.FileDescriptor,java.lang.String[],long)> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpService(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<com.android.server.am.TransferPipe: void go(com.android.server.am.TransferPipe$Caller,android.os.IInterface,java.io.FileDescriptor,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.server.wm.WindowManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean dumpWindows(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<android.accounts.AccountManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.view.ViewDebug: void startLooperProfiling(java.lang.String,java.io.FileDescriptor)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpPolicyLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)> -> _SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)> -> _SINK_
<com.android.server.AlarmManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.StatusBarManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> android.permission.ACCESS_NETWORK_STATE -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])> android.permission.BLUETOOTH -> _SINK_
<com.android.server.NetworkManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.LocalSocketImpl: int access$400(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)> -> _SINK_
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.FileDescriptor,java.io.PrintWriter,boolean,java.util.ArrayList)> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> -> _SINK_
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.TelephonyRegistry: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.ApplicationThreadProxy: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])> -> _SINK_
<android.server.BluetoothService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.content.ContentService$ObserverNode$ObserverEntry: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,android.util.SparseIntArray)> -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<com.android.server.usb.UsbSettingsManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<com.android.server.MountService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.TransferPipe: void go(com.android.server.am.TransferPipe$Caller,android.os.IInterface,java.io.FileDescriptor,java.lang.String,java.lang.String[],long)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProcessesToGc(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> -> _SINK_
<android.net.LocalSocketImpl: void access$600(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpServicesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpTokensLocked(java.io.FileDescriptor,java.io.PrintWriter,boolean)> -> _SINK_
<android.net.LocalSocketImpl: int access$100(android.net.LocalSocketImpl,java.io.FileDescriptor)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpActivity(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> -> _SINK_
<com.android.server.usb.UsbService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.LocationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.wifi.p2p.WifiP2pService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpOomLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean)> -> _SINK_
<android.app.ActivityThread: void access$500(android.app.ActivityThread,java.io.FileDescriptor)> -> _SINK_
<com.android.server.usb.UsbHostManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<com.android.server.connectivity.Tethering: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.BatteryService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)> -> _SINK_
<com.android.server.WifiService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.LocalSocketImpl: void access$700(android.net.LocalSocketImpl,int,java.io.FileDescriptor)> -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService$MemBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)> -> _SINK_
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])> -> _SINK_
<com.android.server.am.UsageStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)> -> _SINK_
<com.android.server.usb.UsbDeviceManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<com.android.server.am.ActivityManagerService$GraphicsBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.LocalSocketImpl: int access$300(android.net.LocalSocketImpl,java.io.FileDescriptor)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpSessionsLocked(java.io.FileDescriptor,java.io.PrintWriter,boolean)> -> _SINK_
<com.android.internal.policy.impl.PhoneWindowManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpActivitiesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])> -> _SINK_
<com.android.server.DevicePolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.BatteryStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.PowerManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.ConnectivityService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<com.android.server.pm.PackageManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> -> _SINK_
<android.app.ActivityThread$ApplicationThread: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])> -> _SINK_
<android.server.BluetoothA2dpService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.TransferPipe: void goDump(android.os.IBinder,java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.usb.UsbDeviceManager$UsbHandler: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])> android.permission.ACCESS_NETWORK_STATE -> _SINK_
<android.view.WindowManagerImpl: void dumpGfxInfo(java.io.FileDescriptor)> -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])> android.permission.BACKUP -> _SINK_
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])> -> _SINK_
<com.android.server.am.TransferPipe: void go(java.io.FileDescriptor,long)> -> _SINK_
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpGraphicsHardwareUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> -> _SINK_
<com.android.server.am.TransferPipe: void go(java.io.FileDescriptor)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProcessesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpPendingIntentsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<com.android.server.NotificationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.media.Ringtone: void open(java.io.FileDescriptor)> -> _SINK_
<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpProvidersLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.InputMethodManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.AppWidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.WallpaperManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpApplicationMemoryUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],boolean,java.io.PrintWriter,java.lang.StringBuilder,java.lang.StringBuilder)> -> _SINK_
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> -> _SINK_
<com.android.server.am.ActivityManagerService$CpuBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean dumpBroadcastsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> -> _SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)> -> _SINK_
<android.content.pm.RegisteredServicesCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.ContentService$ObserverNode: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,int[],android.util.SparseIntArray)> -> _SINK_
<com.android.server.wm.WindowManagerService: void dumpInput(java.io.FileDescriptor,java.io.PrintWriter,boolean)> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)> -> _SINK_


<android.webkit.CallbackProxy: boolean shouldOverrideUrlLoading(java.lang.String)> -> _SINK_
<android.util.Log: android.util.Log$TerribleFailureHandler setWtfHandler(android.util.Log$TerribleFailureHandler)> -> _SINK_
<android.net.EthernetDataTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WpsStateMachine$ActiveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)> -> _SINK_
<com.android.vcard.VCardProperty: void setName(java.lang.String)> -> _SINK_
<android.filterfw.core.Filter: void addFieldPort(java.lang.String,java.lang.reflect.Field,boolean,boolean)> -> _SINK_
<com.android.server.location.GpsLocationProvider: boolean sendExtraCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List,boolean)> -> _SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setupSetter(java.lang.Class)> -> _SINK_
<android.widget.RemoteViews$SetOnClickFillInIntent$1: void onClick(android.view.View)> -> _SINK_
<android.filterfw.core.Filter: void addOutputBasedOnInput(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setTextBeforeCursor(java.lang.CharSequence,int)> -> _SINK_
<android.net.http.HttpsConnection: void initializeEngine(java.io.File)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.app.backup.BackupAgent: void fullBackupFile(java.io.File,android.app.backup.FullBackupDataOutput)> -> _SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)> -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)> -> _SINK_
<android.database.sqlite.SQLiteQuery: int fillWindow(android.database.CursorWindow)> -> _SINK_
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _SINK_
<android.webkit.CallbackProxy: void onJsAlert(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.media.Ringtone: void setStreamType(int)> -> _SINK_
<android.database.DatabaseUtils: void writeExceptionToParcel(android.os.Parcel,java.lang.Exception)> -> _SINK_
<android.content.Intent: int fillIn(android.content.Intent,int)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.AbsListView: boolean onConsistencyCheck(int)> -> _SINK_
<android.media.MediaPlayer: void setSurface(android.view.Surface)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_
<android.util.Slog: int println(int,java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.LogPrinter: void println(java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: boolean onJsBeforeUnload(java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebView$PrivateHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void addToCompiledQueries(java.lang.String,android.database.sqlite.SQLiteCompiledSql)> -> _SINK_
<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)> -> _SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.widget.RemoteViews$Action: boolean startIntentSafely(android.content.Context,android.app.PendingIntent,android.content.Intent)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setExtractedText(android.view.inputmethod.ExtractedText,int)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SINK_
<com.android.server.am.ActivityStack: boolean realStartActivityLocked(com.android.server.am.ActivityRecord,com.android.server.am.ProcessRecord,boolean,boolean)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.net.EthernetDataTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream)> -> _SINK_
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putString(int,java.lang.String)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setTextAfterCursor(java.lang.CharSequence,int)> -> _SINK_
<android.filterfw.core.Filter: void pushOutput(java.lang.String,android.filterfw.core.Frame)> -> _SINK_
<android.filterfw.core.Filter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> -> _SINK_
<android.app.backup.BackupAgent: void fullBackupFileTree(java.lang.String,java.lang.String,java.lang.String,java.util.HashSet,android.app.backup.FullBackupDataOutput)> -> _SINK_
<com.android.server.location.GpsLocationProvider: void setMinTime(long,android.os.WorkSource)> -> _SINK_
<android.view.ViewGroup: void debug(int)> -> _SINK_
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setCursorCapsMode(int,int)> -> _SINK_
<android.webkit.CallbackProxy: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void apply(android.view.View,android.view.ViewGroup)> -> _SINK_
<android.graphics.drawable.ShapeDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: void handlePropertyValue(com.android.vcard.VCardProperty,java.lang.String)> -> _SINK_
<android.graphics.drawable.GradientDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.filterfw.core.Filter: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)> -> _SINK_
<android.webkit.WebViewDatabase: void setFormData(java.lang.String,java.util.HashMap)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<com.android.server.NetworkManagementSocketTagger: void setKernelCounterSet(int,int)> -> _SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)> -> _SINK_
<android.media.Metadata: boolean parse(android.os.Parcel)> -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putLong(int,long)> -> _SINK_
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)> -> _SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setupSetter(java.lang.Class)> -> _SINK_
<android.webkit.CallbackProxy: java.lang.String onJsPrompt(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.view.ViewGroup: boolean onConsistencyCheck(int)> -> _SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)> -> _SINK_
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> -> _SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.filterfw.core.Filter: void addProgramPort(java.lang.String,java.lang.String,java.lang.reflect.Field,java.lang.Class,boolean)> -> _SINK_
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)> -> _SINK_
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)> -> _SINK_
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> android.permission.RECORD_AUDIO -> _SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)> -> _SINK_
<android.webkit.CallbackProxy: boolean onJsConfirm(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setSelectedText(java.lang.CharSequence,int)> -> _SINK_
<android.util.Log: int println(int,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> -> _SINK_
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)> -> _SINK_
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> -> _SINK_
<com.android.vcard.VCardParserImpl_V21: com.android.vcard.VCardProperty constructPropertyData(java.lang.String)> -> _SINK_


<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean access$400(com.android.internal.telephony.gsm.SimSmsInterfaceManager,com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchBroadcastPdus(byte[][],boolean)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.RECEIVE_SMS -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void handleReachSentLimit(com.android.internal.telephony.SMSDispatcher$SmsTracker)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: void setFromCodeScheme(int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSubmitPdu(com.android.internal.telephony.cdma.SmsMessage$SubmitPdu,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> -> _SINK_
<android.telephony.SmsManager: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> android.permission.RECEIVE_SMS -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void setmIccSmsInterfaceManager(com.android.internal.telephony.IccSmsInterfaceManager)> -> _SINK_
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: void setToCodeScheme(int)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.WRITE_CONTACTS -> _SINK_
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean disableCellBroadcast(int)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_CONTACTS -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: void setSelected(boolean)> -> _SINK_
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> -> _SINK_
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.SEND_SMS -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.WRITE_SMS -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> android.permission.READ_SMS -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: void setToServiceId(int)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_SMS -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])> -> _SINK_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: void setFromServiceId(int)> -> _SINK_
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> android.permission.RECEIVE_SMS -> _SINK_
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> -> _SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> -> _SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean disableCellBroadcastRange(int,int)> -> _SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager$CellBroadcastRangeManager: void addRange(int,int,boolean)> -> _SINK_


<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.server.wm.WindowManagerService: boolean viewServerWindowCommand(java.net.Socket,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: int disableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)> -> _SINK_
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: void setEnabledSingleShiftTables(int[])> -> _SINK_
<com.android.internal.telephony.RestrictedState: void setCsNormalRestricted(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: void handlePollCalls(android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: void handlePollCalls(android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: void sendDtmf(char)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivitiesInPackage(int,android.content.Intent[],java.lang.String[],android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.MccTable$MccEntry: int compareTo(com.android.internal.telephony.MccTable$MccEntry)> -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.DataCallState: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties,boolean)> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMessageWaiting(int,int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.AppErrorDialog$1: void handleMessage(android.os.Message)> -> _SINK_
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void saveClirSetting(int)> -> _SINK_
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void println(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.GetInputParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService$1: boolean allowFilterResult(android.content.IntentFilter,java.util.List)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)> -> _SINK_
<android.telephony.ServiceState: void setCdmaDefaultRoamingIndicator(int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResultMessage(int,android.os.AsyncResult)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.PlayToneParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setCardState(int)> -> _SINK_
<com.android.server.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.UUSInfo: void setUserData(byte[])> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)> -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void setEnabled(int,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.am.PendingIntentRecord: int sendInner(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.IBinder,java.lang.String,int,int,int)> -> _SINK_
<com.android.internal.telephony.RetryManager: void setRetryCount(int)> -> _SINK_
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<com.android.server.wm.InputManager$Callbacks: void notifyConfigurationChanged(long)> -> _SINK_
<android.content.res.Resources: void updateSystemConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: int charToGsmExtended(char)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setNumApplications(int)> -> _SINK_
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void handleMessage(android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo)> -> _SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: void setEnterNotificationParams(com.android.internal.telephony.DataConnection$DisconnectParams)> -> _SINK_
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.InputMethodManagerService: void setInputMethodLocked(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)> -> _SINK_
<com.android.internal.telephony.IccCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.CallTracker: boolean isCommandExceptionRadioNotAvailable(java.lang.Throwable)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.os.IBinder peekService(android.content.Intent,java.lang.String)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)> -> _SINK_
<com.android.server.am.ActivityStack: int startActivityMayWait(android.app.IApplicationThread,int,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean,android.app.IActivityManager$WaitResult,android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setUnitTestMode(boolean)> -> _SINK_
<com.android.internal.telephony.DataConnection: int access$508(com.android.internal.telephony.DataConnection)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)> -> _SINK_
<com.android.server.am.ActivityManagerService$2: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RestrictedState: void setPsRestricted(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.cat.SelectItemParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)> -> _SINK_
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)> -> _SINK_
<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.server.am.ActivityManagerService: void setWindowManager(com.android.server.wm.WindowManagerService)> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void access$600(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.cat.RilMessage)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setCdmaSubscriptionAppIndex(int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setGsmUmtsSubscriptionAppIndex(int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmConnection: boolean update(com.android.internal.telephony.DriverCall)> -> _SINK_
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.cat.CatResponseMessage: void setYesNo(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> android.permission.SET_TIME_ZONE -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> android.permission.MODIFY_PHONE_STATE -> _SINK_
<android.telephony.ServiceState: void setCdmaEriIconIndex(int)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: int access$000(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int,int)> -> _SINK_
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaConnection: boolean update(com.android.internal.telephony.DriverCall)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)> -> _SINK_
<com.android.internal.telephony.cat.ValueParser: int retrieveItemId(com.android.internal.telephony.cat.ComprehensionTlv)> -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivities(android.app.IApplicationThread,android.content.Intent[],java.lang.String[],android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.RIL: void setPhoneType(int)> -> _SINK_
<com.android.internal.telephony.DataConnection: void access$700(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)> -> _SINK_
<com.android.internal.telephony.IccCard: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ServiceStateTracker: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)> -> _SINK_
<com.android.server.am.ActivityManagerService: void dumpMemItems(java.io.PrintWriter,java.lang.String,java.util.ArrayList,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.CatResponseMessage: void setMenuSelection(int)> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.CallSetupParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> -> _SINK_
<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setNextDialFailImmediately(boolean)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: void waitForResult(java.util.concurrent.atomic.AtomicBoolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.IconLoader: void loadIcons(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.DisplayTextParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<android.telephony.ServiceState: void setState(int)> -> _SINK_
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection: int access$500(com.android.internal.telephony.DataConnection)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> -> _SINK_
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: int dispatchGsmMessage(com.android.internal.telephony.SmsMessageBase)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)> -> _SINK_
<com.android.server.am.ActivityStack: int startActivityUncheckedLocked(com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,android.net.Uri[],int,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentDataStallAlarm(android.content.Intent)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)> -> _SINK_
<com.android.server.am.ActivityStack: int startActivityLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.content.pm.ActivityInfo,android.os.IBinder,java.lang.String,int,int,int,boolean,boolean,com.android.server.am.ActivityRecord[])> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)> -> _SINK_
<android.content.res.Resources: void updateSystemConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setAutoProgressConnectingCall(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<android.telephony.ServiceState: android.telephony.ServiceState newFromBundle(android.os.Bundle)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.am.ActivityStack: boolean ensureActivityConfigurationLocked(com.android.server.am.ActivityRecord,int)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.ComponentName startServiceInPackage(int,android.content.Intent,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cat.CatResponseMessage: void setConfirmation(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.app.ActivityThread: boolean applyConfigurationToResourcesLocked(android.content.res.Configuration,android.content.res.CompatibilityInfo)> -> _SINK_
<com.android.internal.telephony.cat.IconLoader: void loadIcon(int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> -> _SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection: int access$000(com.android.internal.telephony.DataConnection)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)> -> _SINK_
<com.android.server.am.ActivityManagerService: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent)> -> _SINK_
<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: void closeSystemDialogs(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService$8: boolean handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: void setmIccPhoneBookInterfaceManager(com.android.internal.telephony.IccPhoneBookInterfaceManager)> -> _SINK_
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> -> _SINK_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> android.permission.WRITE_CONTACTS -> _SINK_
<com.android.server.am.ActivityManagerService: void setRequestedOrientation(android.os.IBinder,int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: void setEnterNotificationParams(com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause,int)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void publishContentProviders(android.app.IApplicationThread,java.util.List)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> android.permission.SET_TIME_ZONE -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)> -> _SINK_
<com.android.internal.telephony.IccCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)> -> _SINK_
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void setmPhoneSubInfo(com.android.internal.telephony.PhoneSubInfo)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.am.UsageStatsService: void noteResumeComponent(android.content.ComponentName)> -> _SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMessageWaiting(int,int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSystemLocale(java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.AdnRecord: void setEmails(java.lang.String[])> -> _SINK_
<com.android.internal.telephony.cat.CatResponseMessage: void setInput(java.lang.String)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection: int access$510(com.android.internal.telephony.DataConnection)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection: boolean configureRetry(int,int,int)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.CatResponseMessage: void setResultCode(com.android.internal.telephony.cat.ResultCode)> -> _SINK_
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedGsmCallState: void setNextDialFailImmediately(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.server.InputMethodManagerService: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)> -> _SINK_
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> -> _SINK_
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void writeToParcel(android.os.Parcel)> -> _SINK_
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)> -> _SINK_
<com.android.server.pm.PackageManagerService$PackageHandler: void doHandleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)> -> _SINK_
<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.MccTable$MccEntry: int compareTo(java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setCdmaTechnology(int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void setNextCallFailCause(int)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)> -> _SINK_
<com.android.server.am.PendingIntentRecord: int send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String)> -> _SINK_
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.Connection: void setUserData(java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.cat.CommandParamsFactory: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.SimulatedGsmCallState: void setAutoProgressConnectingCall(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setFrontActivityScreenCompatMode(int)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: void setEnabledLockingShiftTables(int[])> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)> -> _SINK_
<android.telephony.ServiceState: void setSystemAndNetworkId(int,int)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> android.permission.WRITE_SETTINGS -> _SINK_
<com.android.internal.telephony.Call: boolean hasConnection(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)> -> _SINK_
<com.android.server.am.ActivityManagerService: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cat.DTTZResponseData: void format(java.io.ByteArrayOutputStream)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResultMessage(int,android.os.AsyncResult)> -> _SINK_
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> -> _SINK_
<android.telephony.ServiceState: void setCdmaEriIconMode(int)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: int dispatchGsmMessage(com.android.internal.telephony.SmsMessageBase)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)> -> _SINK_
<com.android.server.InputMethodManagerService: boolean handleMessage(android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: java.util.ArrayList collectProcesses(java.io.PrintWriter,int,java.lang.String[])> -> _SINK_
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult access$300(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataCallState)> -> _SINK_
<com.android.internal.telephony.IccCardStatus: void setImsSubscriptionAppIndex(int)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.RestrictedState: void setCsEmergencyRestricted(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellLocation(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)> -> _SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService$1: java.lang.String packageForFilter(android.content.IntentFilter)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> -> _SINK_
<android.telephony.ServiceState: void setIsManualSelection(boolean)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void addLaunchCount(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)> -> _SINK_
<com.android.server.am.ServiceRecord: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: boolean equals(com.android.internal.telephony.sip.SipPhone)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)> -> _SINK_
<com.android.internal.telephony.DataConnection: int access$502(com.android.internal.telephony.DataConnection,int)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: void setMute(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)> -> _SINK_
<com.android.server.LocationManagerService$LocationWorkerHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)> -> _SINK_
<com.android.server.am.ServiceRecord: void dumpStartList(java.io.PrintWriter,java.lang.String,java.util.List,long)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)> -> _SINK_
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)> -> _SINK_
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<android.telephony.ServiceState: void setCssIndicator(int)> -> _SINK_
<com.android.server.am.ActivityManagerService: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.am.ActivityManagerService: int broadcastIntentInPackage(java.lang.String,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.cat.LanguageResponseData: void format(java.io.ByteArrayOutputStream)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> android.permission.STOP_APP_SWITCHES -> _SINK_
<android.telephony.ServiceState: void setCdmaRoamingIndicator(int)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)> -> _SINK_
<android.telephony.ServiceState: void setOperatorAlphaLong(java.lang.String)> -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)> -> _SINK_
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInput(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,boolean,boolean)> -> _SINK_
<com.android.internal.telephony.UUSInfo: void setType(int)> -> _SINK_
<com.android.server.am.StrictModeViolationDialog$1: void handleMessage(android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setImmersive(android.os.IBinder,boolean)> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceCallForwardingFlag(int,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void sendUnsolicited(java.lang.String)> -> _SINK_
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.content.res.Configuration)> -> _SINK_
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)> -> _SINK_
<com.android.internal.telephony.ApnContext: void setState(com.android.internal.telephony.DataConnectionTracker$State)> -> _SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)> -> _SINK_
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void addLaunchTime(java.lang.String,int)> -> _SINK_
<android.telephony.ServiceState: void setRoaming(boolean)> -> _SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: void setEnterNotificationParams(com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> -> _SINK_
<com.android.internal.telephony.UUSInfo: void setDcs(int)> -> _SINK_
<com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(boolean,java.util.ArrayList,com.android.internal.os.ProcessStats,android.util.SparseArray)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)> -> _SINK_
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> -> _SINK_
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.app.ActivityManagerProxy: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.content.res.Configuration)> -> _SINK_
<android.telephony.ServiceState: void setEmergencyOnly(boolean)> -> _SINK_
<com.android.internal.telephony.test.ModelInterpreter: void print(java.lang.String)> -> _SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)> -> _SINK_
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)> -> _SINK_
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> android.permission.WAKE_LOCK -> _SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: void setState(com.android.internal.telephony.Call$State)> -> _SINK_
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> android.permission.SET_TIME_ZONE -> _SINK_
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.android.server.am.ActivityManagerService: void setFocusedActivityLocked(com.android.server.am.ActivityRecord)> -> _SINK_
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.Call: void setGeneric(boolean)> -> _SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> -> _SINK_
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> -> _SINK_
<com.android.internal.telephony.DataConnection: void access$1000(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$DisconnectParams)> -> _SINK_
<android.telephony.ServiceState: void setRadioTechnology(int)> -> _SINK_
<com.android.server.am.ActivityManagerService$ServiceRestarter: void setService(com.android.server.am.ServiceRecord)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.internal.telephony.cat.SelectItemResponseData: void format(java.io.ByteArrayOutputStream)> -> _SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)> -> _SINK_
<com.android.server.am.ActivityManagerService: int startActivityInPackage(int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,boolean)> -> _SINK_
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)> -> _SINK_
<com.android.internal.telephony.cat.LaunchBrowserParams: boolean setIcon(android.graphics.Bitmap)> -> _SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int radioTechnologyToDataServiceState(int)> -> _SINK_
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)> -> _SINK_
